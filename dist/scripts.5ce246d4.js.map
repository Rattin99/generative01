{"version":3,"sources":["scripts/lib/math.js","scripts/lib/canvas.js","scripts/lib/sketch.js","node_modules/tinycolor2/tinycolor.js","scripts/lib/particle.js","scripts/variation1.js","scripts/variation2.js","scripts/variation3.js","scripts/variation4.js","scripts/index.js"],"names":["randomSign","Math","round","random","normalize","min","max","val","normalizeInverse","lerp","x","y","a","clamp","invlerp","lerpRange","x1","y1","x2","y2","pointDistance","pointA","pointB","dx","dy","sqrt","pointRotateCoord","point","angle","cos","sin","pointAngleFromVelocity","velocityX","velocityY","atan2","radiansToDegrees","rad","PI","randomNumberBetween","randomNumberBetweenMid","scalePointToCanvas","cwidth","cheight","width","height","zoomFactor","clearCanvas","canvas","context","_","clearRect","fillCanvas","opacity","color","fillStyle","fillRect","drawRotatedParticle","ctx","drawFn","particle","pSaveX","pSaveY","save","translate","rotate","restore","drawPoint","radius","beginPath","arc","fill","drawSquare","drawTriangle","half","apothem","tan","moveTo","lineTo","drawLine","strokeWidth","lineWidth","stroke","connectParticles","pArray","proximity","len","length","b","pA","pB","distance","pColor","colorRgba","toRgb","lColor","r","g","strokeStyle","drawPointTrail","trailLen","xHistory","sFade","i","startX","startY","yHistory","alpha","drawCircle","undefined","sketch","mouse","isDown","document","getElementById","getContext","window","innerWidth","innerHeight","getCanvas","mouseDown","evt","mouseMove","canvasFrame","getBoundingClientRect","mouseUp","mouseOut","addEventListener","run","variation","startSketch","removeEventListener","setup","requestAnimationFrame","render","draw","MAX_COORD_HISTORY","limitArrayLen","arr","arrLength","splice","Particle","values","initValues","mass","rotation","lifetime","updateFn","_x","_y","oX","oY","oVelocityX","oVelocityY","pcolor","_color","setAlpha","toRgbString","value","unshift","slice","pixel","psCanvasRandom","createRandomParticleValues","vel","coords","updatePosWithVelocity","edgeBounce","edgeWrap","avoidPoint","f","forceDirectionX","forceDirectionY","force","tempX","tempY","attractPoint","pointPush","psCanvasCenter","variation1","config","friction","gravity","decay","tweenDamp","margin","intensity","numParticles","particlesArray","props","push","variation2","newValues","newCoords","variation3","png","Image","src","domokun","drawImage","data","getImageData","imageZoomFactor","points","pX","pY","variation4","circles","centerX","centerY","diameter","theta","s","saveCanvasCapture","console","log","imageURI","toDataURL","href","e","key","click","setNote","note","innerText","getQueryVariable","variable","query","vars","location","search","substring","split","pair","variationKey","variations","hasOwnProperty","vToRun"],"mappings":"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","file":"scripts.5ce246d4.js","sourceRoot":"..","sourcesContent":["/*\n  // Math aliases\n  var π = Math.PI\n  var random = Math.random\n  var round = Math.round\n  var floor = Math.floor\n  var abs = Math.abs\n  var sin = Math.sin\n  var cos = Math.cos\n  var tan = Math.tan\n\n  Math Snippets\n  https://github.com/terkelg/math\n*/\n\nexport const randomSign = () => (Math.round(Math.random()) == 1 ? 1 : -1);\n\n// returns value between 0-1, 250,500,0 => .5\nexport const normalize = (min, max, val) => (val - min) / (max - min);\nexport const normalizeInverse = (min, max, val) => 1 - normalize(min, max, val);\n\n// https://twitter.com/mattdesl/status/1031305279227478016\n// https://www.trysmudford.com/blog/linear-interpolation-functions/\n// lerp(20, 80, 0.5) // 40\nexport const lerp = (x, y, a) => x * (1 - a) + y * a;\nexport const clamp = (a, min = 0, max = 1) => Math.min(max, Math.max(min, a));\n// invlerp(50, 100, 75)  // 0.5\nexport const invlerp = (x, y, a) => clamp((a - x) / (y - x));\n// a is point in 1 and converts to point in 2\n// range(10, 100, 2000, 20000, 50) // 10000\nexport const lerpRange = (x1, y1, x2, y2, a) => lerp(x2, y2, invlerp(x1, y1, a));\n\nexport const pointDistance = (pointA, pointB) => {\n    const dx = pointA.x - pointB.x;\n    const dy = pointA.y - pointB.y;\n    return Math.sqrt(dx * dx + dy * dy);\n};\n\n// https://stackoverflow.com/questions/13043945/how-do-i-calculate-the-position-of-a-point-in-html5-canvas-after-rotation\nexport const pointRotateCoord = (point, angle) => ({\n    x: point.x * cos(angle) - point.y * sin(angle),\n    y: point.y * cos(angle) + point.x * sin(angle),\n});\n\n// https://www.khanacademy.org/computing/computer-programming/programming-natural-simulations/programming-angular-movement/a/pointing-towards-movement\nexport const pointAngleFromVelocity = ({ velocityX, velocityY }) => Math.atan2(velocityY, velocityX);\n\nexport const radiansToDegrees = (rad) => (rad * 180) / Math.PI;\n\nexport const randomNumberBetween = (min, max) => Math.random() * (max - min) + min;\nexport const randomNumberBetweenMid = (min, max) => randomNumberBetween(min, max) - max / 2;\n\n// Scale up point grid and center in the canvas\nexport const scalePointToCanvas = (cwidth, cheight, width, height, zoomFactor, x, y) => {\n    const particleXOffset = cwidth / 2 - (width * zoomFactor) / 2;\n    const particleYOffset = cheight / 2 - (height * zoomFactor) / 2;\n    return {\n        x: x * zoomFactor + particleXOffset,\n        y: y * zoomFactor + particleYOffset,\n    };\n};\n","import { radiansToDegrees, pointAngleFromVelocity, pointDistance, normalizeInverse } from './math';\n\nexport const clearCanvas = (canvas, context) => (_) => context.clearRect(0, 0, canvas.width, canvas.height);\n\nexport const fillCanvas = (canvas, context) => (opacity = 1, color = '0,0,0') => {\n    context.fillStyle = `rgba(${color},${opacity})`;\n    context.fillRect(0, 0, canvas.width, canvas.height);\n};\n\nexport const drawRotatedParticle = (ctx, drawFn, particle) => {\n    const pSaveX = particle.x;\n    const pSaveY = particle.y;\n    particle.x = 0;\n    particle.y = 0;\n    ctx.save();\n    ctx.translate(pSaveX, pSaveY);\n    ctx.rotate(radiansToDegrees(pointAngleFromVelocity(particle)));\n    drawFn(ctx)(particle);\n    ctx.restore();\n    particle.x = pSaveX;\n    particle.y = pSaveY;\n};\n\nexport const drawPoint = (context) => ({ x, y, radius, color }) => {\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    context.fillStyle = color;\n    context.fill();\n};\n\nexport const drawSquare = (context) => ({ x, y, radius, color }) => {\n    context.fillStyle = color;\n    context.fillRect(x, y, radius, radius);\n    // const half = radius / 2;\n    // context.beginPath();\n    // context.moveTo(x - half, y - half);\n    // context.lineTo(x + half, y - half);\n    // context.lineTo(x + half, y + half);\n    // context.lineTo(x - half, y + half);\n    // context.fillStyle = color;\n    // context.fill();\n};\n\n// https://codepen.io/jlmakes/pen/grEENL?editors=0010\nexport const drawTriangle = (context) => ({ x, y, radius, color }) => {\n    const half = radius / 2;\n    const apothem = radius / (2 * Math.tan(Math.PI / 3));\n    const height = Math.round(Math.sqrt(3) * half);\n    // draw triangle (clockwise)\n    context.beginPath();\n    context.moveTo(x, y + (-height + apothem));\n    context.lineTo(x + half, y + apothem);\n    context.lineTo(x - half, y + apothem);\n    context.fillStyle = color;\n    context.fill();\n\n    // context.beginPath();\n    // context.arc(x, y - 3, 3, 0, Math.PI * 2, false);\n    // context.fillStyle = 'rgb(255,0,0)';\n    // context.fill();\n};\n\nexport const drawLine = (context) => (strokeWidth, x1, y1, x2, y2) => {\n    context.lineWidth = strokeWidth;\n    context.beginPath();\n    context.moveTo(x1, y1);\n    context.lineTo(x2, y2);\n    context.stroke();\n};\n\nexport const connectParticles = (context) => (pArray, proximity) => {\n    let opacity = 1;\n    const len = pArray.length;\n    for (let a = 0; a < len; a++) {\n        // all consecutive particles\n        for (let b = a; b < len; b++) {\n            const pA = pArray[a];\n            const pB = pArray[b];\n            const distance = pointDistance(pA, pB);\n            const pColor = pA.colorRgba.toRgb();\n\n            if (distance < proximity) {\n                opacity = normalizeInverse(0, proximity, distance);\n                const lColor = `rgba(${pColor.r}, ${pColor.g}, ${pColor.b}, ${opacity})`;\n                context.strokeStyle = lColor;\n                drawLine(context)(1, pA.x, pA.y, pB.x, pB.y);\n            }\n        }\n    }\n};\n\nexport const drawPointTrail = (context) => (particle) => {\n    const trailLen = particle.xHistory.length;\n    context.lineWidth = particle.radius;\n    const pColor = particle.colorRgba.toRgb();\n    const aFade = (100 / trailLen) * 0.01;\n    const alpha = 1;\n    const sFade = (particle.radius * 2) / trailLen;\n    let stroke = particle.radius * 2;\n    for (let i = 0; i < trailLen; i++) {\n        const startX = i === 0 ? particle.x : particle.xHistory[i - 1];\n        const startY = i === 0 ? particle.y : particle.yHistory[i - 1];\n        drawLine(context)(stroke, startX, startY, particle.xHistory[i], particle.yHistory[i]);\n        context.strokeStyle = `rgba(${pColor.r}, ${pColor.g}, ${pColor.b}, ${alpha})`;\n        // alpha -= aFade;\n        stroke -= sFade;\n    }\n    //\n};\n\nexport const drawCircle = (context) => ({ x, y, radius }) => {\n    if (x === undefined || y === undefined) return;\n    context.strokeStyle = 'rgba(255,255,255,.25)';\n    context.lineWidth = 1;\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    context.fillStyle = 'rgba(255,255,255,.1)';\n    context.fill();\n    context.stroke();\n};\n","/*\nConvenience canvas sketch runner. Based on p5js\n\n\nconst variation = () => {\n    const config = {};\n\n    const setup = (canvas, context) => {\n        // create initial state\n    };\n\n    // will run every frame\n    const draw = (canvas, context, mouse) => {\n        // draw on every frame\n        return 1; // -1 to exit animation loop\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n*/\n\nimport { fillCanvas } from './canvas';\n\nexport const sketch = () => {\n    const mouse = {\n        x: undefined,\n        y: undefined,\n        isDown: false,\n        radius: 100,\n    };\n\n    const canvasSizeFraction = 0.75;\n    const canvas = document.getElementById('canvas1');\n    const context = canvas.getContext('2d');\n    canvas.width = window.innerWidth * canvasSizeFraction;\n    canvas.height = window.innerHeight * canvasSizeFraction;\n\n    const getCanvas = (_) => canvas;\n    const getContext = (_) => context;\n    const getMouse = (_) => mouse;\n\n    const mouseDown = (evt) => {\n        mouse.isDown = true;\n    };\n\n    const mouseMove = (evt) => {\n        const canvasFrame = canvas.getBoundingClientRect();\n        mouse.x = evt.x - canvasFrame.x;\n        mouse.y = evt.y - canvasFrame.y;\n    };\n\n    const mouseUp = (evt) => {\n        mouse.isDown = false;\n    };\n\n    const mouseOut = (evt) => {\n        mouse.x = undefined;\n        mouse.y = undefined;\n        mouse.isDown = false;\n    };\n\n    const windowResize = (evt) => {\n        canvas.width = window.innerWidth * canvasSizeFraction;\n        canvas.height = window.innerHeight * canvasSizeFraction;\n    };\n\n    const run = (variation) => {\n        const startSketch = () => {\n            window.removeEventListener('load', startSketch);\n            variation.setup(canvas, context);\n            // fillCanvas(canvas, context)();\n            const render = () => {\n                const result = variation.draw(canvas, context, mouse);\n                if (result !== -1) {\n                    requestAnimationFrame(render);\n                }\n            };\n            requestAnimationFrame(render);\n        };\n\n        window.addEventListener('load', startSketch);\n    };\n\n    window.addEventListener('mousedown', mouseDown);\n    window.addEventListener('touchstart', mouseDown);\n\n    window.addEventListener('mousemove', mouseMove);\n    window.addEventListener('touchmove', mouseMove);\n\n    window.addEventListener('mouseup', mouseUp);\n    window.addEventListener('touchend', mouseUp);\n\n    window.addEventListener('mouseout', mouseOut);\n    window.addEventListener('touchcancel', mouseOut);\n\n    window.addEventListener('resize', windowResize);\n\n    return {\n        canvas: getCanvas,\n        context: getContext,\n        mouse: getMouse,\n        run,\n    };\n};\n","// TinyColor v1.4.2\n// https://github.com/bgrins/TinyColor\n// Brian Grinstead, MIT License\n\n(function(Math) {\n\nvar trimLeft = /^\\s+/,\n    trimRight = /\\s+$/,\n    tinyCounter = 0,\n    mathRound = Math.round,\n    mathMin = Math.min,\n    mathMax = Math.max,\n    mathRandom = Math.random;\n\nfunction tinycolor (color, opts) {\n\n    color = (color) ? color : '';\n    opts = opts || { };\n\n    // If input is already a tinycolor, return itself\n    if (color instanceof tinycolor) {\n       return color;\n    }\n    // If we are called as a function, call using new instead\n    if (!(this instanceof tinycolor)) {\n        return new tinycolor(color, opts);\n    }\n\n    var rgb = inputToRGB(color);\n    this._originalInput = color,\n    this._r = rgb.r,\n    this._g = rgb.g,\n    this._b = rgb.b,\n    this._a = rgb.a,\n    this._roundA = mathRound(100*this._a) / 100,\n    this._format = opts.format || rgb.format;\n    this._gradientType = opts.gradientType;\n\n    // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n    if (this._r < 1) { this._r = mathRound(this._r); }\n    if (this._g < 1) { this._g = mathRound(this._g); }\n    if (this._b < 1) { this._b = mathRound(this._b); }\n\n    this._ok = rgb.ok;\n    this._tc_id = tinyCounter++;\n}\n\ntinycolor.prototype = {\n    isDark: function() {\n        return this.getBrightness() < 128;\n    },\n    isLight: function() {\n        return !this.isDark();\n    },\n    isValid: function() {\n        return this._ok;\n    },\n    getOriginalInput: function() {\n      return this._originalInput;\n    },\n    getFormat: function() {\n        return this._format;\n    },\n    getAlpha: function() {\n        return this._a;\n    },\n    getBrightness: function() {\n        //http://www.w3.org/TR/AERT#color-contrast\n        var rgb = this.toRgb();\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    getLuminance: function() {\n        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        var rgb = this.toRgb();\n        var RsRGB, GsRGB, BsRGB, R, G, B;\n        RsRGB = rgb.r/255;\n        GsRGB = rgb.g/255;\n        BsRGB = rgb.b/255;\n\n        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}\n        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}\n        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}\n        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);\n    },\n    setAlpha: function(value) {\n        this._a = boundAlpha(value);\n        this._roundA = mathRound(100*this._a) / 100;\n        return this;\n    },\n    toHsv: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\n    },\n    toHsvString: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\n        return (this._a == 1) ?\n          \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\n          \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\n    },\n    toHsl: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\n    },\n    toHslString: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\n        return (this._a == 1) ?\n          \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\n          \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\n    },\n    toHex: function(allow3Char) {\n        return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function(allow3Char) {\n        return '#' + this.toHex(allow3Char);\n    },\n    toHex8: function(allow4Char) {\n        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n    },\n    toHex8String: function(allow4Char) {\n        return '#' + this.toHex8(allow4Char);\n    },\n    toRgb: function() {\n        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\n    },\n    toRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\n          \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\n    },\n    toPercentageRgb: function() {\n        return { r: mathRound(bound01(this._r, 255) * 100) + \"%\", g: mathRound(bound01(this._g, 255) * 100) + \"%\", b: mathRound(bound01(this._b, 255) * 100) + \"%\", a: this._a };\n    },\n    toPercentageRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" :\n          \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n    },\n    toName: function() {\n        if (this._a === 0) {\n            return \"transparent\";\n        }\n\n        if (this._a < 1) {\n            return false;\n        }\n\n        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function(secondColor) {\n        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n        var secondHex8String = hex8String;\n        var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n\n        if (secondColor) {\n            var s = tinycolor(secondColor);\n            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n        }\n\n        return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\n    },\n    toString: function(format) {\n        var formatSet = !!format;\n        format = format || this._format;\n\n        var formattedString = false;\n        var hasAlpha = this._a < 1 && this._a >= 0;\n        var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n\n        if (needsAlphaFormat) {\n            // Special case for \"transparent\", all other non-alpha formats\n            // will return rgba when there is transparency.\n            if (format === \"name\" && this._a === 0) {\n                return this.toName();\n            }\n            return this.toRgbString();\n        }\n        if (format === \"rgb\") {\n            formattedString = this.toRgbString();\n        }\n        if (format === \"prgb\") {\n            formattedString = this.toPercentageRgbString();\n        }\n        if (format === \"hex\" || format === \"hex6\") {\n            formattedString = this.toHexString();\n        }\n        if (format === \"hex3\") {\n            formattedString = this.toHexString(true);\n        }\n        if (format === \"hex4\") {\n            formattedString = this.toHex8String(true);\n        }\n        if (format === \"hex8\") {\n            formattedString = this.toHex8String();\n        }\n        if (format === \"name\") {\n            formattedString = this.toName();\n        }\n        if (format === \"hsl\") {\n            formattedString = this.toHslString();\n        }\n        if (format === \"hsv\") {\n            formattedString = this.toHsvString();\n        }\n\n        return formattedString || this.toHexString();\n    },\n    clone: function() {\n        return tinycolor(this.toString());\n    },\n\n    _applyModification: function(fn, args) {\n        var color = fn.apply(null, [this].concat([].slice.call(args)));\n        this._r = color._r;\n        this._g = color._g;\n        this._b = color._b;\n        this.setAlpha(color._a);\n        return this;\n    },\n    lighten: function() {\n        return this._applyModification(lighten, arguments);\n    },\n    brighten: function() {\n        return this._applyModification(brighten, arguments);\n    },\n    darken: function() {\n        return this._applyModification(darken, arguments);\n    },\n    desaturate: function() {\n        return this._applyModification(desaturate, arguments);\n    },\n    saturate: function() {\n        return this._applyModification(saturate, arguments);\n    },\n    greyscale: function() {\n        return this._applyModification(greyscale, arguments);\n    },\n    spin: function() {\n        return this._applyModification(spin, arguments);\n    },\n\n    _applyCombination: function(fn, args) {\n        return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function() {\n        return this._applyCombination(analogous, arguments);\n    },\n    complement: function() {\n        return this._applyCombination(complement, arguments);\n    },\n    monochromatic: function() {\n        return this._applyCombination(monochromatic, arguments);\n    },\n    splitcomplement: function() {\n        return this._applyCombination(splitcomplement, arguments);\n    },\n    triad: function() {\n        return this._applyCombination(triad, arguments);\n    },\n    tetrad: function() {\n        return this._applyCombination(tetrad, arguments);\n    }\n};\n\n// If input is an object, force 1 into \"1.0\" to handle ratios properly\n// String input requires \"1.0\" as input, so 1 will be treated as 1\ntinycolor.fromRatio = function(color, opts) {\n    if (typeof color == \"object\") {\n        var newColor = {};\n        for (var i in color) {\n            if (color.hasOwnProperty(i)) {\n                if (i === \"a\") {\n                    newColor[i] = color[i];\n                }\n                else {\n                    newColor[i] = convertToPercentage(color[i]);\n                }\n            }\n        }\n        color = newColor;\n    }\n\n    return tinycolor(color, opts);\n};\n\n// Given a string or object, convert that input to RGB\n// Possible string inputs:\n//\n//     \"red\"\n//     \"#f00\" or \"f00\"\n//     \"#ff0000\" or \"ff0000\"\n//     \"#ff000000\" or \"ff000000\"\n//     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n//     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n//     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n//     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n//     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n//     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n//     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n//\nfunction inputToRGB(color) {\n\n    var rgb = { r: 0, g: 0, b: 0 };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n\n    if (typeof color == \"string\") {\n        color = stringInputToObject(color);\n    }\n\n    if (typeof color == \"object\") {\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n            rgb = rgbToRgb(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n            s = convertToPercentage(color.s);\n            v = convertToPercentage(color.v);\n            rgb = hsvToRgb(color.h, s, v);\n            ok = true;\n            format = \"hsv\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n            s = convertToPercentage(color.s);\n            l = convertToPercentage(color.l);\n            rgb = hslToRgb(color.h, s, l);\n            ok = true;\n            format = \"hsl\";\n        }\n\n        if (color.hasOwnProperty(\"a\")) {\n            a = color.a;\n        }\n    }\n\n    a = boundAlpha(a);\n\n    return {\n        ok: ok,\n        format: color.format || format,\n        r: mathMin(255, mathMax(rgb.r, 0)),\n        g: mathMin(255, mathMax(rgb.g, 0)),\n        b: mathMin(255, mathMax(rgb.b, 0)),\n        a: a\n    };\n}\n\n\n// Conversion Functions\n// --------------------\n\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n// `rgbToRgb`\n// Handle bounds / percentage checking to conform to CSS color spec\n// <http://www.w3.org/TR/css3-color/>\n// *Assumes:* r, g, b in [0, 255] or [0, 1]\n// *Returns:* { r, g, b } in [0, 255]\nfunction rgbToRgb(r, g, b){\n    return {\n        r: bound01(r, 255) * 255,\n        g: bound01(g, 255) * 255,\n        b: bound01(b, 255) * 255\n    };\n}\n\n// `rgbToHsl`\n// Converts an RGB color value to HSL.\n// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n// *Returns:* { h, s, l } in [0,1]\nfunction rgbToHsl(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, l = (max + min) / 2;\n\n    if(max == min) {\n        h = s = 0; // achromatic\n    }\n    else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n\n        h /= 6;\n    }\n\n    return { h: h, s: s, l: l };\n}\n\n// `hslToRgb`\n// Converts an HSL color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nfunction hslToRgb(h, s, l) {\n    var r, g, b;\n\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n\n    function hue2rgb(p, q, t) {\n        if(t < 0) t += 1;\n        if(t > 1) t -= 1;\n        if(t < 1/6) return p + (q - p) * 6 * t;\n        if(t < 1/2) return q;\n        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n        return p;\n    }\n\n    if(s === 0) {\n        r = g = b = l; // achromatic\n    }\n    else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1/3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1/3);\n    }\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHsv`\n// Converts an RGB color value to HSV\n// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n// *Returns:* { h, s, v } in [0,1]\nfunction rgbToHsv(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, v = max;\n\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n\n    if(max == min) {\n        h = 0; // achromatic\n    }\n    else {\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, v: v };\n}\n\n// `hsvToRgb`\n// Converts an HSV color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\n function hsvToRgb(h, s, v) {\n\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n\n    var i = Math.floor(h),\n        f = h - i,\n        p = v * (1 - s),\n        q = v * (1 - f * s),\n        t = v * (1 - (1 - f) * s),\n        mod = i % 6,\n        r = [v, q, p, p, t, v][mod],\n        g = [t, v, v, q, p, p][mod],\n        b = [p, p, t, v, v, q][mod];\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHex`\n// Converts an RGB color to hex\n// Assumes r, g, and b are contained in the set [0, 255]\n// Returns a 3 or 6 character hex\nfunction rgbToHex(r, g, b, allow3Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    // Return a 3 character hex if possible\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToHex`\n// Converts an RGBA color plus alpha transparency to hex\n// Assumes r, g, b are contained in the set [0, 255] and\n// a in [0, 1]. Returns a 4 or 8 character rgba hex\nfunction rgbaToHex(r, g, b, a, allow4Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16)),\n        pad2(convertDecimalToHex(a))\n    ];\n\n    // Return a 4 character hex if possible\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToArgbHex`\n// Converts an RGBA color to an ARGB Hex8 string\n// Rarely used, but required for \"toFilter()\"\nfunction rgbaToArgbHex(r, g, b, a) {\n\n    var hex = [\n        pad2(convertDecimalToHex(a)),\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    return hex.join(\"\");\n}\n\n// `equals`\n// Can be called with any tinycolor input\ntinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) { return false; }\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n};\n\ntinycolor.random = function() {\n    return tinycolor.fromRatio({\n        r: mathRandom(),\n        g: mathRandom(),\n        b: mathRandom()\n    });\n};\n\n\n// Modification Functions\n// ----------------------\n// Thanks to less.js for some of the basics here\n// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\nfunction desaturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction saturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction greyscale(color) {\n    return tinycolor(color).desaturate(100);\n}\n\nfunction lighten (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\nfunction brighten(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\n    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\n    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\n    return tinycolor(rgb);\n}\n\nfunction darken (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\n// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n// Values outside of this range will be wrapped into this range.\nfunction spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n}\n\n// Combination Functions\n// ---------------------\n// Thanks to jQuery xColor for some of the ideas behind these\n// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\nfunction complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n}\n\nfunction triad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction tetrad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\n        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\n    ];\n}\n\nfunction analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n\n    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\n        hsl.h = (hsl.h + part) % 360;\n        ret.push(tinycolor(hsl));\n    }\n    return ret;\n}\n\nfunction monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h, s = hsv.s, v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n\n    while (results--) {\n        ret.push(tinycolor({ h: h, s: s, v: v}));\n        v = (v + modification) % 1;\n    }\n\n    return ret;\n}\n\n// Utility Functions\n// ---------------------\n\ntinycolor.mix = function(color1, color2, amount) {\n    amount = (amount === 0) ? 0 : (amount || 50);\n\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n\n    var p = amount / 100;\n\n    var rgba = {\n        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,\n        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,\n        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,\n        a: ((rgb2.a - rgb1.a) * p) + rgb1.a\n    };\n\n    return tinycolor(rgba);\n};\n\n\n// Readability Functions\n// ---------------------\n// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\n// `contrast`\n// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\ntinycolor.readability = function(color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);\n};\n\n// `isReadable`\n// Ensure that foreground and background color combinations meet WCAG2 guidelines.\n// The third argument is an optional Object.\n//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n// If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\n// *Example*\n//    tinycolor.isReadable(\"#000\", \"#111\") => false\n//    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\ntinycolor.isReadable = function(color1, color2, wcag2) {\n    var readability = tinycolor.readability(color1, color2);\n    var wcag2Parms, out;\n\n    out = false;\n\n    wcag2Parms = validateWCAG2Parms(wcag2);\n    switch (wcag2Parms.level + wcag2Parms.size) {\n        case \"AAsmall\":\n        case \"AAAlarge\":\n            out = readability >= 4.5;\n            break;\n        case \"AAlarge\":\n            out = readability >= 3;\n            break;\n        case \"AAAsmall\":\n            out = readability >= 7;\n            break;\n    }\n    return out;\n\n};\n\n// `mostReadable`\n// Given a base color and a list of possible foreground or background\n// colors for that base, returns the most readable color.\n// Optionally returns Black or White if the most readable color is unreadable.\n// *Example*\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\ntinycolor.mostReadable = function(baseColor, colorList, args) {\n    var bestColor = null;\n    var bestScore = 0;\n    var readability;\n    var includeFallbackColors, level, size ;\n    args = args || {};\n    includeFallbackColors = args.includeFallbackColors ;\n    level = args.level;\n    size = args.size;\n\n    for (var i= 0; i < colorList.length ; i++) {\n        readability = tinycolor.readability(baseColor, colorList[i]);\n        if (readability > bestScore) {\n            bestScore = readability;\n            bestColor = tinycolor(colorList[i]);\n        }\n    }\n\n    if (tinycolor.isReadable(baseColor, bestColor, {\"level\":level,\"size\":size}) || !includeFallbackColors) {\n        return bestColor;\n    }\n    else {\n        args.includeFallbackColors=false;\n        return tinycolor.mostReadable(baseColor,[\"#fff\", \"#000\"],args);\n    }\n};\n\n\n// Big List of Colors\n// ------------------\n// <http://www.w3.org/TR/css3-color/#svg-color>\nvar names = tinycolor.names = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    burntsienna: \"ea7e5d\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    grey: \"808080\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    rebeccapurple: \"663399\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\"\n};\n\n// Make it easy to access colors via `hexNames[hex]`\nvar hexNames = tinycolor.hexNames = flip(names);\n\n\n// Utilities\n// ---------\n\n// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\nfunction flip(o) {\n    var flipped = { };\n    for (var i in o) {\n        if (o.hasOwnProperty(i)) {\n            flipped[o[i]] = i;\n        }\n    }\n    return flipped;\n}\n\n// Return a valid alpha value [0,1] with all invalid values being set to 1\nfunction boundAlpha(a) {\n    a = parseFloat(a);\n\n    if (isNaN(a) || a < 0 || a > 1) {\n        a = 1;\n    }\n\n    return a;\n}\n\n// Take input from [0, n] and return it as [0, 1]\nfunction bound01(n, max) {\n    if (isOnePointZero(n)) { n = \"100%\"; }\n\n    var processPercent = isPercentage(n);\n    n = mathMin(max, mathMax(0, parseFloat(n)));\n\n    // Automatically convert percentage into number\n    if (processPercent) {\n        n = parseInt(n * max, 10) / 100;\n    }\n\n    // Handle floating point rounding errors\n    if ((Math.abs(n - max) < 0.000001)) {\n        return 1;\n    }\n\n    // Convert into [0, 1] range if it isn't already\n    return (n % max) / parseFloat(max);\n}\n\n// Force a number between 0 and 1\nfunction clamp01(val) {\n    return mathMin(1, mathMax(0, val));\n}\n\n// Parse a base-16 hex value into a base-10 integer\nfunction parseIntFromHex(val) {\n    return parseInt(val, 16);\n}\n\n// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\nfunction isOnePointZero(n) {\n    return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\n}\n\n// Check to see if string passed in is a percentage\nfunction isPercentage(n) {\n    return typeof n === \"string\" && n.indexOf('%') != -1;\n}\n\n// Force a hex value to have 2 characters\nfunction pad2(c) {\n    return c.length == 1 ? '0' + c : '' + c;\n}\n\n// Replace a decimal with it's percentage value\nfunction convertToPercentage(n) {\n    if (n <= 1) {\n        n = (n * 100) + \"%\";\n    }\n\n    return n;\n}\n\n// Converts a decimal to a hex value\nfunction convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n}\n// Converts a hex value to a decimal\nfunction convertHexToDecimal(h) {\n    return (parseIntFromHex(h) / 255);\n}\n\nvar matchers = (function() {\n\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n    // <http://www.w3.org/TR/css3-values/#number-value>\n    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n    // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n\n    return {\n        CSS_UNIT: new RegExp(CSS_UNIT),\n        rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n        rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n        hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n        hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n        hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n        hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n    };\n})();\n\n// `isValidCSSUnit`\n// Take in a single string / number and check to see if it looks like a CSS unit\n// (see `matchers` above for definition).\nfunction isValidCSSUnit(color) {\n    return !!matchers.CSS_UNIT.exec(color);\n}\n\n// `stringInputToObject`\n// Permissive string parsing.  Take in a number of formats, and output an object\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\nfunction stringInputToObject(color) {\n\n    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\n    var named = false;\n    if (names[color]) {\n        color = names[color];\n        named = true;\n    }\n    else if (color == 'transparent') {\n        return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\n    }\n\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match;\n    if ((match = matchers.rgb.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3] };\n    }\n    if ((match = matchers.rgba.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsl.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3] };\n    }\n    if ((match = matchers.hsla.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsv.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3] };\n    }\n    if ((match = matchers.hsva.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n    }\n    if ((match = matchers.hex8.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            a: convertHexToDecimal(match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex6.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n    if ((match = matchers.hex4.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            a: convertHexToDecimal(match[4] + '' + match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex3.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n\n    return false;\n}\n\nfunction validateWCAG2Parms(parms) {\n    // return valid WCAG2 parms for isReadable.\n    // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n    var level, size;\n    parms = parms || {\"level\":\"AA\", \"size\":\"small\"};\n    level = (parms.level || \"AA\").toUpperCase();\n    size = (parms.size || \"small\").toLowerCase();\n    if (level !== \"AA\" && level !== \"AAA\") {\n        level = \"AA\";\n    }\n    if (size !== \"small\" && size !== \"large\") {\n        size = \"small\";\n    }\n    return {\"level\":level, \"size\":size};\n}\n\n// Node: Export function\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = tinycolor;\n}\n// AMD/requirejs: Define the module\nelse if (typeof define === 'function' && define.amd) {\n    define(function () {return tinycolor;});\n}\n// Browser: Expose to window\nelse {\n    window.tinycolor = tinycolor;\n}\n\n})(Math);\n","import tinycolor from 'tinycolor2';\nimport { pointDistance, normalizeInverse, randomNumberBetween, lerp } from './math';\n\nconst MAX_COORD_HISTORY = 30;\n\nconst limitArrayLen = (arr) => {\n    const arrLength = arr.length;\n    if (arrLength > MAX_COORD_HISTORY) {\n        arr.splice(0, arrLength - MAX_COORD_HISTORY);\n    }\n    return arr;\n};\n\nexport class Particle {\n    constructor(values) {\n        this.initValues(values);\n    }\n\n    initValues({ x, y, velocityX, velocityY, radius, mass, color, alpha, rotation, lifetime, drawFn, updateFn }) {\n        this._x = x || 0;\n        this._y = y || 0;\n        this.xHistory = [x];\n        this.yHistory = [y];\n        this.oX = x || this.oX;\n        this.oY = y || this.oY;\n        this.velocityX = velocityX || 0;\n        this.velocityY = velocityY || 0;\n        this.oVelocityX = velocityX || 0;\n        this.oVelocityY = velocityY || 0;\n        this.mass = mass || 1;\n        this.radius = radius || 1;\n        this.color = color || tinycolor({ r: 255, g: 255, b: 255 });\n        this.alpha = alpha || 1;\n        this.rotation = rotation || 0;\n        this.lifetime = lifetime || 1;\n        this.drawFn = drawFn;\n        this.updateFn = updateFn;\n    }\n\n    get colorRgba() {\n        const pcolor = this._color;\n        if (this.alpha >= 0 && this.alpha <= 1) {\n            pcolor.setAlpha(this.alpha);\n        } else {\n            pcolor.setAlpha(1);\n        }\n        return pcolor;\n    }\n\n    get color() {\n        return this.colorRgba.toRgbString();\n    }\n\n    // Value should be {r:val, g:val, b:val[, a:val]}\n    set color(value) {\n        return (this._color = tinycolor(value));\n    }\n\n    get x() {\n        return this._x;\n    }\n\n    set x(value) {\n        this._x = value;\n        this.xHistory.unshift(value);\n        if (this.xHistory.length > MAX_COORD_HISTORY) {\n            this.xHistory = this.xHistory.slice(0, MAX_COORD_HISTORY);\n        }\n    }\n\n    get y() {\n        return this._y;\n    }\n\n    set y(value) {\n        this._y = value;\n        this.yHistory.unshift(value);\n        if (this.yHistory.length > MAX_COORD_HISTORY) {\n            this.yHistory = this.yHistory.slice(0, MAX_COORD_HISTORY);\n        }\n    }\n\n    draw() {\n        // drawPoint(this);\n        this.drawFn(this);\n    }\n\n    update() {\n        this.updateFn(this);\n        this.draw(this);\n    }\n}\n\nexport const pixel = (x, y, color, radius) => new Particle({ x, y, color, radius });\n\nexport const psCanvasRandom = (canvas) => ({\n    x: randomNumberBetween(0, canvas.width),\n    y: randomNumberBetween(0, canvas.height),\n});\n\nexport const createRandomParticleValues = (canvas) => {\n    const vel = 2;\n    const radius = randomNumberBetween(5, 10);\n    const coords = psCanvasRandom(canvas);\n    return {\n        radius,\n        x: coords.x,\n        y: coords.y,\n        mass: randomNumberBetween(1, 10),\n        velocityX: randomNumberBetween(-vel, vel),\n        velocityY: randomNumberBetween(-vel, vel),\n        rotation: randomNumberBetween(-180, 180),\n        // color: { r: randomNumberBetween(100, 255), g: randomNumberBetween(100, 255), b: randomNumberBetween(100, 255) },\n        color: {\n            r: lerp(0, 255, coords.x / canvas.width),\n            g: randomNumberBetween(100, 255),\n            b: lerp(0, 255, coords.y / canvas.height),\n        },\n        alpha: 1,\n        lifetime: 1,\n    };\n};\n\nexport const updatePosWithVelocity = (particle) => {\n    particle.x += particle.velocityX;\n    particle.y += particle.velocityY;\n};\n\nexport const edgeBounce = ({ width, height }, particle) => {\n    if (particle.x + particle.radius > width || particle.x - particle.radius < 0) {\n        particle.velocityX *= -1;\n    }\n    if (particle.y + particle.radius > height || particle.y - particle.radius < 0) {\n        particle.velocityY *= -1;\n    }\n};\n\nexport const edgeWrap = ({ width, height }, particle) => {\n    if (particle.x + particle.radius > width) {\n        particle.x = 0 + particle.radius;\n    } else if (particle.x - particle.radius < 0) {\n        particle.x = width - particle.radius;\n    }\n    if (particle.y + particle.radius > height) {\n        particle.y = 0 + particle.radius;\n    } else if (particle.y - particle.radius < 0) {\n        particle.y = height - particle.radius;\n    }\n};\n\n// for moving points, push away/around from point\nexport const avoidPoint = (point, particle, f = 1) => {\n    const distance = pointDistance(point, particle);\n    if (distance < point.radius) {\n        const dx = point.x - particle.x;\n        const dy = point.y - particle.y;\n        const forceDirectionX = dx / distance;\n        const forceDirectionY = dy / distance;\n        const force = normalizeInverse(0, point.radius, distance) * f;\n        const tempX = forceDirectionX * force * particle.radius * 2;\n        const tempY = forceDirectionY * force * particle.radius * 2;\n        particle.x -= tempX;\n        particle.y -= tempY;\n    }\n};\n\n// for moving points, pull towards point\nexport const attractPoint = (point, particle, f = 1) => {\n    const distance = pointDistance(point, particle);\n    if (distance < point.radius) {\n        const dx = point.x - particle.x;\n        const dy = point.y - particle.y;\n        const forceDirectionX = dx / distance;\n        const forceDirectionY = dy / distance;\n        const force = normalizeInverse(0, point.radius, distance) * f;\n        const tempX = forceDirectionX * force * particle.radius * 2;\n        const tempY = forceDirectionY * force * particle.radius * 2;\n        particle.x += tempX;\n        particle.y += tempY;\n    }\n};\n\n// for moving static, push away/outward from point\nexport const pointPush = (point, particle, f = 1) => {\n    const dx = point.x - particle.x;\n    const dy = point.y - particle.y;\n    const distance = pointDistance(point, particle);\n    const forceDirectionX = dx / distance;\n    const forceDirectionY = dy / distance;\n    const force = normalizeInverse(0, point.radius, distance) * f;\n    particle.velocityX = forceDirectionX * force * particle.mass * 0.8;\n    particle.velocityY = forceDirectionY * force * particle.mass * 0.8;\n\n    if (distance < point.radius) {\n        particle.x -= particle.velocityX;\n        particle.y -= particle.velocityY;\n    } else {\n        // TODO if < 1 then snap to 0\n        if (particle.x !== particle.oX) {\n            particle.x -= (particle.x - particle.oX) * 0.1;\n        }\n        if (particle.y !== particle.oY) {\n            particle.y -= (particle.y - particle.oY) * 0.1;\n        }\n    }\n};\n","import {\n    attractPoint,\n    avoidPoint,\n    edgeBounce,\n    Particle,\n    updatePosWithVelocity,\n    createRandomParticleValues,\n} from './lib/particle';\nimport { clearCanvas, connectParticles, drawCircle, drawPoint, drawPointTrail } from './lib/canvas';\n\nconst psCanvasCenter = (canvas) => ({\n    x: canvas.width / 2,\n    y: canvas.height / 2,\n});\n\n// Based on https://www.youtube.com/watch?v=d620nV6bp0A\nexport const variation1 = () => {\n    const config = {\n        friction: 0.8,\n        gravity: 1,\n        decay: 0.05,\n        tweenDamp: 0.1,\n        margin: 50,\n        intensity: 0,\n        numParticles: 100,\n    };\n\n    const particlesArray = [];\n\n    const setup = (canvas, context) => {\n        for (let i = 0; i < config.numParticles; i++) {\n            const props = createRandomParticleValues(canvas);\n            // props.radius = 10;\n            particlesArray.push(new Particle(props));\n        }\n    };\n\n    const draw = (canvas, context, mouse) => {\n        clearCanvas(canvas, context)();\n\n        for (let i = 0; i < config.numParticles; i++) {\n            updatePosWithVelocity(particlesArray[i]);\n            edgeBounce(canvas, particlesArray[i]);\n            avoidPoint({ radius: 200, ...psCanvasCenter(canvas) }, particlesArray[i], 4);\n            attractPoint(mouse, particlesArray[i], mouse.isDown ? -1 : 1);\n            drawPoint(context)(particlesArray[i]);\n            drawPointTrail(context)(particlesArray[i]);\n        }\n        connectParticles(context)(particlesArray, 200);\n        drawCircle(context)(mouse);\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import { avoidPoint, Particle, createRandomParticleValues } from './lib/particle';\nimport { clearCanvas, connectParticles, drawCircle, drawPoint } from './lib/canvas';\nimport { randomNumberBetween } from './lib/math';\n\n// Based on https://www.youtube.com/watch?v=j_BgnpMPxzM\nexport const variation2 = () => {\n    const config = {\n        friction: 0.8,\n        gravity: 1,\n        decay: 0.05,\n        tweenDamp: 0.1,\n        margin: 50,\n        intensity: 0,\n        numParticles: 200,\n    };\n\n    const particlesArray = [];\n\n    const setup = (canvas, context) => {\n        for (let i = 0; i < config.numParticles; i++) {\n            particlesArray.push(new Particle(createRandomParticleValues(canvas)));\n        }\n    };\n\n    const draw = (canvas, context, mouse) => {\n        clearCanvas(canvas, context)();\n\n        for (let i = 0; i < config.numParticles; i++) {\n            particlesArray[i].radius -= config.decay;\n            if (particlesArray[i].radius <= 0) {\n                const newValues = createRandomParticleValues(canvas);\n                const newCoords = mouse;\n                newValues.x = newCoords.x + randomNumberBetween(-10, 10);\n                newValues.y = newCoords.y + randomNumberBetween(-10, 10);\n                particlesArray[i].initValues(newValues);\n            }\n            particlesArray[i].y += particlesArray[i].mass * (mouse.isDown ? 1 : 0.2);\n            particlesArray[i].mass += 0.2 * config.gravity;\n            if (\n                particlesArray[i].y + particlesArray[i].radius > canvas.height ||\n                particlesArray[i].y - particlesArray[i].radius < 0\n            ) {\n                particlesArray[i].mass *= -1;\n            }\n\n            avoidPoint(mouse, particlesArray[i]);\n            // attractPoint(psMouseCoords(), particlesArray[i]);\n            drawPoint(context)(particlesArray[i]);\n            // drawPointTrail(context)(particlesArray[i]);\n        }\n        connectParticles(context)(particlesArray, 100);\n        drawCircle(context)(mouse);\n\n        return 1;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import domokun from '../domokun.png';\nimport { clearCanvas, drawCircle, drawSquare, fillCanvas } from './lib/canvas';\nimport { randomNumberBetween, scalePointToCanvas } from './lib/math';\nimport { Particle, pointPush } from './lib/particle';\n\n// Based on https://www.youtube.com/watch?v=afdHgwn1XCY\nexport const variation3 = (_) => {\n    const config = {\n        friction: 0.8,\n        gravity: 1,\n        decay: 0.05,\n        tweenDamp: 0.1,\n        margin: 50,\n        intensity: 0,\n        numParticles: 200,\n    };\n\n    const png = new Image();\n    png.src = domokun;\n    const particlesArray = [];\n\n    const setup = (canvas, context) => {\n        context.drawImage(png, 0, 0);\n        const data = context.getImageData(0, 0, png.width, png.width);\n        clearCanvas(canvas, context)();\n\n        const imageZoomFactor = 7;\n\n        for (let y = 0, y2 = data.height; y < y2; y++) {\n            for (let x = 0, x2 = data.width; x < x2; x++) {\n                // BUG drawing transparent px\n                if (data.data[y * 4 * data.width + x * 4 + 3] > 128) {\n                    const points = scalePointToCanvas(\n                        canvas.width,\n                        canvas.height,\n                        data.width,\n                        data.height,\n                        imageZoomFactor,\n                        x,\n                        y\n                    );\n                    const pX = points.x;\n                    const pY = points.y;\n                    const mass = randomNumberBetween(2, 12);\n                    const r = data.data[y * 4 * data.width + x * 4];\n                    const g = data.data[y * 4 * data.width + x * 4 + 1];\n                    const b = data.data[y * 4 * data.width + x * 4 + 2];\n                    const color = { r, g, b };\n                    const radius = imageZoomFactor;\n                    particlesArray.push(new Particle({ x: pX, y: pY, mass, color, radius }));\n                }\n            }\n        }\n\n        config.numParticles = particlesArray.length;\n    };\n\n    const draw = (canvas, context, mouse) => {\n        fillCanvas(canvas, context)(0.5);\n\n        for (let i = 0; i < config.numParticles; i++) {\n            pointPush(mouse, particlesArray[i], mouse.isDown ? -1 : 1);\n            drawSquare(context)(particlesArray[i]);\n        }\n        drawCircle(context)(mouse);\n\n        return 1;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import {createRandomParticleValues, Particle, pointPush} from \"./lib/particle\";\nimport {connectParticles, drawPoint, fillCanvas} from \"./lib/canvas\";\n\nexport const variation4 = () => {\n    const config = {\n        numParticles:0\n    };\n\n    const particlesArray = [];\n    const circles = [];\n\n    const setup = (canvas, context) => {\n        const centerX = canvas.width/2;\n        const centerY = canvas.height/2;\n        const diameter = canvas.height/4;\n        const steps = 10;\n\n        for(let theta = 0; theta < 360; theta += steps) {\n            const rad = theta*(Math.PI/180);\n            const x = (Math.cos(rad)*diameter)+centerX;\n            const y = (Math.sin(rad)*diameter)+centerY;\n            circles.push([x, y]);\n            const props = createRandomParticleValues(canvas);\n            props.x = x;\n            props.y = y;\n            props.radius=1;\n            props.color = {r:0,g:0,b:0}\n            particlesArray.push(new Particle(props));\n        }\n        config.numParticles = particlesArray.length;\n        fillCanvas(canvas, context)(1,'255,255,255');\n    };\n\n    // will run every frame\n    const draw = (canvas, context, mouse) => {\n        fillCanvas(canvas, context)(0.005,'255,255,255');\n        for (let i = 0; i < config.numParticles; i++) {\n            pointPush(mouse, particlesArray[i], mouse.isDown ? -1 : 5);\n            drawPoint(context)(particlesArray[i]);\n        }\n        connectParticles(context)(particlesArray, 200);\n        return 1; // -1 to exit animation loop\n\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};","/*\nExplorations with generative code\n*/\n\nimport normliaze from 'normalize.css';\n\nimport { sketch } from './lib/sketch';\nimport { variation1 } from './variation1';\nimport { variation2 } from './variation2';\nimport { variation3 } from './variation3';\nimport {variation4} from \"./variation4\";\nimport {\n    attractPoint,\n    avoidPoint,\n    createRandomParticleValues,\n    edgeBounce,\n    Particle, pointPush,\n    updatePosWithVelocity\n} from \"./lib/particle\";\nimport {connectParticles, drawPoint, drawPointTrail, fillCanvas} from \"./lib/canvas\";\n\nconst s = sketch();\n\nconst saveCanvasCapture = (_) => {\n    console.log('Saving capture');\n    const imageURI = s.canvas().toDataURL('image/png');\n    document.getElementById('download').href = imageURI;\n};\n\ndocument.getElementById('download').addEventListener('click', saveCanvasCapture);\nwindow.addEventListener('keydown', (e) => {\n    if (e.key === 's') {\n        document.getElementById('download').click();\n    }\n});\n\nconst setNote = (note) => (document.getElementById('note').innerText = note);\n\nconst getQueryVariable = (variable) => {\n    const query = window.location.search.substring(1);\n    const vars = query.split('&');\n    for (let i = 0; i < vars.length; i++) {\n        const pair = vars[i].split('=');\n        if (pair[0] === variable) {\n            return pair[1];\n        }\n    }\n    return false;\n};\n\nlet variationKey = getQueryVariable('variation');\nvariationKey = variationKey || '1';\n\nconst variations = {\n    1: {\n        note: 'Particles are attracted to the pointer. Press to repel.',\n        sketch: variation1,\n    },\n    2: {\n        note: 'Press to increase speed.',\n        sketch: variation2,\n    },\n    3: {\n        note: 'Particles are repelled from the pointer. Press to attract.',\n        sketch: variation3,\n    },\n    4: {\n        note: 'Particles are repelled from the pointer. Press to attract.',\n        sketch: variation4,\n    },\n};\n\nif (variations.hasOwnProperty(variationKey)) {\n    const vToRun = variations[variationKey];\n    setNote(vToRun.note);\n    s.run(vToRun.sketch());\n} else {\n    setNote('Not a valid variation!');\n}\n\n"]}