{"version":3,"sources":["node_modules/tinycolor2/tinycolor.js","node_modules/seed-random/index.js","node_modules/simplex-noise/simplex-noise.js","node_modules/defined/index.js","node_modules/canvas-sketch-util/random.js","scripts/lib/Vector.js","scripts/lib/math.js","scripts/lib/canvas.js","scripts/lib/utils.js","scripts/lib/sketch.js","scripts/lib/Particle.js","scripts/lib/canvas-particles.js","scripts/released/variation1.js","scripts/released/variation2.js","scripts/released/domokun.js","scripts/released/variation4.js","scripts/released/variation5.js","scripts/released/variation6.js","scripts/released/rainbow-rake-orbit-mouse.js","scripts/lib/grids.js","scripts/released/threeAttractors.js","scripts/released/hiImage01.js","node_modules/nice-color-palettes/100.json","scripts/lib/palettes.js","scripts/lib/Timeline.js","scripts/released/windLines.js","scripts/released/waves01.js","scripts/lib/canvas-text.js","scripts/released/lissajous01.js","scripts/lib/attractors.js","scripts/released/flow-field-particles.js","scripts/released/flow-field-arcs.js","scripts/lib/Bitmap.js","scripts/lib/canvas-paint.js","scripts/released/flow-field-image.js","scripts/released/radial-noise.js","scripts/released/flow-field-ribbons.js","scripts/released/flow-field-ribbons-2.js","scripts/lib/Point.js","scripts/lib/Box.js","scripts/lib/canvas-textures.js","scripts/released/shaded-boxes.js","scripts/released/larrycarlson02.js","scripts/variationsIndex.js","scripts/index.js"],"names":["Vector","x","y","z","v","Math","sqrt","dot","length","m","c","r","mag","mult","div","divide","min","max","cm","setMag","theta","atan2","phi","asin","a","acos","n","slice","negative","b","add","subtract","multiply","cross","unit","fromAngles","cos","sin","randomDirection","random","PI","lerp","fraction","fromArray","angleBetween","angleTo","Ï€","TAU","abs","tan","pow","round","floor","setSeed","getRandomSeed","console","log","getSeed","golden","fibonacci","snapNumber","snap","houghQuantize","numAngles","quantize","round2","num","Number","EPSILON","setRandomSeed","s","randomNormalBM","u","value","randomNormalBM2","skew","randomNormalNumberBetween","randomNormalWholeBetween","randomNumberBetween","valueNonZero","randomWholeBetween","randomNumberBetweenMid","randomSign","randomBoolean","randomChance","chance","oneOf","arry","lowest","reduce","acc","highest","createRandomNumberArray","len","Array","from","map","loopingValue","t","pingPontValue","pointOnCircle","normalize","val","normalizeInverse","clamp","invlerp","mapRange","x1","y1","x2","y2","toSinValue","mapToTau","start","end","marginify","margin","width","height","pointDistance","pointA","pointB","dx","dy","pointRotateCoord","point","angle","pointAngleFromVelocity","velocityX","velocityY","aFromVector","uvFromAngle","radiansToDegrees","rad","degreesToRadians","deg","scalePointToCanvas","canvasWidth","canvasHeight","zoomFactor","create2dNoise","amplitude","frequency","noise2D","create2dNoiseAbs","create3dNoise","noise3D","create3dNoiseAbs","randomPointAround","range","radius","chaikin","arr","l","smooth","i","flat","isHiDPI","contextScale","resizeCanvas","canvas","context","scale","window","devicePixelRatio","style","clearCanvas","_","clearRect","fillCanvas","opacity","color","fillStyle","fillRect","background","toRgbString","resetStyles","strokeStyle","lineWidth","setLineDash","lineCap","sharpLines","translate","blendMode","mode","globalCompositeOperation","filter","f","pixel","size","beginPath","arc","fill","setStokeColor","drawLine","strokeWidth","linecap","moveTo","lineTo","stroke","drawLineAngle","vect","drawCircle","drawCircleFilled","drawRect","w","h","rect","drawRectFilled","drawSquareFilled","drawTriangleFilled","half","drawQuadRectFilled","mx","my","quadraticCurveTo","drawRoundRectFilled","corner","drawTestPoint","defaultValue","obj","key","hasOwnProperty","limitArrayLen","arrLength","MAX_COORD_HISTORY","splice","orientation","portrait","landscape","ratio","letter","poster","square","auto","standard","hidpi","sketch","mouse","currentVariationFn","currentVariationRes","animationId","undefined","isDown","hasStarted","fps","document","getElementById","getContext","mouseDown","evt","mouseMove","canvasFrame","getBoundingClientRect","mouseUp","mouseOut","addEventListener","applyCanvasSize","run","variation","config","innerWidth","innerHeight","newWidth","newHeight","cfgOrientation","cfgRatio","cfgScale","aSide","bSide","rendering","lastAnimationFrameTime","targetFpsInterval","startSketch","removeEventListener","setup","Date","now","requestAnimationFrame","renderAtFps","elapsed","draw","render","stop","cancelAnimationFrame","variationName","seed","name","Particle","values","initValues","index","accelerationX","accelerationY","mass","rotation","alpha","lifetime","colorFn","drawFn","updateFn","rest","props","xHistory","yHistory","oX","oY","g","velocity","fVect","fV","aV","acceleration","pV","mu","normal","vfriction","applyForce","coefficent","velUnit","speed","magSq","vdrag","affectDist","dir","sub","distanceSq","strength","force","res","warn","unshift","createRandomParticleValues","edgeBounce","particle","reverseVelocityX","reverseVelocityY","edgeWrap","drawParticlePoint","drawRotatedParticle","ctx","pSaveX","pSaveY","save","rotate","heading","args","restore","connectParticles","pArray","proximity","useAlpha","pA","pB","distance","pColor","setAlpha","toHslString","drawPointTrail","trailLen","aFade","sFade","startX","startY","drawParticleVectors","vmult","vel","drawMouse","drawAttractor","gravityPoint","forceDirectionX","forceDirectionY","tempX","tempY","avoidPoint","attractPoint","variation1","numParticles","canvasCenterX","canvasCenterY","centerRadius","particlesArray","push","updatePosWithVelocity","variation2","friction","gravity","decay","tweenDamp","intensity","pointPush","getImageDataFromImage","image","drawImage","getImageData","getImageDataColor","imageData","data","domokun","png","Image","src","domokunPng","imageZoomFactor","pxColor","points","pX","pY","variation4","circles","centerX","centerY","diameter","variation5","variation6","hue","drawRake","spacing","rainbowRakeOrbit","attractor","attract","limit","createCirclePoints","offsetX","offsetY","steps","sx","sy","createGridPointsXY","xMargin","yMargin","columns","rows","gridPoints","colStep","rowStep","col","row","columnWidth","rowHeight","createGridCellsXY","gutter","ceil","createGridPointsUV","position","threeAttractors","attractorDist","leftattractor","midattractor","rightattractor","spikes","hiImage01","sourcePng","particleColor","drag","asTinyColor","brightest","colors","getBrightness","darkest","bicPenBlue","clone","paperWhite","warmWhite","warmPink","coolGreyDark","warmGreyDark","palettes","greyWarm","greyCool","pop","retro_sunset","vapor_wave","thought_provoking","nicePalette","nicepalettes","palette","Object","keys","hslFromRange","Timeline","loop","duration","totalLoopFrames","iterations","time","playhead","frame","elapsedLoops","startTime","windLines","counter","grid","timeline","forEach","wave","startvect","onFrame","createWave","noise","cfrequency","camplitude","drawWaveLine","startx","endx","yorigin","topWave","bottomWave","dots","currentX","currentY","waveColor","lineheight","gradient","createLinearGradient","addColorStop","darken","xstep","dotColor","rnd","lighten","waves01","canvasMiddle","waveRows","maxY","waves","incrementY","cosOffset","createWavesRow","idx","mid","distFromCenter","top","bottom","buffer","colorBackground","tinycolor","mix","spin","brighten","textStyles","sansHelvetica","monoCourier","monoLucidia","serifGeorgia","default","small","drawTextFilled","text","font","fillText","measureText","setTextAlignLeftTop","textAlign","textBaseline","setTextAlignAllCenter","Curve","originX","originY","xa","xb","ya","yb","lissajous01","curves","colorCurve","colorText","desaturate","roseX","curve","k","roseY","tick","simplexNoise2d","simplexNoise3d","diagLines","sinField","d","cliffordAttractor","jongAttractor","flowAtPoint","canvasMidX","canvasMidY","renderField","fn","cell","flowFieldParticles","createRandomParticle","drawPixel","pcolor","maxSize","sNoise3d","drawFibers","clr","drawParticles","thick","startR","endR","circle","line","flowFieldArcs","arcColor","lineColor","Bitmap","scaleX","scaleY","scaley","clear","pixelColorRaw","pixelAverageGrey","pixelColor","pixelTheta","low","brightness","pixelColorFromCanvas","splatter","amount","xoff","yoff","flowFieldImage","backgroundColor","imageFlow","pixelThetaFromCanvas","drawParticle","fromCenter","imagePixelColor","imagePixelBrightness","hslColor","init","radialNoise","maxRadius","radiusScale","currentRadiusSize","history","imageColor","circleX","circleY","ox","oy","radScaled","radians","monoColor","offs","drawRibbonPoint","thickness","drawRibbon","sideA","sideB","starty","endy","rColor","flowFieldRibbons","createRibbon","fieldFn","vlimit","coords","clifford","ribbonThickness","rpoint","onCircle","reverse","drawRibbonSegment","segStartX","segStartY","segEndY","saturate","segments","segmentData","left","flowFieldRibbons2","ribbonLen","maxItterations","currentItteration","Point","defaultMP","right","defaultFlow","boxIndex","Box","children","psize","padding","clip","flowField","region","Path2D","translateX","translateY","distribution","edgeBuffer","isInside","np","stippleRect","strokeColor","j","tx","ty","tx2","ty2","texturizeRect","fillamount","shadedBoxes","boxes","boxwhite","gridMargin","gridGutter","p","freq","bidx","particles","translateInto","randomPointInside","box","createClip","particleEdgeWrap","removeClip","larrycarlson02","imageWidth","maxX","colorImageTop","colorImageBottom","colorLinesTop","colorLinesBottom","isOtherSide","sizeFromPixelBrightness","jitterX","renderPoints","closePath","getPointsDiagSinWave","xoffset","yoffset","px","py","resolution","pxcolor","pxbrightness","bright","renderImage","variationsIndex","note","experimentalVariation","saveCanvasCapture","imageURI","toDataURL","setAttribute","href","e","click","setNote","innerText","getQueryVariable","variable","query","vars","location","search","substring","split","pair","variationKey","variationKeys","vToRun"],"mappings":"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AAA,SACA,WAAA,SACA,UAAA,SACA,MAAA,SACA,eAAA,SACA,SAAA,SACA,QAAA,SACA,KAAA,MACA,SAAA,SACA,SAAA,SACA,cAAA,SACA,SAAA,SACA,UAAA,SACA,SAAA,SACA,UAAA,SACA,YAAA,SACA,eAAA,SACA,WAAA,SACA,WAAA,SACA,QAAA,SACA,WAAA,SACA,aAAA,SACA,cAAA,SACA,cAAA,SACA,cAAA,SACA,cAAA,SACA,WAAA,SACA,SAAA,SACA,YAAA,SACA,QAAA,SACA,QAAA,SACA,WAAA,SACA,UAAA,SACA,YAAA,SACA,YAAA,SACA,QAAA,MACA,UAAA,SACA,WAAA,SACA,KAAA,SACA,UAAA,SACA,KAAA,SACA,MAAA,SACA,YAAA,SACA,KAAA,SACA,SAAA,SACA,QAAA,SACA,UAAA,SACA,OAAA,SACA,MAAA,SACA,MAAA,SACA,SAAA,SACA,cAAA,SACA,UAAA,SACA,aAAA,SACA,UAAA,SACA,WAAA,SACA,UAAA,SACA,qBAAA,SACA,UAAA,SACA,WAAA,SACA,UAAA,SACA,UAAA,SACA,YAAA,SACA,cAAA,SACA,aAAA,SACA,eAAA,MACA,eAAA,MACA,eAAA,SACA,YAAA,SACA,KAAA,MACA,UAAA,SACA,MAAA,SACA,QAAA,MACA,OAAA,SACA,iBAAA,SACA,WAAA,SACA,aAAA,SACA,aAAA,SACA,eAAA,SACA,gBAAA,SACA,kBAAA,SACA,gBAAA,SACA,gBAAA,SACA,aAAA,SACA,UAAA,SACA,UAAA,SACA,SAAA,SACA,YAAA,SACA,KAAA,SACA,QAAA,SACA,MAAA,SACA,UAAA,SACA,OAAA,SACA,UAAA,SACA,OAAA,SACA,cAAA,SACA,UAAA,SACA,cAAA,SACA,cAAA,SACA,WAAA,SACA,UAAA,SACA,KAAA,SACA,KAAA,SACA,KAAA,SACA,WAAA,SACA,OAAA,SACA,cAAA,SACA,IAAA,MACA,UAAA,SACA,UAAA,SACA,YAAA,SACA,OAAA,SACA,WAAA,SACA,SAAA,SACA,SAAA,SACA,OAAA,SACA,OAAA,SACA,QAAA,SACA,UAAA,SACA,UAAA,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","file":"scripts.80a462bb.js","sourceRoot":"..","sourcesContent":["// TinyColor v1.4.2\n// https://github.com/bgrins/TinyColor\n// Brian Grinstead, MIT License\n\n(function(Math) {\n\nvar trimLeft = /^\\s+/,\n    trimRight = /\\s+$/,\n    tinyCounter = 0,\n    mathRound = Math.round,\n    mathMin = Math.min,\n    mathMax = Math.max,\n    mathRandom = Math.random;\n\nfunction tinycolor (color, opts) {\n\n    color = (color) ? color : '';\n    opts = opts || { };\n\n    // If input is already a tinycolor, return itself\n    if (color instanceof tinycolor) {\n       return color;\n    }\n    // If we are called as a function, call using new instead\n    if (!(this instanceof tinycolor)) {\n        return new tinycolor(color, opts);\n    }\n\n    var rgb = inputToRGB(color);\n    this._originalInput = color,\n    this._r = rgb.r,\n    this._g = rgb.g,\n    this._b = rgb.b,\n    this._a = rgb.a,\n    this._roundA = mathRound(100*this._a) / 100,\n    this._format = opts.format || rgb.format;\n    this._gradientType = opts.gradientType;\n\n    // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n    if (this._r < 1) { this._r = mathRound(this._r); }\n    if (this._g < 1) { this._g = mathRound(this._g); }\n    if (this._b < 1) { this._b = mathRound(this._b); }\n\n    this._ok = rgb.ok;\n    this._tc_id = tinyCounter++;\n}\n\ntinycolor.prototype = {\n    isDark: function() {\n        return this.getBrightness() < 128;\n    },\n    isLight: function() {\n        return !this.isDark();\n    },\n    isValid: function() {\n        return this._ok;\n    },\n    getOriginalInput: function() {\n      return this._originalInput;\n    },\n    getFormat: function() {\n        return this._format;\n    },\n    getAlpha: function() {\n        return this._a;\n    },\n    getBrightness: function() {\n        //http://www.w3.org/TR/AERT#color-contrast\n        var rgb = this.toRgb();\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    getLuminance: function() {\n        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        var rgb = this.toRgb();\n        var RsRGB, GsRGB, BsRGB, R, G, B;\n        RsRGB = rgb.r/255;\n        GsRGB = rgb.g/255;\n        BsRGB = rgb.b/255;\n\n        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}\n        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}\n        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}\n        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);\n    },\n    setAlpha: function(value) {\n        this._a = boundAlpha(value);\n        this._roundA = mathRound(100*this._a) / 100;\n        return this;\n    },\n    toHsv: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\n    },\n    toHsvString: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\n        return (this._a == 1) ?\n          \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\n          \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\n    },\n    toHsl: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\n    },\n    toHslString: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\n        return (this._a == 1) ?\n          \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\n          \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\n    },\n    toHex: function(allow3Char) {\n        return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function(allow3Char) {\n        return '#' + this.toHex(allow3Char);\n    },\n    toHex8: function(allow4Char) {\n        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n    },\n    toHex8String: function(allow4Char) {\n        return '#' + this.toHex8(allow4Char);\n    },\n    toRgb: function() {\n        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\n    },\n    toRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\n          \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\n    },\n    toPercentageRgb: function() {\n        return { r: mathRound(bound01(this._r, 255) * 100) + \"%\", g: mathRound(bound01(this._g, 255) * 100) + \"%\", b: mathRound(bound01(this._b, 255) * 100) + \"%\", a: this._a };\n    },\n    toPercentageRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" :\n          \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n    },\n    toName: function() {\n        if (this._a === 0) {\n            return \"transparent\";\n        }\n\n        if (this._a < 1) {\n            return false;\n        }\n\n        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function(secondColor) {\n        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n        var secondHex8String = hex8String;\n        var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n\n        if (secondColor) {\n            var s = tinycolor(secondColor);\n            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n        }\n\n        return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\n    },\n    toString: function(format) {\n        var formatSet = !!format;\n        format = format || this._format;\n\n        var formattedString = false;\n        var hasAlpha = this._a < 1 && this._a >= 0;\n        var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n\n        if (needsAlphaFormat) {\n            // Special case for \"transparent\", all other non-alpha formats\n            // will return rgba when there is transparency.\n            if (format === \"name\" && this._a === 0) {\n                return this.toName();\n            }\n            return this.toRgbString();\n        }\n        if (format === \"rgb\") {\n            formattedString = this.toRgbString();\n        }\n        if (format === \"prgb\") {\n            formattedString = this.toPercentageRgbString();\n        }\n        if (format === \"hex\" || format === \"hex6\") {\n            formattedString = this.toHexString();\n        }\n        if (format === \"hex3\") {\n            formattedString = this.toHexString(true);\n        }\n        if (format === \"hex4\") {\n            formattedString = this.toHex8String(true);\n        }\n        if (format === \"hex8\") {\n            formattedString = this.toHex8String();\n        }\n        if (format === \"name\") {\n            formattedString = this.toName();\n        }\n        if (format === \"hsl\") {\n            formattedString = this.toHslString();\n        }\n        if (format === \"hsv\") {\n            formattedString = this.toHsvString();\n        }\n\n        return formattedString || this.toHexString();\n    },\n    clone: function() {\n        return tinycolor(this.toString());\n    },\n\n    _applyModification: function(fn, args) {\n        var color = fn.apply(null, [this].concat([].slice.call(args)));\n        this._r = color._r;\n        this._g = color._g;\n        this._b = color._b;\n        this.setAlpha(color._a);\n        return this;\n    },\n    lighten: function() {\n        return this._applyModification(lighten, arguments);\n    },\n    brighten: function() {\n        return this._applyModification(brighten, arguments);\n    },\n    darken: function() {\n        return this._applyModification(darken, arguments);\n    },\n    desaturate: function() {\n        return this._applyModification(desaturate, arguments);\n    },\n    saturate: function() {\n        return this._applyModification(saturate, arguments);\n    },\n    greyscale: function() {\n        return this._applyModification(greyscale, arguments);\n    },\n    spin: function() {\n        return this._applyModification(spin, arguments);\n    },\n\n    _applyCombination: function(fn, args) {\n        return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function() {\n        return this._applyCombination(analogous, arguments);\n    },\n    complement: function() {\n        return this._applyCombination(complement, arguments);\n    },\n    monochromatic: function() {\n        return this._applyCombination(monochromatic, arguments);\n    },\n    splitcomplement: function() {\n        return this._applyCombination(splitcomplement, arguments);\n    },\n    triad: function() {\n        return this._applyCombination(triad, arguments);\n    },\n    tetrad: function() {\n        return this._applyCombination(tetrad, arguments);\n    }\n};\n\n// If input is an object, force 1 into \"1.0\" to handle ratios properly\n// String input requires \"1.0\" as input, so 1 will be treated as 1\ntinycolor.fromRatio = function(color, opts) {\n    if (typeof color == \"object\") {\n        var newColor = {};\n        for (var i in color) {\n            if (color.hasOwnProperty(i)) {\n                if (i === \"a\") {\n                    newColor[i] = color[i];\n                }\n                else {\n                    newColor[i] = convertToPercentage(color[i]);\n                }\n            }\n        }\n        color = newColor;\n    }\n\n    return tinycolor(color, opts);\n};\n\n// Given a string or object, convert that input to RGB\n// Possible string inputs:\n//\n//     \"red\"\n//     \"#f00\" or \"f00\"\n//     \"#ff0000\" or \"ff0000\"\n//     \"#ff000000\" or \"ff000000\"\n//     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n//     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n//     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n//     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n//     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n//     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n//     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n//\nfunction inputToRGB(color) {\n\n    var rgb = { r: 0, g: 0, b: 0 };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n\n    if (typeof color == \"string\") {\n        color = stringInputToObject(color);\n    }\n\n    if (typeof color == \"object\") {\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n            rgb = rgbToRgb(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n            s = convertToPercentage(color.s);\n            v = convertToPercentage(color.v);\n            rgb = hsvToRgb(color.h, s, v);\n            ok = true;\n            format = \"hsv\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n            s = convertToPercentage(color.s);\n            l = convertToPercentage(color.l);\n            rgb = hslToRgb(color.h, s, l);\n            ok = true;\n            format = \"hsl\";\n        }\n\n        if (color.hasOwnProperty(\"a\")) {\n            a = color.a;\n        }\n    }\n\n    a = boundAlpha(a);\n\n    return {\n        ok: ok,\n        format: color.format || format,\n        r: mathMin(255, mathMax(rgb.r, 0)),\n        g: mathMin(255, mathMax(rgb.g, 0)),\n        b: mathMin(255, mathMax(rgb.b, 0)),\n        a: a\n    };\n}\n\n\n// Conversion Functions\n// --------------------\n\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n// `rgbToRgb`\n// Handle bounds / percentage checking to conform to CSS color spec\n// <http://www.w3.org/TR/css3-color/>\n// *Assumes:* r, g, b in [0, 255] or [0, 1]\n// *Returns:* { r, g, b } in [0, 255]\nfunction rgbToRgb(r, g, b){\n    return {\n        r: bound01(r, 255) * 255,\n        g: bound01(g, 255) * 255,\n        b: bound01(b, 255) * 255\n    };\n}\n\n// `rgbToHsl`\n// Converts an RGB color value to HSL.\n// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n// *Returns:* { h, s, l } in [0,1]\nfunction rgbToHsl(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, l = (max + min) / 2;\n\n    if(max == min) {\n        h = s = 0; // achromatic\n    }\n    else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n\n        h /= 6;\n    }\n\n    return { h: h, s: s, l: l };\n}\n\n// `hslToRgb`\n// Converts an HSL color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nfunction hslToRgb(h, s, l) {\n    var r, g, b;\n\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n\n    function hue2rgb(p, q, t) {\n        if(t < 0) t += 1;\n        if(t > 1) t -= 1;\n        if(t < 1/6) return p + (q - p) * 6 * t;\n        if(t < 1/2) return q;\n        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n        return p;\n    }\n\n    if(s === 0) {\n        r = g = b = l; // achromatic\n    }\n    else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1/3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1/3);\n    }\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHsv`\n// Converts an RGB color value to HSV\n// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n// *Returns:* { h, s, v } in [0,1]\nfunction rgbToHsv(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, v = max;\n\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n\n    if(max == min) {\n        h = 0; // achromatic\n    }\n    else {\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, v: v };\n}\n\n// `hsvToRgb`\n// Converts an HSV color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\n function hsvToRgb(h, s, v) {\n\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n\n    var i = Math.floor(h),\n        f = h - i,\n        p = v * (1 - s),\n        q = v * (1 - f * s),\n        t = v * (1 - (1 - f) * s),\n        mod = i % 6,\n        r = [v, q, p, p, t, v][mod],\n        g = [t, v, v, q, p, p][mod],\n        b = [p, p, t, v, v, q][mod];\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHex`\n// Converts an RGB color to hex\n// Assumes r, g, and b are contained in the set [0, 255]\n// Returns a 3 or 6 character hex\nfunction rgbToHex(r, g, b, allow3Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    // Return a 3 character hex if possible\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToHex`\n// Converts an RGBA color plus alpha transparency to hex\n// Assumes r, g, b are contained in the set [0, 255] and\n// a in [0, 1]. Returns a 4 or 8 character rgba hex\nfunction rgbaToHex(r, g, b, a, allow4Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16)),\n        pad2(convertDecimalToHex(a))\n    ];\n\n    // Return a 4 character hex if possible\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToArgbHex`\n// Converts an RGBA color to an ARGB Hex8 string\n// Rarely used, but required for \"toFilter()\"\nfunction rgbaToArgbHex(r, g, b, a) {\n\n    var hex = [\n        pad2(convertDecimalToHex(a)),\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    return hex.join(\"\");\n}\n\n// `equals`\n// Can be called with any tinycolor input\ntinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) { return false; }\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n};\n\ntinycolor.random = function() {\n    return tinycolor.fromRatio({\n        r: mathRandom(),\n        g: mathRandom(),\n        b: mathRandom()\n    });\n};\n\n\n// Modification Functions\n// ----------------------\n// Thanks to less.js for some of the basics here\n// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\nfunction desaturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction saturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction greyscale(color) {\n    return tinycolor(color).desaturate(100);\n}\n\nfunction lighten (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\nfunction brighten(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\n    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\n    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\n    return tinycolor(rgb);\n}\n\nfunction darken (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\n// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n// Values outside of this range will be wrapped into this range.\nfunction spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n}\n\n// Combination Functions\n// ---------------------\n// Thanks to jQuery xColor for some of the ideas behind these\n// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\nfunction complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n}\n\nfunction triad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction tetrad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\n        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\n    ];\n}\n\nfunction analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n\n    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\n        hsl.h = (hsl.h + part) % 360;\n        ret.push(tinycolor(hsl));\n    }\n    return ret;\n}\n\nfunction monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h, s = hsv.s, v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n\n    while (results--) {\n        ret.push(tinycolor({ h: h, s: s, v: v}));\n        v = (v + modification) % 1;\n    }\n\n    return ret;\n}\n\n// Utility Functions\n// ---------------------\n\ntinycolor.mix = function(color1, color2, amount) {\n    amount = (amount === 0) ? 0 : (amount || 50);\n\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n\n    var p = amount / 100;\n\n    var rgba = {\n        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,\n        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,\n        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,\n        a: ((rgb2.a - rgb1.a) * p) + rgb1.a\n    };\n\n    return tinycolor(rgba);\n};\n\n\n// Readability Functions\n// ---------------------\n// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\n// `contrast`\n// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\ntinycolor.readability = function(color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);\n};\n\n// `isReadable`\n// Ensure that foreground and background color combinations meet WCAG2 guidelines.\n// The third argument is an optional Object.\n//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n// If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\n// *Example*\n//    tinycolor.isReadable(\"#000\", \"#111\") => false\n//    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\ntinycolor.isReadable = function(color1, color2, wcag2) {\n    var readability = tinycolor.readability(color1, color2);\n    var wcag2Parms, out;\n\n    out = false;\n\n    wcag2Parms = validateWCAG2Parms(wcag2);\n    switch (wcag2Parms.level + wcag2Parms.size) {\n        case \"AAsmall\":\n        case \"AAAlarge\":\n            out = readability >= 4.5;\n            break;\n        case \"AAlarge\":\n            out = readability >= 3;\n            break;\n        case \"AAAsmall\":\n            out = readability >= 7;\n            break;\n    }\n    return out;\n\n};\n\n// `mostReadable`\n// Given a base color and a list of possible foreground or background\n// colors for that base, returns the most readable color.\n// Optionally returns Black or White if the most readable color is unreadable.\n// *Example*\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\ntinycolor.mostReadable = function(baseColor, colorList, args) {\n    var bestColor = null;\n    var bestScore = 0;\n    var readability;\n    var includeFallbackColors, level, size ;\n    args = args || {};\n    includeFallbackColors = args.includeFallbackColors ;\n    level = args.level;\n    size = args.size;\n\n    for (var i= 0; i < colorList.length ; i++) {\n        readability = tinycolor.readability(baseColor, colorList[i]);\n        if (readability > bestScore) {\n            bestScore = readability;\n            bestColor = tinycolor(colorList[i]);\n        }\n    }\n\n    if (tinycolor.isReadable(baseColor, bestColor, {\"level\":level,\"size\":size}) || !includeFallbackColors) {\n        return bestColor;\n    }\n    else {\n        args.includeFallbackColors=false;\n        return tinycolor.mostReadable(baseColor,[\"#fff\", \"#000\"],args);\n    }\n};\n\n\n// Big List of Colors\n// ------------------\n// <http://www.w3.org/TR/css3-color/#svg-color>\nvar names = tinycolor.names = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    burntsienna: \"ea7e5d\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    grey: \"808080\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    rebeccapurple: \"663399\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\"\n};\n\n// Make it easy to access colors via `hexNames[hex]`\nvar hexNames = tinycolor.hexNames = flip(names);\n\n\n// Utilities\n// ---------\n\n// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\nfunction flip(o) {\n    var flipped = { };\n    for (var i in o) {\n        if (o.hasOwnProperty(i)) {\n            flipped[o[i]] = i;\n        }\n    }\n    return flipped;\n}\n\n// Return a valid alpha value [0,1] with all invalid values being set to 1\nfunction boundAlpha(a) {\n    a = parseFloat(a);\n\n    if (isNaN(a) || a < 0 || a > 1) {\n        a = 1;\n    }\n\n    return a;\n}\n\n// Take input from [0, n] and return it as [0, 1]\nfunction bound01(n, max) {\n    if (isOnePointZero(n)) { n = \"100%\"; }\n\n    var processPercent = isPercentage(n);\n    n = mathMin(max, mathMax(0, parseFloat(n)));\n\n    // Automatically convert percentage into number\n    if (processPercent) {\n        n = parseInt(n * max, 10) / 100;\n    }\n\n    // Handle floating point rounding errors\n    if ((Math.abs(n - max) < 0.000001)) {\n        return 1;\n    }\n\n    // Convert into [0, 1] range if it isn't already\n    return (n % max) / parseFloat(max);\n}\n\n// Force a number between 0 and 1\nfunction clamp01(val) {\n    return mathMin(1, mathMax(0, val));\n}\n\n// Parse a base-16 hex value into a base-10 integer\nfunction parseIntFromHex(val) {\n    return parseInt(val, 16);\n}\n\n// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\nfunction isOnePointZero(n) {\n    return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\n}\n\n// Check to see if string passed in is a percentage\nfunction isPercentage(n) {\n    return typeof n === \"string\" && n.indexOf('%') != -1;\n}\n\n// Force a hex value to have 2 characters\nfunction pad2(c) {\n    return c.length == 1 ? '0' + c : '' + c;\n}\n\n// Replace a decimal with it's percentage value\nfunction convertToPercentage(n) {\n    if (n <= 1) {\n        n = (n * 100) + \"%\";\n    }\n\n    return n;\n}\n\n// Converts a decimal to a hex value\nfunction convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n}\n// Converts a hex value to a decimal\nfunction convertHexToDecimal(h) {\n    return (parseIntFromHex(h) / 255);\n}\n\nvar matchers = (function() {\n\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n    // <http://www.w3.org/TR/css3-values/#number-value>\n    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n    // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n\n    return {\n        CSS_UNIT: new RegExp(CSS_UNIT),\n        rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n        rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n        hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n        hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n        hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n        hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n    };\n})();\n\n// `isValidCSSUnit`\n// Take in a single string / number and check to see if it looks like a CSS unit\n// (see `matchers` above for definition).\nfunction isValidCSSUnit(color) {\n    return !!matchers.CSS_UNIT.exec(color);\n}\n\n// `stringInputToObject`\n// Permissive string parsing.  Take in a number of formats, and output an object\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\nfunction stringInputToObject(color) {\n\n    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\n    var named = false;\n    if (names[color]) {\n        color = names[color];\n        named = true;\n    }\n    else if (color == 'transparent') {\n        return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\n    }\n\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match;\n    if ((match = matchers.rgb.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3] };\n    }\n    if ((match = matchers.rgba.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsl.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3] };\n    }\n    if ((match = matchers.hsla.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsv.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3] };\n    }\n    if ((match = matchers.hsva.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n    }\n    if ((match = matchers.hex8.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            a: convertHexToDecimal(match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex6.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n    if ((match = matchers.hex4.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            a: convertHexToDecimal(match[4] + '' + match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex3.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n\n    return false;\n}\n\nfunction validateWCAG2Parms(parms) {\n    // return valid WCAG2 parms for isReadable.\n    // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n    var level, size;\n    parms = parms || {\"level\":\"AA\", \"size\":\"small\"};\n    level = (parms.level || \"AA\").toUpperCase();\n    size = (parms.size || \"small\").toLowerCase();\n    if (level !== \"AA\" && level !== \"AAA\") {\n        level = \"AA\";\n    }\n    if (size !== \"small\" && size !== \"large\") {\n        size = \"small\";\n    }\n    return {\"level\":level, \"size\":size};\n}\n\n// Node: Export function\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = tinycolor;\n}\n// AMD/requirejs: Define the module\nelse if (typeof define === 'function' && define.amd) {\n    define(function () {return tinycolor;});\n}\n// Browser: Expose to window\nelse {\n    window.tinycolor = tinycolor;\n}\n\n})(Math);\n","'use strict';\r\n\r\nvar width = 256;// each RC4 output is 0 <= x < 256\r\nvar chunks = 6;// at least six RC4 outputs for each double\r\nvar digits = 52;// there are 52 significant digits in a double\r\nvar pool = [];// pool: entropy pool starts empty\r\nvar GLOBAL = typeof global === 'undefined' ? window : global;\r\n\r\n//\r\n// The following constants are related to IEEE 754 limits.\r\n//\r\nvar startdenom = Math.pow(width, chunks),\r\n    significance = Math.pow(2, digits),\r\n    overflow = significance * 2,\r\n    mask = width - 1;\r\n\r\n\r\nvar oldRandom = Math.random;\r\n\r\n//\r\n// seedrandom()\r\n// This is the seedrandom function described above.\r\n//\r\nmodule.exports = function(seed, options) {\r\n  if (options && options.global === true) {\r\n    options.global = false;\r\n    Math.random = module.exports(seed, options);\r\n    options.global = true;\r\n    return Math.random;\r\n  }\r\n  var use_entropy = (options && options.entropy) || false;\r\n  var key = [];\r\n\r\n  // Flatten the seed string or build one from local entropy if needed.\r\n  var shortseed = mixkey(flatten(\r\n    use_entropy ? [seed, tostring(pool)] :\r\n    0 in arguments ? seed : autoseed(), 3), key);\r\n\r\n  // Use the seed to initialize an ARC4 generator.\r\n  var arc4 = new ARC4(key);\r\n\r\n  // Mix the randomness into accumulated entropy.\r\n  mixkey(tostring(arc4.S), pool);\r\n\r\n  // Override Math.random\r\n\r\n  // This function returns a random double in [0, 1) that contains\r\n  // randomness in every bit of the mantissa of the IEEE 754 value.\r\n\r\n  return function() {         // Closure to return a random double:\r\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\r\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\r\n        x = 0;                          //   and no 'extra last byte'.\r\n    while (n < significance) {          // Fill up all significant digits by\r\n      n = (n + x) * width;              //   shifting numerator and\r\n      d *= width;                       //   denominator and generating a\r\n      x = arc4.g(1);                    //   new least-significant-byte.\r\n    }\r\n    while (n >= overflow) {             // To avoid rounding up, before adding\r\n      n /= 2;                           //   last byte, shift everything\r\n      d /= 2;                           //   right using integer Math until\r\n      x >>>= 1;                         //   we have exactly the desired bits.\r\n    }\r\n    return (n + x) / d;                 // Form the number within [0, 1).\r\n  };\r\n};\r\n\r\nmodule.exports.resetGlobal = function () {\r\n  Math.random = oldRandom;\r\n};\r\n\r\n//\r\n// ARC4\r\n//\r\n// An ARC4 implementation.  The constructor takes a key in the form of\r\n// an array of at most (width) integers that should be 0 <= x < (width).\r\n//\r\n// The g(count) method returns a pseudorandom integer that concatenates\r\n// the next (count) outputs from ARC4.  Its return value is a number x\r\n// that is in the range 0 <= x < (width ^ count).\r\n//\r\n/** @constructor */\r\nfunction ARC4(key) {\r\n  var t, keylen = key.length,\r\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\r\n\r\n  // The empty key [] is treated as [0].\r\n  if (!keylen) { key = [keylen++]; }\r\n\r\n  // Set up S using the standard key scheduling algorithm.\r\n  while (i < width) {\r\n    s[i] = i++;\r\n  }\r\n  for (i = 0; i < width; i++) {\r\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\r\n    s[j] = t;\r\n  }\r\n\r\n  // The \"g\" method returns the next (count) outputs as one number.\r\n  (me.g = function(count) {\r\n    // Using instance members instead of closure state nearly doubles speed.\r\n    var t, r = 0,\r\n        i = me.i, j = me.j, s = me.S;\r\n    while (count--) {\r\n      t = s[i = mask & (i + 1)];\r\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\r\n    }\r\n    me.i = i; me.j = j;\r\n    return r;\r\n    // For robust unpredictability discard an initial batch of values.\r\n    // See http://www.rsa.com/rsalabs/node.asp?id=2009\r\n  })(width);\r\n}\r\n\r\n//\r\n// flatten()\r\n// Converts an object tree to nested arrays of strings.\r\n//\r\nfunction flatten(obj, depth) {\r\n  var result = [], typ = (typeof obj)[0], prop;\r\n  if (depth && typ == 'o') {\r\n    for (prop in obj) {\r\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\r\n    }\r\n  }\r\n  return (result.length ? result : typ == 's' ? obj : obj + '\\0');\r\n}\r\n\r\n//\r\n// mixkey()\r\n// Mixes a string seed into a key that is an array of integers, and\r\n// returns a shortened string seed that is equivalent to the result key.\r\n//\r\nfunction mixkey(seed, key) {\r\n  var stringseed = seed + '', smear, j = 0;\r\n  while (j < stringseed.length) {\r\n    key[mask & j] =\r\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\r\n  }\r\n  return tostring(key);\r\n}\r\n\r\n//\r\n// autoseed()\r\n// Returns an object for autoseeding, using window.crypto if available.\r\n//\r\n/** @param {Uint8Array=} seed */\r\nfunction autoseed(seed) {\r\n  try {\r\n    GLOBAL.crypto.getRandomValues(seed = new Uint8Array(width));\r\n    return tostring(seed);\r\n  } catch (e) {\r\n    return [+new Date, GLOBAL, GLOBAL.navigator && GLOBAL.navigator.plugins,\r\n            GLOBAL.screen, tostring(pool)];\r\n  }\r\n}\r\n\r\n//\r\n// tostring()\r\n// Converts an array of charcodes to a string\r\n//\r\nfunction tostring(a) {\r\n  return String.fromCharCode.apply(0, a);\r\n}\r\n\r\n//\r\n// When seedrandom.js is loaded, we immediately mix a few bits\r\n// from the built-in RNG into the entropy pool.  Because we do\r\n// not want to intefere with determinstic PRNG state later,\r\n// seedrandom will not call Math.random on its own again after\r\n// initialization.\r\n//\r\nmixkey(Math.random(), pool);\r\n","/*\n * A fast javascript implementation of simplex noise by Jonas Wagner\n\nBased on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\nWhich is based on example code by Stefan Gustavson (stegu@itn.liu.se).\nWith Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\nBetter rank ordering method by Stefan Gustavson in 2012.\n\n\n Copyright (c) 2018 Jonas Wagner\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n(function() {\n  'use strict';\n\n  var F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\n  var G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\n  var F3 = 1.0 / 3.0;\n  var G3 = 1.0 / 6.0;\n  var F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n  var G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n\n  function SimplexNoise(randomOrSeed) {\n    var random;\n    if (typeof randomOrSeed == 'function') {\n      random = randomOrSeed;\n    }\n    else if (randomOrSeed) {\n      random = alea(randomOrSeed);\n    } else {\n      random = Math.random;\n    }\n    this.p = buildPermutationTable(random);\n    this.perm = new Uint8Array(512);\n    this.permMod12 = new Uint8Array(512);\n    for (var i = 0; i < 512; i++) {\n      this.perm[i] = this.p[i & 255];\n      this.permMod12[i] = this.perm[i] % 12;\n    }\n\n  }\n  SimplexNoise.prototype = {\n    grad3: new Float32Array([1, 1, 0,\n      -1, 1, 0,\n      1, -1, 0,\n\n      -1, -1, 0,\n      1, 0, 1,\n      -1, 0, 1,\n\n      1, 0, -1,\n      -1, 0, -1,\n      0, 1, 1,\n\n      0, -1, 1,\n      0, 1, -1,\n      0, -1, -1]),\n    grad4: new Float32Array([0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1,\n      0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1,\n      1, 0, 1, 1, 1, 0, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1,\n      -1, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, -1, 0, -1, -1,\n      1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1,\n      -1, 1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, -1,\n      1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0,\n      -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 0]),\n    noise2D: function(xin, yin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0 = 0; // Noise contributions from the three corners\n      var n1 = 0;\n      var n2 = 0;\n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin) * F2; // Hairy factor for 2D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var t = (i + j) * G2;\n      var X0 = i - t; // Unskew the cell origin back to (x,y) space\n      var Y0 = j - t;\n      var x0 = xin - X0; // The x,y distances from the cell origin\n      var y0 = yin - Y0;\n      // For the 2D case, the simplex shape is an equilateral triangle.\n      // Determine which simplex we are in.\n      var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n      if (x0 > y0) {\n        i1 = 1;\n        j1 = 0;\n      } // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      else {\n        i1 = 0;\n        j1 = 1;\n      } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n      // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n      // c = (3-sqrt(3))/6\n      var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n      var y1 = y0 - j1 + G2;\n      var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n      var y2 = y0 - 1.0 + 2.0 * G2;\n      // Work out the hashed gradient indices of the three simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      // Calculate the contribution from the three corners\n      var t0 = 0.5 - x0 * x0 - y0 * y0;\n      if (t0 >= 0) {\n        var gi0 = permMod12[ii + perm[jj]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient\n      }\n      var t1 = 0.5 - x1 * x1 - y1 * y1;\n      if (t1 >= 0) {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1);\n      }\n      var t2 = 0.5 - x2 * x2 - y2 * y2;\n      if (t2 >= 0) {\n        var gi2 = permMod12[ii + 1 + perm[jj + 1]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to return values in the interval [-1,1].\n      return 70.0 * (n0 + n1 + n2);\n    },\n    // 3D simplex noise\n    noise3D: function(xin, yin, zin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0, n1, n2, n3; // Noise contributions from the four corners\n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var k = Math.floor(zin + s);\n      var t = (i + j + k) * G3;\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var x0 = xin - X0; // The x,y,z distances from the cell origin\n      var y0 = yin - Y0;\n      var z0 = zin - Z0;\n      // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n      // Determine which simplex we are in.\n      var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n      var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n      if (x0 >= y0) {\n        if (y0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // X Y Z order\n        else if (x0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // X Z Y order\n        else {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // Z X Y order\n      }\n      else { // x0<y0\n        if (y0 < z0) {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Z Y X order\n        else if (x0 < z0) {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Y Z X order\n        else {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // Y X Z order\n      }\n      // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n      // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n      // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n      // c = 1/6.\n      var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n      var y1 = y0 - j1 + G3;\n      var z1 = z0 - k1 + G3;\n      var x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n      var y2 = y0 - j2 + 2.0 * G3;\n      var z2 = z0 - k2 + 2.0 * G3;\n      var x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n      var y3 = y0 - 1.0 + 3.0 * G3;\n      var z3 = z0 - 1.0 + 3.0 * G3;\n      // Work out the hashed gradient indices of the four simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255;\n      // Calculate the contribution from the four corners\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n      if (t0 < 0) n0 = 0.0;\n      else {\n        var gi0 = permMod12[ii + perm[jj + perm[kk]]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0 + grad3[gi0 + 2] * z0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n      if (t1 < 0) n1 = 0.0;\n      else {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1 + grad3[gi1 + 2] * z1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n      if (t2 < 0) n2 = 0.0;\n      else {\n        var gi2 = permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2 + grad3[gi2 + 2] * z2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n      if (t3 < 0) n3 = 0.0;\n      else {\n        var gi3 = permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]] * 3;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad3[gi3] * x3 + grad3[gi3 + 1] * y3 + grad3[gi3 + 2] * z3);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to stay just inside [-1,1]\n      return 32.0 * (n0 + n1 + n2 + n3);\n    },\n    // 4D simplex noise, better simplex rank ordering method 2012-03-09\n    noise4D: function(x, y, z, w) {\n      var perm = this.perm;\n      var grad4 = this.grad4;\n\n      var n0, n1, n2, n3, n4; // Noise contributions from the five corners\n      // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n      var s = (x + y + z + w) * F4; // Factor for 4D skewing\n      var i = Math.floor(x + s);\n      var j = Math.floor(y + s);\n      var k = Math.floor(z + s);\n      var l = Math.floor(w + s);\n      var t = (i + j + k + l) * G4; // Factor for 4D unskewing\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var W0 = l - t;\n      var x0 = x - X0; // The x,y,z,w distances from the cell origin\n      var y0 = y - Y0;\n      var z0 = z - Z0;\n      var w0 = w - W0;\n      // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n      // To find out which of the 24 possible simplices we're in, we need to\n      // determine the magnitude ordering of x0, y0, z0 and w0.\n      // Six pair-wise comparisons are performed between each possible pair\n      // of the four coordinates, and the results are used to rank the numbers.\n      var rankx = 0;\n      var ranky = 0;\n      var rankz = 0;\n      var rankw = 0;\n      if (x0 > y0) rankx++;\n      else ranky++;\n      if (x0 > z0) rankx++;\n      else rankz++;\n      if (x0 > w0) rankx++;\n      else rankw++;\n      if (y0 > z0) ranky++;\n      else rankz++;\n      if (y0 > w0) ranky++;\n      else rankw++;\n      if (z0 > w0) rankz++;\n      else rankw++;\n      var i1, j1, k1, l1; // The integer offsets for the second simplex corner\n      var i2, j2, k2, l2; // The integer offsets for the third simplex corner\n      var i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n      // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n      // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n      // impossible. Only the 24 indices which have non-zero entries make any sense.\n      // We use a thresholding to set the coordinates in turn from the largest magnitude.\n      // Rank 3 denotes the largest coordinate.\n      i1 = rankx >= 3 ? 1 : 0;\n      j1 = ranky >= 3 ? 1 : 0;\n      k1 = rankz >= 3 ? 1 : 0;\n      l1 = rankw >= 3 ? 1 : 0;\n      // Rank 2 denotes the second largest coordinate.\n      i2 = rankx >= 2 ? 1 : 0;\n      j2 = ranky >= 2 ? 1 : 0;\n      k2 = rankz >= 2 ? 1 : 0;\n      l2 = rankw >= 2 ? 1 : 0;\n      // Rank 1 denotes the second smallest coordinate.\n      i3 = rankx >= 1 ? 1 : 0;\n      j3 = ranky >= 1 ? 1 : 0;\n      k3 = rankz >= 1 ? 1 : 0;\n      l3 = rankw >= 1 ? 1 : 0;\n      // The fifth corner has all coordinate offsets = 1, so no need to compute that.\n      var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n      var y1 = y0 - j1 + G4;\n      var z1 = z0 - k1 + G4;\n      var w1 = w0 - l1 + G4;\n      var x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n      var y2 = y0 - j2 + 2.0 * G4;\n      var z2 = z0 - k2 + 2.0 * G4;\n      var w2 = w0 - l2 + 2.0 * G4;\n      var x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n      var y3 = y0 - j3 + 3.0 * G4;\n      var z3 = z0 - k3 + 3.0 * G4;\n      var w3 = w0 - l3 + 3.0 * G4;\n      var x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n      var y4 = y0 - 1.0 + 4.0 * G4;\n      var z4 = z0 - 1.0 + 4.0 * G4;\n      var w4 = w0 - 1.0 + 4.0 * G4;\n      // Work out the hashed gradient indices of the five simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255;\n      var ll = l & 255;\n      // Calculate the contribution from the five corners\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n      if (t0 < 0) n0 = 0.0;\n      else {\n        var gi0 = (perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32) * 4;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad4[gi0] * x0 + grad4[gi0 + 1] * y0 + grad4[gi0 + 2] * z0 + grad4[gi0 + 3] * w0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n      if (t1 < 0) n1 = 0.0;\n      else {\n        var gi1 = (perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32) * 4;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad4[gi1] * x1 + grad4[gi1 + 1] * y1 + grad4[gi1 + 2] * z1 + grad4[gi1 + 3] * w1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n      if (t2 < 0) n2 = 0.0;\n      else {\n        var gi2 = (perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32) * 4;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad4[gi2] * x2 + grad4[gi2 + 1] * y2 + grad4[gi2 + 2] * z2 + grad4[gi2 + 3] * w2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n      if (t3 < 0) n3 = 0.0;\n      else {\n        var gi3 = (perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32) * 4;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad4[gi3] * x3 + grad4[gi3 + 1] * y3 + grad4[gi3 + 2] * z3 + grad4[gi3 + 3] * w3);\n      }\n      var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n      if (t4 < 0) n4 = 0.0;\n      else {\n        var gi4 = (perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32) * 4;\n        t4 *= t4;\n        n4 = t4 * t4 * (grad4[gi4] * x4 + grad4[gi4 + 1] * y4 + grad4[gi4 + 2] * z4 + grad4[gi4 + 3] * w4);\n      }\n      // Sum up and scale the result to cover the range [-1,1]\n      return 27.0 * (n0 + n1 + n2 + n3 + n4);\n    }\n  };\n\n  function buildPermutationTable(random) {\n    var i;\n    var p = new Uint8Array(256);\n    for (i = 0; i < 256; i++) {\n      p[i] = i;\n    }\n    for (i = 0; i < 255; i++) {\n      var r = i + ~~(random() * (256 - i));\n      var aux = p[i];\n      p[i] = p[r];\n      p[r] = aux;\n    }\n    return p;\n  }\n  SimplexNoise._buildPermutationTable = buildPermutationTable;\n\n  function alea() {\n    // Johannes BaagÃ¸e <baagoe@baagoe.com>, 2010\n    var s0 = 0;\n    var s1 = 0;\n    var s2 = 0;\n    var c = 1;\n\n    var mash = masher();\n    s0 = mash(' ');\n    s1 = mash(' ');\n    s2 = mash(' ');\n\n    for (var i = 0; i < arguments.length; i++) {\n      s0 -= mash(arguments[i]);\n      if (s0 < 0) {\n        s0 += 1;\n      }\n      s1 -= mash(arguments[i]);\n      if (s1 < 0) {\n        s1 += 1;\n      }\n      s2 -= mash(arguments[i]);\n      if (s2 < 0) {\n        s2 += 1;\n      }\n    }\n    mash = null;\n    return function() {\n      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n      s0 = s1;\n      s1 = s2;\n      return s2 = t - (c = t | 0);\n    };\n  }\n  function masher() {\n    var n = 0xefc8249d;\n    return function(data) {\n      data = data.toString();\n      for (var i = 0; i < data.length; i++) {\n        n += data.charCodeAt(i);\n        var h = 0.02519603282416938 * n;\n        n = h >>> 0;\n        h -= n;\n        h *= n;\n        n = h >>> 0;\n        h -= n;\n        n += h * 0x100000000; // 2^32\n      }\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n    };\n  }\n\n  // amd\n  if (typeof define !== 'undefined' && define.amd) define(function() {return SimplexNoise;});\n  // common js\n  if (typeof exports !== 'undefined') exports.SimplexNoise = SimplexNoise;\n  // browser\n  else if (typeof window !== 'undefined') window.SimplexNoise = SimplexNoise;\n  // nodejs\n  if (typeof module !== 'undefined') {\n    module.exports = SimplexNoise;\n  }\n\n})();\n","module.exports = function () {\n    for (var i = 0; i < arguments.length; i++) {\n        if (arguments[i] !== undefined) return arguments[i];\n    }\n};\n","var seedRandom = require('seed-random');\nvar SimplexNoise = require('simplex-noise');\nvar defined = require('defined');\n\nfunction createRandom (defaultSeed) {\n  defaultSeed = defined(defaultSeed, null);\n  var defaultRandom = Math.random;\n  var currentSeed;\n  var currentRandom;\n  var noiseGenerator;\n  var _nextGaussian = null;\n  var _hasNextGaussian = false;\n\n  setSeed(defaultSeed);\n\n  return {\n    value: value,\n    createRandom: function (defaultSeed) {\n      return createRandom(defaultSeed);\n    },\n    setSeed: setSeed,\n    getSeed: getSeed,\n    getRandomSeed: getRandomSeed,\n    valueNonZero: valueNonZero,\n    permuteNoise: permuteNoise,\n    noise1D: noise1D,\n    noise2D: noise2D,\n    noise3D: noise3D,\n    noise4D: noise4D,\n    sign: sign,\n    boolean: boolean,\n    chance: chance,\n    range: range,\n    rangeFloor: rangeFloor,\n    pick: pick,\n    shuffle: shuffle,\n    onCircle: onCircle,\n    insideCircle: insideCircle,\n    onSphere: onSphere,\n    insideSphere: insideSphere,\n    quaternion: quaternion,\n    weighted: weighted,\n    weightedSet: weightedSet,\n    weightedSetIndex: weightedSetIndex,\n    gaussian: gaussian\n  };\n\n  function setSeed (seed, opt) {\n    if (typeof seed === 'number' || typeof seed === 'string') {\n      currentSeed = seed;\n      currentRandom = seedRandom(currentSeed, opt);\n    } else {\n      currentSeed = undefined;\n      currentRandom = defaultRandom;\n    }\n    noiseGenerator = createNoise();\n    _nextGaussian = null;\n    _hasNextGaussian = false;\n  }\n\n  function value () {\n    return currentRandom();\n  }\n\n  function valueNonZero () {\n    var u = 0;\n    while (u === 0) u = value();\n    return u;\n  }\n\n  function getSeed () {\n    return currentSeed;\n  }\n\n  function getRandomSeed () {\n    var seed = String(Math.floor(Math.random() * 1000000));\n    return seed;\n  }\n\n  function createNoise () {\n    return new SimplexNoise(currentRandom);\n  }\n\n  function permuteNoise () {\n    noiseGenerator = createNoise();\n  }\n\n  function noise1D (x, frequency, amplitude) {\n    if (!isFinite(x)) throw new TypeError('x component for noise() must be finite');\n    frequency = defined(frequency, 1);\n    amplitude = defined(amplitude, 1);\n    return amplitude * noiseGenerator.noise2D(x * frequency, 0);\n  }\n\n  function noise2D (x, y, frequency, amplitude) {\n    if (!isFinite(x)) throw new TypeError('x component for noise() must be finite');\n    if (!isFinite(y)) throw new TypeError('y component for noise() must be finite');\n    frequency = defined(frequency, 1);\n    amplitude = defined(amplitude, 1);\n    return amplitude * noiseGenerator.noise2D(x * frequency, y * frequency);\n  }\n\n  function noise3D (x, y, z, frequency, amplitude) {\n    if (!isFinite(x)) throw new TypeError('x component for noise() must be finite');\n    if (!isFinite(y)) throw new TypeError('y component for noise() must be finite');\n    if (!isFinite(z)) throw new TypeError('z component for noise() must be finite');\n    frequency = defined(frequency, 1);\n    amplitude = defined(amplitude, 1);\n    return amplitude * noiseGenerator.noise3D(\n      x * frequency,\n      y * frequency,\n      z * frequency\n    );\n  }\n\n  function noise4D (x, y, z, w, frequency, amplitude) {\n    if (!isFinite(x)) throw new TypeError('x component for noise() must be finite');\n    if (!isFinite(y)) throw new TypeError('y component for noise() must be finite');\n    if (!isFinite(z)) throw new TypeError('z component for noise() must be finite');\n    if (!isFinite(w)) throw new TypeError('w component for noise() must be finite');\n    frequency = defined(frequency, 1);\n    amplitude = defined(amplitude, 1);\n    return amplitude * noiseGenerator.noise4D(\n      x * frequency,\n      y * frequency,\n      z * frequency,\n      w * frequency\n    );\n  }\n\n  function sign () {\n    return boolean() ? 1 : -1;\n  }\n\n  function boolean () {\n    return value() > 0.5;\n  }\n\n  function chance (n) {\n    n = defined(n, 0.5);\n    if (typeof n !== 'number') throw new TypeError('expected n to be a number');\n    return value() < n;\n  }\n\n  function range (min, max) {\n    if (max === undefined) {\n      max = min;\n      min = 0;\n    }\n\n    if (typeof min !== 'number' || typeof max !== 'number') {\n      throw new TypeError('Expected all arguments to be numbers');\n    }\n\n    return value() * (max - min) + min;\n  }\n\n  function rangeFloor (min, max) {\n    if (max === undefined) {\n      max = min;\n      min = 0;\n    }\n\n    if (typeof min !== 'number' || typeof max !== 'number') {\n      throw new TypeError('Expected all arguments to be numbers');\n    }\n\n    return Math.floor(range(min, max));\n  }\n\n  function pick (array) {\n    if (array.length === 0) return undefined;\n    return array[rangeFloor(0, array.length)];\n  }\n\n  function shuffle (arr) {\n    if (!Array.isArray(arr)) {\n      throw new TypeError('Expected Array, got ' + typeof arr);\n    }\n\n    var rand;\n    var tmp;\n    var len = arr.length;\n    var ret = arr.slice();\n    while (len) {\n      rand = Math.floor(value() * len--);\n      tmp = ret[len];\n      ret[len] = ret[rand];\n      ret[rand] = tmp;\n    }\n    return ret;\n  }\n\n  function onCircle (radius, out) {\n    radius = defined(radius, 1);\n    out = out || [];\n    var theta = value() * 2.0 * Math.PI;\n    out[0] = radius * Math.cos(theta);\n    out[1] = radius * Math.sin(theta);\n    return out;\n  }\n\n  function insideCircle (radius, out) {\n    radius = defined(radius, 1);\n    out = out || [];\n    onCircle(1, out);\n    var r = radius * Math.sqrt(value());\n    out[0] *= r;\n    out[1] *= r;\n    return out;\n  }\n\n  function onSphere (radius, out) {\n    radius = defined(radius, 1);\n    out = out || [];\n    var u = value() * Math.PI * 2;\n    var v = value() * 2 - 1;\n    var phi = u;\n    var theta = Math.acos(v);\n    out[0] = radius * Math.sin(theta) * Math.cos(phi);\n    out[1] = radius * Math.sin(theta) * Math.sin(phi);\n    out[2] = radius * Math.cos(theta);\n    return out;\n  }\n\n  function insideSphere (radius, out) {\n    radius = defined(radius, 1);\n    out = out || [];\n    var u = value() * Math.PI * 2;\n    var v = value() * 2 - 1;\n    var k = value();\n\n    var phi = u;\n    var theta = Math.acos(v);\n    var r = radius * Math.cbrt(k);\n    out[0] = r * Math.sin(theta) * Math.cos(phi);\n    out[1] = r * Math.sin(theta) * Math.sin(phi);\n    out[2] = r * Math.cos(theta);\n    return out;\n  }\n\n  function quaternion (out) {\n    out = out || [];\n    var u1 = value();\n    var u2 = value();\n    var u3 = value();\n\n    var sq1 = Math.sqrt(1 - u1);\n    var sq2 = Math.sqrt(u1);\n\n    var theta1 = Math.PI * 2 * u2;\n    var theta2 = Math.PI * 2 * u3;\n\n    var x = Math.sin(theta1) * sq1;\n    var y = Math.cos(theta1) * sq1;\n    var z = Math.sin(theta2) * sq2;\n    var w = Math.cos(theta2) * sq2;\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n  }\n\n  function weightedSet (set) {\n    set = set || [];\n    if (set.length === 0) return null;\n    return set[weightedSetIndex(set)].value;\n  }\n\n  function weightedSetIndex (set) {\n    set = set || [];\n    if (set.length === 0) return -1;\n    return weighted(set.map(function (s) {\n      return s.weight;\n    }));\n  }\n\n  function weighted (weights) {\n    weights = weights || [];\n    if (weights.length === 0) return -1;\n    var totalWeight = 0;\n    var i;\n\n    for (i = 0; i < weights.length; i++) {\n      totalWeight += weights[i];\n    }\n\n    if (totalWeight <= 0) throw new Error('Weights must sum to > 0');\n\n    var random = value() * totalWeight;\n    for (i = 0; i < weights.length; i++) {\n      if (random < weights[i]) {\n        return i;\n      }\n      random -= weights[i];\n    }\n    return 0;\n  }\n\n  function gaussian (mean, standardDerivation) {\n    mean = defined(mean, 0);\n    standardDerivation = defined(standardDerivation, 1);\n\n    // https://github.com/openjdk-mirror/jdk7u-jdk/blob/f4d80957e89a19a29bb9f9807d2a28351ed7f7df/src/share/classes/java/util/Random.java#L496\n    if (_hasNextGaussian) {\n      _hasNextGaussian = false;\n      var result = _nextGaussian;\n      _nextGaussian = null;\n      return mean + standardDerivation * result;\n    } else {\n      var v1 = 0;\n      var v2 = 0;\n      var s = 0;\n      do {\n        v1 = value() * 2 - 1; // between -1 and 1\n        v2 = value() * 2 - 1; // between -1 and 1\n        s = v1 * v1 + v2 * v2;\n      } while (s >= 1 || s === 0);\n      var multiplier = Math.sqrt(-2 * Math.log(s) / s);\n      _nextGaussian = (v2 * multiplier);\n      _hasNextGaussian = true;\n      return mean + standardDerivation * (v1 * multiplier);\n    }\n  }\n}\n\nmodule.exports = createRandom();\n","// Vector class originally from https://evanw.github.io/lightgl.js/docs/vector.html\n// Edited and expanded to match p5's vectors\n// ref - p5 vector https://p5js.org/reference/#/p5.Vector\n// https://www.khanacademy.org/computing/computer-programming/programming-natural-simulations/programming-vectors/a/more-vector-math\n\nexport class Vector {\n    constructor(x, y, z) {\n        this.x = x || 0;\n        this.y = y || 0;\n        this.z = z || 0;\n    }\n\n    negative() {\n        return new Vector(-this.x, -this.y, -this.z);\n    }\n\n    add(v) {\n        if (v instanceof Vector) return new Vector(this.x + v.x, this.y + v.y, this.z + v.z);\n        return new Vector(this.x + v, this.y + v, this.z + v);\n    }\n\n    sub(v) {\n        if (v instanceof Vector) return new Vector(this.x - v.x, this.y - v.y, this.z - v.z);\n        return new Vector(this.x - v, this.y - v, this.z - v);\n    }\n\n    mult(v) {\n        if (v instanceof Vector) return new Vector(this.x * v.x, this.y * v.y, this.z * v.z);\n        return new Vector(this.x * v, this.y * v, this.z * v);\n    }\n\n    div(v) {\n        if (v instanceof Vector) return new Vector(this.x / v.x, this.y / v.y, this.z / v.z);\n        return new Vector(this.x / v, this.y / v, this.z / v);\n    }\n\n    equals(v) {\n        return this.x === v.x && this.y === v.y && this.z === v.z;\n    }\n\n    dot(v) {\n        return this.x * v.x + this.y * v.y + this.z * v.z;\n    }\n\n    cross(v) {\n        return new Vector(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x);\n    }\n\n    length() {\n        return Math.sqrt(this.dot(this));\n    }\n\n    mag() {\n        return this.length();\n    }\n\n    magSq() {\n        const m = this.length();\n        return m * m;\n    }\n\n    setMag(m) {\n        const c = this.mag();\n        const r = m / c;\n        return this.mult(r);\n    }\n\n    normalize() {\n        let mag = this.mag();\n        mag = mag || 1;\n        return this.div(mag);\n    }\n\n    unit() {\n        return this.divide(this.length());\n    }\n\n    min() {\n        return Math.min(Math.min(this.x, this.y), this.z);\n    }\n\n    max() {\n        return Math.max(Math.max(this.x, this.y), this.z);\n    }\n\n    limit(v) {\n        const cm = this.mag();\n        if (cm > v) {\n            return this.setMag(v);\n        }\n        return this;\n    }\n\n    toAngles() {\n        return {\n            theta: Math.atan2(this.z, this.x),\n            phi: Math.asin(this.y / this.length()),\n        };\n    }\n\n    angleTo(a) {\n        return Math.acos(this.dot(a) / (this.length() * a.length()));\n    }\n\n    toArray(n) {\n        return [this.x, this.y, this.z].slice(0, n || 3);\n    }\n\n    clone() {\n        return new Vector(this.x, this.y, this.z);\n    }\n}\n\nconst negative = (a, b) => {\n    b.x = -a.x;\n    b.y = -a.y;\n    b.z = -a.z;\n    return b;\n};\nconst add = (a, b, c) => {\n    if (b instanceof Vector) {\n        c.x = a.x + b.x;\n        c.y = a.y + b.y;\n        c.z = a.z + b.z;\n    } else {\n        c.x = a.x + b;\n        c.y = a.y + b;\n        c.z = a.z + b;\n    }\n    return c;\n};\nconst subtract = (a, b, c) => {\n    if (b instanceof Vector) {\n        c.x = a.x - b.x;\n        c.y = a.y - b.y;\n        c.z = a.z - b.z;\n    } else {\n        c.x = a.x - b;\n        c.y = a.y - b;\n        c.z = a.z - b;\n    }\n    return c;\n};\nconst multiply = (a, b, c) => {\n    if (b instanceof Vector) {\n        c.x = a.x * b.x;\n        c.y = a.y * b.y;\n        c.z = a.z * b.z;\n    } else {\n        c.x = a.x * b;\n        c.y = a.y * b;\n        c.z = a.z * b;\n    }\n    return c;\n};\nconst divide = (a, b, c) => {\n    if (b instanceof Vector) {\n        c.x = a.x / b.x;\n        c.y = a.y / b.y;\n        c.z = a.z / b.z;\n    } else {\n        c.x = a.x / b;\n        c.y = a.y / b;\n        c.z = a.z / b;\n    }\n    return c;\n};\nconst cross = (a, b, c) => {\n    c.x = a.y * b.z - a.z * b.y;\n    c.y = a.z * b.x - a.x * b.z;\n    c.z = a.x * b.y - a.y * b.x;\n    return c;\n};\nconst unit = (a, b) => {\n    const length = a.length();\n    b.x = a.x / length;\n    b.y = a.y / length;\n    b.z = a.z / length;\n    return b;\n};\nconst fromAngles = (theta, phi) =>\n    new Vector(Math.cos(theta) * Math.cos(phi), Math.sin(phi), Math.sin(theta) * Math.cos(phi));\nconst randomDirection = () => fromAngles(Math.random() * Math.PI * 2, Math.asin(Math.random() * 2 - 1));\nconst min = (a, b) => new Vector(Math.min(a.x, b.x), Math.min(a.y, b.y), Math.min(a.z, b.z));\nconst max = (a, b) => new Vector(Math.max(a.x, b.x), Math.max(a.y, b.y), Math.max(a.z, b.z));\nconst lerp = (a, b, fraction) => b.subtract(a).multiply(fraction).add(a);\nconst fromArray = (a) => new Vector(a[0], a[1], a[2]);\nconst angleBetween = (a, b) => a.angleTo(b);\n","/*\n  Math Snippets\n  https://github.com/terkelg/math\n*/\n\nimport random from 'canvas-sketch-util/random';\nimport { Vector } from './Vector';\n\n// Math aliases\nconst Ï€ = Math.PI;\nconst { PI } = Math;\nconst TAU = Math.PI * 2;\nconst { abs } = Math;\nconst { sin } = Math;\nconst { cos } = Math;\nconst { tan } = Math;\nconst { pow } = Math;\nconst { round } = Math;\nconst { floor } = Math;\n\nrandom.setSeed(random.getRandomSeed());\nconsole.log(`Using seed ${random.getSeed()}`);\n\n// Ï† phi\nexport const golden = 1.6180339887498948482;\n// g angles: 222.5, 137.5\n\n// https://www.mathsisfun.com/numbers/fibonacci-sequence.html\nexport const fibonacci = [\n    0,\n    1,\n    1,\n    2,\n    3,\n    5,\n    8,\n    13,\n    21,\n    34,\n    55,\n    89,\n    144,\n    233,\n    377,\n    610,\n    987,\n    1597,\n    2584,\n    4181,\n    6765,\n    10946,\n    17711,\n    28657,\n    46368,\n    75025,\n    121393,\n    196418,\n    317811,\n];\n\nexport const snapNumber = (snap, n) => Math.floor(n / snap) * snap;\n\n// Hough transform\n// https://stackoverflow.com/questions/24372921/how-to-calculate-quantized-angle\nexport const houghQuantize = (numAngles, theta) => Math.floor((numAngles * theta) / TAU + 0.5);\n// https://stackoverflow.com/questions/47047691/how-to-quantize-directions-in-canny-edge-detector-in-python\nexport const quantize = (numAngles, theta) => (Math.round(theta * (numAngles / Math.PI)) + numAngles) % numAngles;\n\nexport const round2 = (num) => Math.round((num + Number.EPSILON) * 100) / 100;\n\nexport const getRandomSeed = () => random.getSeed();\nexport const setRandomSeed = (s) => random.setRandomSeed(s);\n\n// Box-Muller Transform\n// https://stackoverflow.com/questions/25582882/javascript-math-random-normal-distribution-gaussian-bell-curve\nexport const randomNormalBM = () => {\n    let u = 0;\n    let v = 0;\n    while (u === 0) u = random.value(); // Converting [0,1) to (0,1)\n    while (v === 0) v = random.value();\n    let num = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\n    num = num / 10.0 + 0.5; // Translate to 0 -> 1\n    if (num > 1 || num < 0) return randomNormalBM(); // resample between 0 and 1\n    return num;\n};\n\n// same source as above\n// better solution https://spin.atomicobject.com/2019/09/30/skew-normal-prng-javascript/\nexport const randomNormalBM2 = (min = 0, max = 1, skew = 1) => {\n    let u = 0;\n    let v = 0;\n    while (u === 0) u = random.value(); // Converting [0,1) to (0,1)\n    while (v === 0) v = random.value();\n    let num = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\n\n    num = num / 10.0 + 0.5; // Translate to 0 -> 1\n    if (num > 1 || num < 0) {\n        // // resample between 0 and 1 if out of range\n        num = randomNormalBM2(min, max, skew);\n    } else {\n        num = Math.pow(num, skew); // Skew\n        num *= max - min; // Stretch to fill range\n        num += min; // offset to min\n    }\n    return num;\n};\n\nexport const randomNormalNumberBetween = (min, max) => randomNormalBM() * (max - min) + min;\nexport const randomNormalWholeBetween = (min, max) => Math.round(randomNormalBM() * (max - min) + min);\n\nexport const randomNumberBetween = (min, max) => random.valueNonZero() * (max - min) + min;\nexport const randomWholeBetween = (min, max) => Math.floor(random.value() * (max - min) + min);\n\nexport const randomNumberBetweenMid = (min, max) => randomNumberBetween(min, max) - max / 2;\n\nexport const randomSign = () => (Math.round(random.value()) === 1 ? 1 : -1);\nexport const randomBoolean = () => Math.round(random.value()) === 1;\nexport const randomChance = (chance = 0.5) => random.chance(chance);\n\nexport const oneOf = (arry) => {\n    const i = randomWholeBetween(0, arry.length - 1);\n    return arry[i];\n};\n\nexport const lowest = (arry) =>\n    arry.reduce((acc, v) => {\n        if (v < acc) {\n            acc = v;\n        }\n        return acc;\n    }, 0);\n\nexport const highest = (arry) =>\n    arry.reduce((acc, v) => {\n        if (v > acc) {\n            acc = v;\n        }\n        return acc;\n    }, 0);\n\nexport const createRandomNumberArray = (len, min, max) =>\n    Array.from(new Array(len)).map(() => randomNumberBetween(min, max));\n\n// -> -1 ... 1\nexport const loopingValue = (t, m = 0.5) => Math.sin(t * m);\n\n// t is 0-1, -> -1 ... 1\nexport const pingPontValue = (t) => Math.sin(t * Math.PI);\n\n// x,y offsets for the current circle position\nexport const pointOnCircle = (x, y, r, a) => ({ x: r * Math.sin(a) + x, y: r * Math.cos(a) + y });\n\n// returns value between 0-1, 250,500,0 => .5\nexport const normalize = (min, max, val) => (val - min) / (max - min);\nexport const normalizeInverse = (min, max, val) => 1 - normalize(min, max, val);\n\n// https://twitter.com/mattdesl/status/1031305279227478016\n// https://www.trysmudford.com/blog/linear-interpolation-functions/\n// lerp(20, 80, 0.5) // 40\nexport const lerp = (x, y, a) => x * (1 - a) + y * a;\n\nexport const clamp = (min = 0, max = 1, a) => Math.min(max, Math.max(min, a));\n\n// invlerp(50, 100, 75)  // 0.5\nexport const invlerp = (x, y, a) => clamp(0, 1, (a - x) / (y - x));\n\n// p5js map fn is reverse map(a,x2,y2,x1,y1)\n// a is point in 1 and converts to point in 2\n// range(10, 100, 2000, 20000, 50) // 10000\nexport const mapRange = (x1, y1, x2, y2, a) => lerp(x2, y2, invlerp(x1, y1, a));\n\n// Accepts a value 0-1 and returns a value 0-1 in a sin wave\nexport const toSinValue = (value) => Math.abs(Math.sin(value * TAU));\n\nexport const mapToTau = (start, end, value) => mapRange(start, end, 0, TAU, value);\n\nexport const marginify = ({ margin, u, v, width, height }) => ({\n    x: lerp(margin, width - margin, u),\n    y: lerp(margin, height - margin, v),\n});\n\nexport const pointDistance = (pointA, pointB) => {\n    const dx = pointA.x - pointB.x;\n    const dy = pointA.y - pointB.y;\n    return Math.sqrt(dx * dx + dy * dy);\n};\n\n// https://stackoverflow.com/questions/13043945/how-do-i-calculate-the-position-of-a-point-in-html5-canvas-after-rotation\nexport const pointRotateCoord = (point, angle) => ({\n    x: point.x * cos(angle) - point.y * sin(angle),\n    y: point.y * cos(angle) + point.x * sin(angle),\n});\n\n// https://www.khanacademy.org/computing/computer-programming/programming-natural-simulations/programming-angular-movement/a/pointing-towards-movement\nexport const pointAngleFromVelocity = ({ velocityX, velocityY }) => Math.atan2(velocityY, velocityX);\n\nexport const aFromVector = ({ x, y }) => Math.atan2(y, x);\nexport const uvFromAngle = (a) => new Vector(Math.cos(a), Math.sin(a));\n\nexport const radiansToDegrees = (rad) => (rad * 180) / Math.PI;\nexport const degreesToRadians = (deg) => (deg * Math.PI) / 180;\n\n// Scale up point grid and center in the canvas\nexport const scalePointToCanvas = (canvasWidth, canvasHeight, width, height, zoomFactor, x, y) => {\n    const particleXOffset = canvasWidth / 2 - (width * zoomFactor) / 2;\n    const particleYOffset = canvasHeight / 2 - (height * zoomFactor) / 2;\n    return {\n        x: x * zoomFactor + particleXOffset,\n        y: y * zoomFactor + particleYOffset,\n    };\n};\n\nexport const create2dNoise = (u, v, amplitude = 1, frequency = 0.5) =>\n    random.noise2D(u * frequency, v * frequency) * amplitude;\n\nexport const create2dNoiseAbs = (u, v, amplitude = 1, frequency = 0.5) =>\n    Math.abs(random.noise2D(u * frequency, v * frequency)) * amplitude;\n\nexport const create3dNoise = (u, v, t, amplitude = 1, frequency = 0.5) =>\n    random.noise3D(u * frequency, v * frequency, t * frequency) * amplitude;\n\nexport const create3dNoiseAbs = (u, v, t, amplitude = 1, frequency = 0.5) =>\n    Math.abs(random.noise3D(u * frequency, v * frequency, t * frequency)) * amplitude;\n\nexport const randomPointAround = (range = 20) => {\n    const radius = randomWholeBetween(0, range);\n    const angle = randomNumberBetween(0, TAU);\n    return { x: radius * Math.cos(angle), y: radius * Math.sin(angle) };\n};\n\n// https://observablehq.com/@pamacha/chaikins-algorithm\nexport const chaikin = (arr, num) => {\n    if (num === 0) return arr;\n    const l = arr.length;\n    const smooth = arr\n        .map((c, i) => [\n            [0.75 * c[0] + 0.25 * arr[(i + 1) % l][0], 0.75 * c[1] + 0.25 * arr[(i + 1) % l][1]],\n            [0.25 * c[0] + 0.75 * arr[(i + 1) % l][0], 0.25 * c[1] + 0.75 * arr[(i + 1) % l][1]],\n        ])\n        .flat();\n    return num === 1 ? smooth : chaikin(smooth, num - 1);\n};\n","import tinycolor from 'tinycolor2';\nimport { uvFromAngle } from './math';\n\nexport let isHiDPI = false;\nexport let contextScale = 1;\n\nexport const resizeCanvas = (canvas, context, width, height, scale) => {\n    contextScale = scale || window.devicePixelRatio;\n\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n\n    canvas.width = Math.floor(width * contextScale);\n    canvas.height = Math.floor(height * contextScale);\n\n    if (contextScale === 2) {\n        isHiDPI = true;\n        context.scale(1, 1);\n        // context.scale(2, 2);\n    } else {\n        context.scale(contextScale, contextScale);\n    }\n};\n\nexport const clearCanvas = (canvas, context) => (_) => context.clearRect(0, 0, canvas.width, canvas.height);\n\nexport const fillCanvas = (canvas, context) => (opacity = 1, color = '0,0,0') => {\n    context.fillStyle = `rgba(${color},${opacity})`;\n    context.fillRect(0, 0, canvas.width, canvas.height);\n};\n\nexport const background = (canvas, context) => (color = 'black') => {\n    context.fillStyle = tinycolor(color).toRgbString();\n    context.fillRect(0, 0, canvas.width, canvas.height);\n};\n\nexport const resetStyles = (context) => {\n    context.strokeStyle = '#000';\n    context.fillStyle = '#fff';\n    context.lineWidth = 1;\n    context.setLineDash([]);\n    context.lineCap = 'butt';\n};\n\n// https://www.rgraph.net/canvas/howto-antialias.html\nexport const sharpLines = (context) => context.translate(0.5, 0.5);\n\n// https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\n// multiply, screen, overlay, soft-light, hard-light, color-dodge, color-burn, darken, lighten, difference, exclusion, hue, saturation, luminosity, color, add, subtract, average, negative\nexport const blendMode = (context) => (mode = 'source-over') => (context.globalCompositeOperation = mode);\n\n// https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter\nexport const filter = (context) => (f = '') => (context.filter = f);\n\n//----------------------------------------------------------------------------------------------------------------------\n// PRIMITIVES\n//----------------------------------------------------------------------------------------------------------------------\n\nexport const pixel = (context) => (x, y, color = 'black', mode = 'square', size) => {\n    size = size || contextScale;\n    context.fillStyle = tinycolor(color).toRgbString();\n    if (mode === 'circle') {\n        context.beginPath();\n        context.arc(x, y, size, 0, Math.PI * 2, false);\n        context.fill();\n    } else {\n        context.fillRect(x, y, size, size);\n    }\n};\n\nexport const setStokeColor = (context) => (color) => (context.strokeStyle = tinycolor(color).toRgbString());\n\n// linecap = butt, round, square\nexport const drawLine = (context) => (x1, y1, x2, y2, strokeWidth = 1, linecap = 'butt') => {\n    // color = 'black',\n    // context.strokeStyle = tinycolor(color).toRgbString();\n    context.lineWidth = strokeWidth;\n    context.lineCap = linecap;\n    context.beginPath();\n    context.moveTo(x1, y1);\n    context.lineTo(x2, y2);\n    context.stroke();\n};\n\nexport const drawLineAngle = (context) => (x1, y1, angle, length, strokeWidth, linecap) => {\n    const vect = uvFromAngle(angle).setMag(length);\n    const x2 = x1 + vect.x;\n    const y2 = y1 + vect.y;\n    drawLine(context)(x1, y1, x2, y2, strokeWidth, linecap);\n};\n\nexport const drawCircle = (context) => (strokeWidth, x, y, radius, color) => {\n    if (color) {\n        context.strokeStyle = tinycolor(color).toRgbString();\n    }\n    context.lineWidth = strokeWidth;\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    // context.fillStyle = 'rgba(255,255,255,.1)';\n    // context.fill();\n    context.stroke();\n};\n\nexport const drawCircleFilled = (context) => (x, y, radius, color) => {\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    context.fillStyle = color;\n    context.fill();\n};\n\nexport const drawRect = (context) => (x, y, w, h, strokeWidth = 1, color) => {\n    if (color) {\n        context.strokeStyle = tinycolor(color).toRgbString();\n    }\n    context.lineWidth = strokeWidth;\n    context.rect(x, y, w, h);\n    context.stroke();\n};\n\nexport const drawRectFilled = (context) => (x, y, w, h, color = 'white') => {\n    context.fillStyle = tinycolor(color).toRgbString();\n    context.fillRect(x, y, w, h);\n};\n\nexport const drawSquareFilled = (context) => (x, y, size, color) => {\n    drawRectFilled(context)(x, y, size, size, color);\n};\n\nexport const drawTriangleFilled = (context) => (x, y, size, color) => {\n    const half = size / 2;\n    context.beginPath();\n    context.moveTo(x - half, y - half);\n    context.lineTo(x + half, y);\n    context.lineTo(x - half, y + half);\n    context.fillStyle = color.toRgbString();\n    context.fill();\n};\n\n// https://www.scriptol.com/html5/canvas/rounded-rectangle.php\n// TODO center on x,y\nexport const drawQuadRectFilled = (context) => (x, y, w, h, color) => {\n    const mx = x + w / 2;\n    const my = y + h / 2;\n    context.beginPath();\n    // context.strokeStyle = 'green';\n    // context.lineWidth = '4';\n    context.fillStyle = tinycolor(color).toRgbString();\n    context.moveTo(x, my);\n    context.quadraticCurveTo(x, y, mx, y);\n    context.quadraticCurveTo(x + w, y, x + w, my);\n    context.quadraticCurveTo(x + w, y + h, mx, y + h);\n    context.quadraticCurveTo(x, y + h, x, my);\n    // context.stroke();\n    context.fill();\n};\n\n// https://www.scriptol.com/html5/canvas/rounded-rectangle.php\n// TODO center on x,y\nexport const drawRoundRectFilled = (context) => (x, y, w, h, corner, color) => {\n    if (w < corner || h < corner) {\n        corner = Math.min(w, h);\n    }\n\n    const r = x + w;\n    const b = y + h;\n    context.beginPath();\n    // context.strokeStyle = 'green';\n    // context.lineWidth = '4';\n    context.fillStyle = tinycolor(color).toRgbString();\n    context.moveTo(x + corner, y);\n    context.lineTo(r - corner, y);\n    context.quadraticCurveTo(r, y, r, y + corner);\n    context.lineTo(r, y + h - corner);\n    context.quadraticCurveTo(r, b, r - corner, b);\n    context.lineTo(x + corner, b);\n    context.quadraticCurveTo(x, b, x, b - corner);\n    context.lineTo(x, y + corner);\n    context.quadraticCurveTo(x, y, x + corner, y);\n    // context.stroke();\n    context.fill();\n};\n\nexport const drawTestPoint = (context) => ({ x, y, radius, color }) => {\n    context.strokeStyle = color.toRgbString();\n    context.lineWidth = 1;\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    context.fillStyle = 'rgba(255,255,255,.1)';\n    context.fill();\n    context.stroke();\n    drawLine(context)(x, y, x + radius, y, 1);\n};\n","export const defaultValue = (obj, key, value) => (obj.hasOwnProperty(key) ? obj[key] : value);\n\nconst limitArrayLen = (arr) => {\n    const arrLength = arr.length;\n    if (arrLength > MAX_COORD_HISTORY) {\n        arr.splice(0, arrLength - MAX_COORD_HISTORY);\n    }\n    return arr;\n};\n","/*\nConvenience canvas sketch runner. Based on p5js\n\n\nconst variation = () => {\n    const config = {};\n\n    const setup = ({canvas, context}) => {\n        // create initial state\n    };\n\n    // will run every frame\n    const draw = ({canvas, context, mouse}) => {\n        // draw on every frame\n        return 1; // -1 to exit animation loop\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n\nTODO\n- [ ] merge screen shot code\n- [ ] Canvas Recorder  https://xosh.org/canvas-recorder/\n- [ ] coords of a mouse down to variation?\n- [ ] better touch input\n- [ ] svg https://github.com/canvg/canvg\n- [ ] great ideas here http://paperjs.org/features/\n*/\n\nimport { isHiDPI, contextScale, resizeCanvas } from './canvas';\nimport { getRandomSeed, golden } from './math';\nimport { defaultValue } from './utils';\n\nexport const orientation = {\n    portrait: 0,\n    landscape: 1,\n};\n\nexport const ratio = {\n    letter: 0.773, // 8.5x11\n    poster: 0.667, // 24x36\n    golden: golden - 1,\n    square: -1,\n    auto: 1,\n};\n\nexport const scale = {\n    standard: 1,\n    hidpi: 2,\n};\n\nexport const sketch = () => {\n    const mouse = {\n        x: undefined,\n        y: undefined,\n        isDown: false,\n        radius: 100,\n    };\n\n    let hasStarted = false;\n\n    let fps = 0;\n\n    let currentVariationFn;\n    let currentVariationRes;\n    let animationId;\n\n    const canvasSizeFraction = 0.9;\n    const canvas = document.getElementById('canvas');\n    const context = canvas.getContext('2d');\n\n    const getCanvas = (_) => canvas;\n    const getContext = (_) => context;\n    const getMouse = (_) => mouse;\n\n    const mouseDown = (evt) => {\n        mouse.isDown = true;\n    };\n\n    const mouseMove = (evt) => {\n        const mult = isHiDPI ? 2 : 1;\n        const canvasFrame = canvas.getBoundingClientRect();\n        mouse.x = (evt.x - canvasFrame.x) * mult;\n        mouse.y = (evt.y - canvasFrame.y) * mult;\n    };\n\n    const mouseUp = (evt) => {\n        mouse.isDown = false;\n    };\n\n    const mouseOut = (evt) => {\n        mouse.x = undefined;\n        mouse.y = undefined;\n        mouse.isDown = false;\n    };\n\n    window.addEventListener('mousedown', mouseDown);\n    window.addEventListener('touchstart', mouseDown);\n\n    window.addEventListener('mousemove', mouseMove);\n    window.addEventListener('touchmove', mouseMove);\n\n    window.addEventListener('mouseup', mouseUp);\n    window.addEventListener('touchend', mouseUp);\n\n    window.addEventListener('mouseout', mouseOut);\n    window.addEventListener('touchcancel', mouseOut);\n\n    const applyCanvasSize = (config) => {\n        const width = defaultValue(config, 'width', window.innerWidth * canvasSizeFraction);\n        const height = defaultValue(config, 'height', window.innerHeight * canvasSizeFraction);\n        let newWidth = width;\n        let newHeight = height;\n\n        const cfgOrientation = defaultValue(config, 'orientation', orientation.landscape);\n        const cfgRatio = defaultValue(config, 'ratio', ratio.auto);\n        const cfgScale = defaultValue(config, 'scale', scale.standard);\n\n        const aSide = Math.min(width, height);\n        const bSide = Math.round(cfgRatio * aSide);\n\n        if (cfgRatio === ratio.square) {\n            newWidth = aSide;\n            newHeight = aSide;\n        } else if (cfgOrientation === orientation.portrait) {\n            newWidth = bSide;\n            newHeight = aSide;\n        } else if (cfgOrientation === orientation.landscape && cfgRatio !== ratio.auto) {\n            console.log('land');\n            newWidth = aSide;\n            newHeight = bSide;\n        }\n\n        resizeCanvas(canvas, context, newWidth, newHeight, cfgScale);\n    };\n\n    const run = (variation) => {\n        currentVariationFn = variation;\n\n        currentVariationRes = currentVariationFn();\n\n        let backgroundColor;\n\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        if (currentVariationRes.hasOwnProperty('config')) {\n            const { config } = currentVariationRes;\n            applyCanvasSize(config);\n            if (config.background) {\n                backgroundColor = config.background;\n            }\n            if (config.fps) {\n                fps = config.fps;\n            }\n        } else {\n            resizeCanvas(\n                canvas,\n                context,\n                window.innerWidth * canvasSizeFraction,\n                window.innerHeight * canvasSizeFraction\n            );\n        }\n\n        let rendering = true;\n        const targetFpsInterval = 1000 / fps;\n        let lastAnimationFrameTime;\n\n        // context.translate(0.5, 0.5);\n\n        const startSketch = () => {\n            window.removeEventListener('load', startSketch);\n            hasStarted = true;\n\n            currentVariationRes.setup({ canvas, context, s: this });\n\n            const render = () => {\n                const result = currentVariationRes.draw({ canvas, context, mouse });\n                if (result !== -1) {\n                    animationId = requestAnimationFrame(render);\n                }\n            };\n\n            // https://stackoverflow.com/questions/19764018/controlling-fps-with-requestanimationframe\n            const renderAtFps = () => {\n                if (rendering) {\n                    animationId = window.requestAnimationFrame(renderAtFps);\n                }\n\n                const now = Date.now();\n                const elapsed = now - lastAnimationFrameTime;\n\n                if (elapsed > targetFpsInterval) {\n                    lastAnimationFrameTime = now - (elapsed % targetFpsInterval);\n                    const result = currentVariationRes.draw({ canvas, context, mouse });\n                    if (result === -1) {\n                        rendering = false;\n                    }\n                }\n            };\n\n            if (!fps) {\n                animationId = window.requestAnimationFrame(render);\n            } else {\n                lastAnimationFrameTime = Date.now();\n                animationId = window.requestAnimationFrame(renderAtFps);\n            }\n        };\n\n        if (!hasStarted) {\n            window.addEventListener('load', startSketch);\n        } else {\n            startSketch();\n        }\n    };\n\n    const stop = () => {\n        window.cancelAnimationFrame(animationId);\n    };\n\n    const getVariationName = () => {\n        const seed = getRandomSeed();\n        let name = 'untitled';\n        if (\n            currentVariationRes &&\n            currentVariationRes.hasOwnProperty('config') &&\n            currentVariationRes.config.hasOwnProperty('name')\n        ) {\n            name = currentVariationRes.config.name;\n        }\n        return `sketch-${name}-${seed}`;\n    };\n\n    const windowResize = (evt) => {\n        // resizeCanvas(canvas, context, window.innerWidth * canvasSizeFraction, window.innerHeight * canvasSizeFraction);\n        if (animationId) {\n            stop();\n            run(currentVariationFn);\n        }\n    };\n    window.addEventListener('resize', windowResize);\n\n    return {\n        variationName: getVariationName,\n        canvas: getCanvas,\n        context: getContext,\n        mouse: getMouse,\n        run,\n        stop,\n        s: sketch,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport { pointDistance, randomNumberBetween, lerp, pointAngleFromVelocity, clamp } from './math';\nimport { Vector } from './Vector';\n\nconst MAX_COORD_HISTORY = 30;\n\nexport class Particle {\n    #x;\n\n    #y;\n\n    #color;\n\n    constructor(values) {\n        this.initValues(values);\n    }\n\n    initValues({\n        index,\n        x,\n        y,\n        velocityX,\n        velocityY,\n        accelerationX,\n        accelerationY,\n        radius,\n        mass,\n        color,\n        alpha,\n        rotation,\n        lifetime,\n        drawFn,\n        updateFn,\n        colorFn,\n        ...rest\n    }) {\n        this.props = rest;\n        this.index = index || 0;\n        this.#x = x || 0;\n        this.#y = y || 0;\n        this.xHistory = [x];\n        this.yHistory = [y];\n        this.oX = x || this.oX;\n        this.oY = y || this.oY;\n        this.velocityX = velocityX || 0;\n        this.velocityY = velocityY || 0;\n        this.accelerationX = accelerationX || 0;\n        this.accelerationY = accelerationY || 0;\n        this.mass = mass || 1;\n        this.radius = radius || 1;\n        this.#color = color ? tinycolor(color) : tinycolor({ r: 255, g: 255, b: 255 });\n        this.rotation = rotation || 0;\n        this.lifetime = lifetime || 1;\n        // this.drawFn = drawFn;\n        // this.updateFn = updateFn;\n        // must always return a string\n        this.colorFn = colorFn;\n    }\n\n    get color() {\n        if (this.colorFn) {\n            return tinycolor(this.colorFn(this));\n        }\n        return this.#color;\n    }\n\n    set color(value) {\n        this.#color = tinycolor(value);\n    }\n\n    get colorStr() {\n        if (this.colorFn) {\n            const res = this.colorFn(this);\n            if (typeof res !== 'string') {\n                console.warn('Particle color fn must return a string!');\n                return '#ff0000';\n            }\n            return res;\n        }\n        return this.#color.toRgbString();\n    }\n\n    get x() {\n        return this.#x;\n    }\n\n    set x(value) {\n        this.#x = value;\n        this.xHistory.unshift(value);\n        if (this.xHistory.length > MAX_COORD_HISTORY) {\n            this.xHistory = this.xHistory.slice(0, MAX_COORD_HISTORY);\n        }\n    }\n\n    get y() {\n        return this.#y;\n    }\n\n    set y(value) {\n        this.#y = value;\n        this.yHistory.unshift(value);\n        if (this.yHistory.length > MAX_COORD_HISTORY) {\n            this.yHistory = this.yHistory.slice(0, MAX_COORD_HISTORY);\n        }\n    }\n\n    get velocity() {\n        return new Vector(this.velocityX, this.velocityY, 0);\n    }\n\n    set velocity({ x, y }) {\n        this.velocityX = x;\n        this.velocityY = y;\n    }\n\n    get acceleration() {\n        return new Vector(this.accelerationX, this.accelerationY, 0);\n    }\n\n    set acceleration({ x, y }) {\n        this.accelerationX = x;\n        this.accelerationY = y;\n    }\n\n    // Rotation angle to point in direction of velocity\n    get heading() {\n        return pointAngleFromVelocity(this);\n    }\n\n    reverseVelocityX() {\n        this.velocityX *= -1;\n    }\n\n    reverseVelocityY() {\n        this.velocityY *= -1;\n    }\n\n    updatePosWithVelocity() {\n        this.x += this.velocity.x;\n        this.y += this.velocity.y;\n    }\n\n    applyForce(fVect) {\n        const fV = fVect.div(this.mass);\n        const aV = this.acceleration.add(fV);\n        const pV = this.velocity.add(aV);\n        this.acceleration = aV;\n        this.velocity = pV;\n    }\n\n    // https://www.youtube.com/watch?v=WBdhAuWS6X8\n    friction(mu = 0.1) {\n        const normal = this.mass;\n        const vfriction = this.velocity\n            .normalize()\n            .mult(-1)\n            .setMag(mu * normal);\n        this.applyForce(vfriction);\n    }\n\n    // https://www.youtube.com/watch?v=DxFDgOYEoy8\n    drag(coefficent = 0.1) {\n        const area = 1; // this.radius;\n        const velUnit = this.velocity.normalize().mult(-1);\n        const speed = this.velocity.magSq() * area * coefficent;\n        const vdrag = velUnit.setMag(speed);\n        this.applyForce(vdrag);\n    }\n\n    // https://www.youtube.com/watch?v=EpgB3cNhKPM\n    // mode 1 is attract, -1 is repel\n    // const attractor = { x: canvas.width / 2, y: canvas.height / 2, mass: 50, g: 1 };\n    attract({ x, y, mass, g }, mode = 1, affectDist = 1000) {\n        if (pointDistance({ x, y }, { x: this.x, y: this.y }) < affectDist) {\n            g = g || 1;\n            const dir = new Vector(x, y).sub(new Vector(this.x, this.y));\n            const distanceSq = clamp(50, 5000, dir.magSq());\n            const strength = (mode * (g * (mass * this.mass))) / distanceSq;\n            const force = dir.setMag(strength);\n            this.applyForce(force);\n        }\n    }\n\n    // draw() {\n    //     this.drawFn(this);\n    // }\n    //\n    // update() {\n    //     this.updateFn(this);\n    //     this.draw(this);\n    // }\n}\n\n//----------------------------------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------------------------------\n\nexport const createRandomParticleValues = ({ width, height }) => {\n    const vel = 2;\n    const radius = randomNumberBetween(5, 10);\n    return {\n        radius,\n        x: randomNumberBetween(0, width),\n        y: randomNumberBetween(0, height),\n        mass: randomNumberBetween(1, 10),\n        velocityX: randomNumberBetween(-vel, vel),\n        velocityY: randomNumberBetween(-vel, vel),\n        accelerationX: 0,\n        accelerationY: 0,\n        rotation: randomNumberBetween(-180, 180),\n        color: { r: randomNumberBetween(100, 255), g: randomNumberBetween(100, 255), b: randomNumberBetween(100, 255) },\n    };\n};\n\n//----------------------------------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------------------------------\n\nexport const edgeBounce = ({ width, height }, particle) => {\n    if (particle.x + particle.radius > width) {\n        particle.reverseVelocityX();\n        particle.x = width - particle.radius;\n    }\n    if (particle.x - particle.radius < 0) {\n        particle.reverseVelocityX();\n        particle.x = particle.radius;\n    }\n    if (particle.y + particle.radius > height) {\n        particle.reverseVelocityY();\n        particle.y = height - particle.radius;\n    }\n    if (particle.y - particle.radius < 0) {\n        particle.reverseVelocityY();\n        particle.y = particle.radius;\n    }\n};\n\nexport const edgeWrap = ({ width, height }, particle) => {\n    if (particle.x + particle.radius > width) {\n        particle.x = 0 + particle.radius;\n    } else if (particle.x - particle.radius < 0) {\n        particle.x = width - particle.radius;\n    }\n    if (particle.y + particle.radius > height) {\n        particle.y = 0 + particle.radius;\n    } else if (particle.y - particle.radius < 0) {\n        particle.y = height - particle.radius;\n    }\n};\n","import tinycolor from 'tinycolor2';\nimport { normalizeInverse, pointDistance } from './math';\nimport { drawLine, resetStyles } from './canvas';\n\nexport const drawParticlePoint = (context) => ({ x, y, radius, color }) => {\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    context.fillStyle = color.toRgbString();\n    context.fill();\n};\nexport const drawRotatedParticle = (ctx, drawFn, particle, ...args) => {\n    const pSaveX = particle.x;\n    const pSaveY = particle.y;\n    particle.x = 0;\n    particle.y = 0;\n    ctx.save();\n    ctx.translate(pSaveX, pSaveY);\n    ctx.rotate(particle.heading);\n    drawFn(ctx)(particle, args);\n    ctx.restore();\n    particle.x = pSaveX;\n    particle.y = pSaveY;\n};\nexport const connectParticles = (context) => (pArray, proximity, useAlpha = true) => {\n    const len = pArray.length;\n    for (let a = 0; a < len; a++) {\n        // all consecutive particles\n        for (let b = a; b < len; b++) {\n            const pA = pArray[a];\n            const pB = pArray[b];\n            const distance = pointDistance(pA, pB);\n            if (distance < proximity) {\n                const pColor = pA.color;\n                if (useAlpha) {\n                    pColor.setAlpha(normalizeInverse(0, proximity, distance));\n                }\n                context.strokeStyle = pColor.toHslString();\n                drawLine(context)(pA.x, pA.y, pB.x, pB.y, 0.5);\n            }\n        }\n    }\n    resetStyles(context);\n};\nexport const drawPointTrail = (context) => (particle) => {\n    const trailLen = particle.xHistory.length;\n    context.lineWidth = particle.radius;\n    const pColor = particle.color;\n    const aFade = (100 / trailLen) * 0.01;\n    let alpha = 1;\n    const sFade = (particle.radius * 2) / trailLen;\n    let stroke = particle.radius * 2;\n    for (let i = 0; i < trailLen; i++) {\n        const startX = i === 0 ? particle.x : particle.xHistory[i - 1];\n        const startY = i === 0 ? particle.y : particle.yHistory[i - 1];\n        drawLine(context)(startX, startY, particle.xHistory[i], particle.yHistory[i], stroke);\n        pColor.setAlpha(alpha);\n        context.strokeStyle = pColor.toRgbString();\n        alpha -= aFade;\n        stroke -= sFade;\n    }\n};\nexport const drawParticleVectors = (context) => (particle) => {\n    const vmult = 5;\n    const amult = 100;\n    const vel = 'green';\n    const acc = 'yellow';\n    const { velocity } = particle;\n    const { acceleration } = particle;\n\n    context.strokeStyle = tinycolor(vel).toRgbString();\n    drawLine(context)(particle.x, particle.y, particle.x + velocity.x * vmult, particle.y + velocity.y * vmult, 1);\n\n    context.strokeStyle = tinycolor(acc).toRgbString();\n    drawLine(context)(\n        particle.x,\n        particle.y,\n        particle.x + acceleration.x * amult,\n        particle.y + acceleration.y * amult,\n        1\n    );\n};\nexport const drawMouse = (context) => ({ x, y, radius }) => {\n    if (x === undefined || y === undefined) return;\n    context.strokeStyle = 'rgba(255,255,255,.25)';\n    context.lineWidth = 1;\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    context.fillStyle = 'rgba(255,255,255,.1)';\n    context.fill();\n    context.stroke();\n};\nexport const drawAttractor = (context) => ({ x, y, mass, g }, mode, radius) => {\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    context.fillStyle = 'rgba(0,0,0,.1)';\n    context.fill();\n\n    context.beginPath();\n    context.arc(x, y, Math.sqrt(mass) * g, 0, Math.PI * 2, false);\n    context.fillStyle = mode === 1 ? 'rgba(0,255,0,.25)' : 'rgba(255,0,0,.25)';\n    context.fill();\n};\n","import { edgeBounce, Particle, createRandomParticleValues } from '../lib/Particle';\nimport { clearCanvas, fillCanvas } from '../lib/canvas';\nimport { normalizeInverse, pointDistance } from '../lib/math';\nimport { connectParticles, drawMouse, drawParticlePoint, drawPointTrail } from '../lib/canvas-particles';\n\nconst gravityPoint = (mult = 0.2, f = 1) => (x, y, radius, particle) => {\n    const distance = pointDistance({ x, y }, particle);\n    if (distance < radius) {\n        const dx = x - particle.x;\n        const dy = y - particle.y;\n        const forceDirectionX = dx / distance;\n        const forceDirectionY = dy / distance;\n        const force = normalizeInverse(0, radius, distance) * f * mult;\n        const tempX = forceDirectionX * force * particle.radius * 2;\n        const tempY = forceDirectionY * force * particle.radius * 2;\n        particle.x += tempX;\n        particle.y += tempY;\n    }\n};\n\n// for moving points, push away/around from point\nconst avoidPoint = (point, particle, f = 1) => {\n    gravityPoint(1, (f *= -1))(point.x, point.y, point.radius, particle);\n};\n\n// for moving points, pull towards point\nconst attractPoint = (point, particle, f = 1) => {\n    gravityPoint(1, f)(point.x, point.y, point.radius, particle);\n};\n\n// Based on https://www.youtube.com/watch?v=d620nV6bp0A\nexport const variation1 = () => {\n    const numParticles = 100;\n    const particlesArray = [];\n\n    let canvasCenterX;\n    let canvasCenterY;\n    let centerRadius;\n\n    const setup = ({ canvas, context }) => {\n        canvasCenterX = canvas.width / 2;\n        canvasCenterY = canvas.height / 2;\n        centerRadius = canvas.height / 4;\n\n        for (let i = 0; i < numParticles; i++) {\n            const props = createRandomParticleValues(canvas);\n            props.radius = 5;\n            particlesArray.push(new Particle(props));\n        }\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        fillCanvas(canvas, context)();\n\n        for (let i = 0; i < numParticles; i++) {\n            particlesArray[i].updatePosWithVelocity();\n            edgeBounce(canvas, particlesArray[i]);\n            avoidPoint({ radius: centerRadius, x: canvasCenterX, y: canvasCenterY }, particlesArray[i], 4);\n            attractPoint(mouse, particlesArray[i], mouse.isDown ? -1 : 1);\n            drawParticlePoint(context)(particlesArray[i]);\n            drawPointTrail(context)(particlesArray[i]);\n        }\n        connectParticles(context)(particlesArray, 200);\n        drawMouse(context)(mouse);\n    };\n\n    return {\n        setup,\n        draw,\n    };\n};\n","import { Particle, createRandomParticleValues } from '../lib/Particle';\nimport { clearCanvas } from '../lib/canvas';\nimport { normalizeInverse, pointDistance, randomNumberBetween } from '../lib/math';\nimport { connectParticles, drawMouse, drawParticlePoint } from '../lib/canvas-particles';\n\nconst gravityPoint = (mult = 0.2, f = 1) => (x, y, radius, particle) => {\n    const distance = pointDistance({ x, y }, particle);\n    if (distance < radius) {\n        const dx = x - particle.x;\n        const dy = y - particle.y;\n        const forceDirectionX = dx / distance;\n        const forceDirectionY = dy / distance;\n        const force = normalizeInverse(0, radius, distance) * f * mult;\n        const tempX = forceDirectionX * force * particle.radius * 2;\n        const tempY = forceDirectionY * force * particle.radius * 2;\n        particle.x += tempX;\n        particle.y += tempY;\n    }\n};\n\n// for moving points, push away/around from point\nconst avoidPoint = (point, particle, f = 1) => {\n    gravityPoint(1, (f *= -1))(point.x, point.y, point.radius, particle);\n};\n\n// Based on https://www.youtube.com/watch?v=j_BgnpMPxzM\nexport const variation2 = () => {\n    const config = {\n        friction: 0.8,\n        gravity: 1,\n        decay: 0.05,\n        tweenDamp: 0.1,\n        margin: 50,\n        intensity: 0,\n        numParticles: 200,\n    };\n\n    const particlesArray = [];\n\n    const setup = ({ canvas, context }) => {\n        for (let i = 0; i < config.numParticles; i++) {\n            particlesArray.push(new Particle(createRandomParticleValues(canvas)));\n        }\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        clearCanvas(canvas, context)();\n\n        for (let i = 0; i < config.numParticles; i++) {\n            particlesArray[i].radius -= config.decay;\n            if (particlesArray[i].radius <= 0) {\n                const props = createRandomParticleValues(canvas);\n                props.x = mouse.x + randomNumberBetween(-10, 10);\n                props.y = mouse.y + randomNumberBetween(-10, 10);\n                particlesArray[i].initValues(props);\n            }\n            particlesArray[i].y += particlesArray[i].mass * (mouse.isDown ? 1 : 0.2);\n            particlesArray[i].mass += 0.2 * config.gravity;\n            if (\n                particlesArray[i].y + particlesArray[i].radius > canvas.height ||\n                particlesArray[i].y - particlesArray[i].radius < 0\n            ) {\n                particlesArray[i].mass *= -1;\n            }\n\n            avoidPoint(mouse, particlesArray[i]);\n            // attractPoint(psMouseCoords(), particlesArray[i]);\n            drawParticlePoint(context)(particlesArray[i]);\n            // drawPointTrail(context)(particlesArray[i]);\n        }\n        connectParticles(context)(particlesArray, 100);\n        drawMouse(context)(mouse);\n\n        return 1;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import domokunPng from '../../media/images/domokun.png';\nimport { clearCanvas, drawSquareFilled, background } from '../lib/canvas';\nimport { normalizeInverse, pointDistance, randomNumberBetween, scalePointToCanvas } from '../lib/math';\nimport { Particle } from '../lib/Particle';\nimport { drawMouse } from '../lib/canvas-particles';\n\nconst pointPush = (point, particle, f = 1) => {\n    const dx = point.x - particle.x;\n    const dy = point.y - particle.y;\n    const distance = pointDistance(point, particle);\n    const forceDirectionX = dx / distance;\n    const forceDirectionY = dy / distance;\n    const force = normalizeInverse(0, point.radius, distance) * f;\n    particle.velocityX = forceDirectionX * force * particle.mass * 0.8;\n    particle.velocityY = forceDirectionY * force * particle.mass * 0.8;\n\n    if (distance < point.radius) {\n        particle.x -= particle.velocityX;\n        particle.y -= particle.velocityY;\n    } else {\n        // TODO if < 1 then snap to 0\n        if (particle.x !== particle.oX) {\n            particle.x -= (particle.x - particle.oX) * 0.1;\n        }\n        if (particle.y !== particle.oY) {\n            particle.y -= (particle.y - particle.oY) * 0.1;\n        }\n    }\n};\n\nconst getImageDataFromImage = (context) => (image) => {\n    context.drawImage(image, 0, 0);\n    return context.getImageData(0, 0, image.width, image.width);\n};\n\nconst getImageDataColor = (imageData, x, y) => ({\n    r: imageData.data[y * 4 * imageData.width + x * 4],\n    g: imageData.data[y * 4 * imageData.width + x * 4 + 1],\n    b: imageData.data[y * 4 * imageData.width + x * 4 + 2],\n    a: imageData.data[y * 4 * imageData.width + x * 4 + 3],\n});\n\n// Based on https://www.youtube.com/watch?v=afdHgwn1XCY\nexport const domokun = (_) => {\n    const config = {\n        width: 600,\n        height: 600,\n    };\n\n    let numParticles;\n    const imageSize = 100; // square\n    const png = new Image();\n    png.src = domokunPng;\n    const particlesArray = [];\n\n    const setup = ({ canvas, context }) => {\n        const imageData = getImageDataFromImage(context)(png);\n        clearCanvas(canvas, context)();\n\n        const imageZoomFactor = canvas.width / imageSize;\n        const cropColor = 255 / 2;\n\n        for (let y = 0, { height } = imageData; y < height; y++) {\n            for (let x = 0, { width } = imageData; x < width; x++) {\n                const pxColor = getImageDataColor(imageData, x, y);\n                if (pxColor.a > cropColor) {\n                    const points = scalePointToCanvas(\n                        canvas.width,\n                        canvas.height,\n                        imageData.width,\n                        imageData.height,\n                        imageZoomFactor,\n                        x,\n                        y\n                    );\n                    const pX = points.x;\n                    const pY = points.y;\n                    const mass = randomNumberBetween(2, 12);\n                    const color = pxColor;\n                    const radius = imageZoomFactor;\n                    particlesArray.push(new Particle({ x: pX, y: pY, mass, color, radius }));\n                }\n            }\n        }\n\n        numParticles = particlesArray.length;\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        background(canvas, context)('yellow');\n\n        for (let i = 0; i < numParticles; i++) {\n            pointPush(mouse, particlesArray[i], mouse.isDown ? -1 : 1);\n            drawSquareFilled(context)(\n                particlesArray[i].x,\n                particlesArray[i].y,\n                particlesArray[i].radius,\n                particlesArray[i].color\n            );\n        }\n        // drawMouse(context)(mouse);\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import { createRandomParticleValues, Particle } from '../lib/Particle';\nimport { fillCanvas } from '../lib/canvas';\nimport { normalizeInverse, pointDistance } from '../lib/math';\nimport { connectParticles, drawParticlePoint } from '../lib/canvas-particles';\n\nconst pointPush = (point, particle, f = 1) => {\n    const dx = point.x - particle.x;\n    const dy = point.y - particle.y;\n    const distance = pointDistance(point, particle);\n    const forceDirectionX = dx / distance;\n    const forceDirectionY = dy / distance;\n    const force = normalizeInverse(0, point.radius, distance) * f;\n    particle.velocityX = forceDirectionX * force * particle.mass * 0.8;\n    particle.velocityY = forceDirectionY * force * particle.mass * 0.8;\n\n    if (distance < point.radius) {\n        particle.x -= particle.velocityX;\n        particle.y -= particle.velocityY;\n    } else {\n        // TODO if < 1 then snap to 0\n        if (particle.x !== particle.oX) {\n            particle.x -= (particle.x - particle.oX) * 0.1;\n        }\n        if (particle.y !== particle.oY) {\n            particle.y -= (particle.y - particle.oY) * 0.1;\n        }\n    }\n};\n\nexport const variation4 = () => {\n    const config = {\n        numParticles: 0,\n    };\n\n    const particlesArray = [];\n    const circles = [];\n\n    const setup = ({ canvas, context }) => {\n        const centerX = canvas.width / 2;\n        const centerY = canvas.height / 2;\n        const diameter = canvas.height / 4;\n        const steps = 10;\n\n        for (let theta = 0; theta < 360; theta += steps) {\n            const rad = theta * (Math.PI / 180);\n            const x = Math.cos(rad) * diameter + centerX;\n            const y = Math.sin(rad) * diameter + centerY;\n            circles.push([x, y]);\n            const props = createRandomParticleValues(canvas);\n            props.x = x;\n            props.y = y;\n            props.radius = 1;\n            props.color = { r: 0, g: 0, b: 0 };\n            props.index = circles.length - 1;\n            particlesArray.push(new Particle(props));\n        }\n        config.numParticles = particlesArray.length;\n        fillCanvas(canvas, context)(1, '255,255,255');\n    };\n\n    // will run every frame\n    const draw = ({ canvas, context, mouse }) => {\n        fillCanvas(canvas, context)(0.005, '255,255,255');\n        for (let i = 0; i < config.numParticles; i++) {\n            pointPush(mouse, particlesArray[i], mouse.isDown ? -1 : 5);\n            drawParticlePoint(context)(particlesArray[i]);\n            // let index = particlesArray[i].index + 1;\n            // if(index === circles.length) {\n            //     index = 0;\n            // }\n            // particlesArray[i].x = circles[index][0];\n            // particlesArray[i].y = circles[index][1];\n            // particlesArray.index = index;\n        }\n        connectParticles(context)(particlesArray, 200);\n        return 1; // -1 to exit animation loop\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import { edgeBounce, Particle, createRandomParticleValues } from '../lib/Particle';\nimport { fillCanvas } from '../lib/canvas';\nimport { normalizeInverse, pointDistance, randomNumberBetween } from '../lib/math';\nimport { connectParticles, drawParticlePoint } from '../lib/canvas-particles';\n\nconst gravityPoint = (mult = 0.2, f = 1) => (x, y, radius, particle) => {\n    const distance = pointDistance({ x, y }, particle);\n    if (distance < radius) {\n        const dx = x - particle.x;\n        const dy = y - particle.y;\n        const forceDirectionX = dx / distance;\n        const forceDirectionY = dy / distance;\n        const force = normalizeInverse(0, radius, distance) * f * mult;\n        const tempX = forceDirectionX * force * particle.radius * 2;\n        const tempY = forceDirectionY * force * particle.radius * 2;\n        particle.x += tempX;\n        particle.y += tempY;\n    }\n};\n\n// for moving points, push away/around from point\nconst avoidPoint = (point, particle, f = 1) => {\n    gravityPoint(1, (f *= -1))(point.x, point.y, point.radius, particle);\n};\n\nexport const variation5 = () => {\n    const config = {\n        numParticles: 50,\n    };\n\n    const particlesArray = [];\n    const circles = [];\n\n    const setup = ({ canvas, context }) => {\n        for (let i = 0; i < config.numParticles; i++) {\n            const props = createRandomParticleValues(canvas);\n            props.x = canvas.width / 2;\n            props.y = canvas.height / 2;\n            props.color = { r: 0, g: 0, b: 0 };\n            props.radius = 0.5;\n            particlesArray.push(new Particle(props));\n        }\n        const centerX = canvas.width / 2;\n        const centerY = canvas.height / 2;\n        const diameter = canvas.height / 4;\n        const steps = 30;\n        for (let theta = 0; theta < 360; theta += steps) {\n            const rad = theta * (Math.PI / 180);\n            const x = Math.cos(rad) * diameter + centerX;\n            const y = Math.sin(rad) * diameter + centerY;\n            circles.push([x, y, randomNumberBetween(20, 100)]);\n        }\n        fillCanvas(canvas, context)(1, '255,255,255');\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        // fillCanvas(canvas, context)(.005,'255,255,255');\n        for (let i = 0; i < config.numParticles; i++) {\n            particlesArray[i].updatePosWithVelocity();\n            edgeBounce(canvas, particlesArray[i]);\n            for (let c = 0; c < circles.length; c++) {\n                avoidPoint({ radius: circles[c][2], x: circles[c][0], y: circles[c][1] }, particlesArray[i], 4);\n            }\n            drawParticlePoint(context)(particlesArray[i]);\n        }\n        connectParticles(context)(particlesArray, 50);\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import { Particle, createRandomParticleValues, edgeBounce } from '../lib/Particle';\nimport { fillCanvas } from '../lib/canvas';\nimport { drawParticlePoint } from '../lib/canvas-particles';\nimport { normalizeInverse, pointDistance, mapRange } from '../lib/math';\n\nconst gravityPoint = (mult = 0.2, f = 1) => (x, y, radius, particle) => {\n    const distance = pointDistance({ x, y }, particle);\n    if (distance < radius) {\n        const dx = x - particle.x;\n        const dy = y - particle.y;\n        const forceDirectionX = dx / distance;\n        const forceDirectionY = dy / distance;\n        const force = normalizeInverse(0, radius, distance) * f * mult;\n        const tempX = forceDirectionX * force * particle.radius * 2;\n        const tempY = forceDirectionY * force * particle.radius * 2;\n        particle.x += tempX;\n        particle.y += tempY;\n    }\n};\n\n// Based on https://www.youtube.com/watch?v=j_BgnpMPxzM\nexport const variation6 = () => {\n    const numParticles = 200;\n    const particlesArray = [];\n    let hue = 0;\n\n    const setup = ({ canvas, context }) => {\n        for (let i = 0; i < numParticles; i++) {\n            const props = createRandomParticleValues(canvas);\n            props.color = { r: 255, g: 255, b: 255 };\n            particlesArray.push(new Particle(props));\n        }\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        fillCanvas(canvas, context)(0.08);\n        if (hue++ > 361) hue = 0;\n        for (let i = 0; i < numParticles; i++) {\n            particlesArray[i].radius -= 0.05;\n            if (particlesArray[i].radius <= 0) {\n                const initValues = createRandomParticleValues(canvas);\n                initValues.x = mouse.x ? mouse.x : canvas.width / 2;\n                initValues.y = mouse.y ? mouse.y : canvas.height / 2;\n                // let h = lerpRange(0,canvas.width,100,200,initValues.x);\n                const s = mapRange(0, 10, 0, 100, initValues.radius);\n                const l = mapRange(0, 10, 25, 75, initValues.radius);\n                initValues.color = `hsl(${hue},${s}%,${l}%)`;\n                particlesArray[i].initValues(initValues);\n            }\n            particlesArray[i].updatePosWithVelocity();\n            edgeBounce(canvas, particlesArray[i]);\n\n            gravityPoint()(canvas.width / 2, canvas.height, 2000, particlesArray[i]);\n            // gravityPoint({x:canvas.width/2, y:canvas.height}, particlesArray[i])\n            drawParticlePoint(context)(particlesArray[i]);\n        }\n        // connectParticles(context)(particlesArray, 100);\n        return 1;\n    };\n\n    return {\n        setup,\n        draw,\n    };\n};\n","import { edgeBounce, Particle, createRandomParticleValues } from '../lib/Particle';\nimport { background } from '../lib/canvas';\nimport { drawParticlePoint, drawRotatedParticle } from '../lib/canvas-particles';\n\nconst drawRake = (context) => ({ x, y, radius, color }, spacing) => {\n    const points = 5;\n    spacing |= radius * 3;\n    for (let i = 0; i < points; i++) {\n        drawParticlePoint(context)({ x: x + spacing * i, y, radius, color });\n    }\n};\n\nexport const rainbowRakeOrbit = () => {\n    const config = {\n        // width: 700,\n        // height: 700,\n        // fps: 30,\n    };\n\n    const numParticles = 50;\n    const particlesArray = [];\n\n    const attractor = { x: canvas.width / 2, y: canvas.height / 2, mass: 100, g: 20 };\n\n    let canvasCenterX;\n    let canvasCenterY;\n    let centerRadius;\n\n    const setup = ({ canvas, context }) => {\n        canvasCenterX = canvas.width / 2;\n        canvasCenterY = canvas.height / 2;\n        centerRadius = canvas.height / 4;\n\n        for (let i = 0; i < numParticles; i++) {\n            const props = createRandomParticleValues(canvas);\n            props.radius = 1; // Math.sqrt(props.mass);\n            particlesArray.push(new Particle(props));\n        }\n    };\n\n    // const targetX = mouse.x ? mouse.x : canvas.width / 2;\n    // const targetY = mouse.y ? mouse.y : canvas.height / 2;\n    // accelerateToPoint(targetX, targetY, particlesArray[i]);\n    // https://www.youtube.com/watch?v=T84AWnntxZA\n    // const accelerateToPoint = (targetX, targetY, particle) => {\n    //     const magnitude = 0.001;\n    //     const vLimit = 5;\n    //     const accX = ((targetX - particle.x) * magnitude) / particle.mass;\n    //     const accY = ((targetY - particle.y) * magnitude) / particle.mass;\n    //     particle.velocityX += accX;\n    //     particle.velocityY += accY;\n    //     particle.velocityX = clamp(-vLimit, vLimit, particle.velocityX);\n    //     particle.velocityY = clamp(-vLimit, vLimit, particle.velocityY);\n    // };\n\n    const draw = ({ canvas, context, mouse }) => {\n        background(canvas, context)({ r: 0, g: 0, b: 50, a: 0.01 });\n\n        let mode = 1;\n\n        attractor.x = mouse.x ? mouse.x : canvasCenterX;\n        attractor.y = mouse.y ? mouse.y : canvasCenterY;\n\n        for (let i = 0; i < numParticles; i++) {\n            if (mouse.isDown) {\n                mode = -1;\n            } else {\n                mode = 1;\n            }\n            particlesArray[i].attract(attractor, mode, 2000);\n            particlesArray[i].velocity = particlesArray[i].velocity.limit(20);\n            particlesArray[i].updatePosWithVelocity();\n            edgeBounce(canvas, particlesArray[i]);\n            drawRotatedParticle(context, drawRake, particlesArray[i]);\n            particlesArray[i].acceleration = { x: 0, y: 0 };\n        }\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import { create2dNoiseAbs } from './math';\n\n// [[x,y], ...]\nexport const createCirclePoints = (offsetX, offsetY, diameter, steps, sx = 1, sy = 1) => {\n    const points = [];\n    for (let theta = 0; theta < 360; theta += steps) {\n        const radius = theta * (Math.PI / 180);\n        const x = Math.cos(radius) * diameter + sx + offsetX;\n        const y = Math.sin(radius) * diameter + sy + offsetY;\n        points.push([x, y]);\n    }\n    return points;\n};\nexport const createGridPointsXY = (width, height, xMargin, yMargin, columns, rows) => {\n    const gridPoints = [];\n\n    const colStep = Math.round((width - xMargin * 2) / (columns - 1));\n    const rowStep = Math.round((height - yMargin * 2) / (rows - 1));\n\n    for (let col = 0; col < columns; col++) {\n        const x = xMargin + col * colStep;\n        for (let row = 0; row < rows; row++) {\n            const y = yMargin + row * rowStep;\n            gridPoints.push([x, y]);\n        }\n    }\n\n    return { points: gridPoints, columnWidth: colStep, rowHeight: rowStep };\n};\nexport const createGridCellsXY = (width, height, columns, rows, margin = 0, gutter = 0) => {\n    const points = [];\n\n    const colStep = Math.ceil((width - margin * 2 - gutter * (columns - 1)) / columns);\n    const rowStep = Math.ceil((height - margin * 2 - gutter * (rows - 1)) / rows);\n\n    for (let row = 0; row < rows; row++) {\n        const y = margin + row * rowStep + gutter * row;\n        for (let col = 0; col < columns; col++) {\n            const x = margin + col * colStep + gutter * col;\n            points.push([x, y]);\n        }\n    }\n\n    return { points, columnWidth: colStep, rowHeight: rowStep };\n};\n// -> [{radius, rotation, position:[u,v]}, ...]\nexport const createGridPointsUV = (columns, rows) => {\n    rows = rows || columns;\n    const points = [];\n\n    const amplitude = 0.1;\n    const frequency = 1;\n\n    for (let x = 0; x < columns; x++) {\n        for (let y = 0; y < rows; y++) {\n            const u = columns <= 1 ? 0.5 : x / (columns - 1);\n            const v = columns <= 1 ? 0.5 : y / (rows - 1);\n            // const radius = Math.abs(random.gaussian() * 0.02);\n            const radius = create2dNoiseAbs(u, v);\n            const rotation = create2dNoiseAbs(u, v);\n            points.push({\n                radius,\n                rotation,\n                position: [u, v],\n            });\n        }\n    }\n    return points;\n};\n","import { createRandomNumberArray, mapRange } from '../lib/math';\nimport { Particle, createRandomParticleValues } from '../lib/Particle';\nimport { background } from '../lib/canvas';\nimport { connectParticles, drawParticlePoint } from '../lib/canvas-particles';\nimport { createGridPointsXY } from '../lib/grids';\n\nexport const threeAttractors = () => {\n    const config = {\n        // width: 500,\n        // height: 500,\n        // fps: 24,\n    };\n\n    let numParticles;\n    const particlesArray = [];\n    let gridPoints = [];\n    const hue = 0;\n\n    let attractorDist;\n\n    let leftattractor;\n    let midattractor;\n    let rightattractor;\n\n    let canvasCenterX;\n    let canvasCenterY;\n    let centerRadius;\n\n    const setup = ({ canvas, context }) => {\n        canvasCenterX = canvas.width / 2;\n        canvasCenterY = canvas.height / 2;\n        centerRadius = canvas.height / 4;\n\n        attractorDist = canvas.width / 0.7;\n\n        leftattractor = { x: 0, y: canvas.height / 2, mass: 10, g: 3 };\n        midattractor = { x: canvas.width / 2, y: canvas.height / 2, mass: 50, g: 10 };\n        rightattractor = { x: canvas.width, y: canvas.height / 2, mass: 10, g: 3 };\n\n        gridPoints = createGridPointsXY(canvas.width, canvas.height, 100, 100, canvas.width / 50, canvas.height / 50)\n            .points;\n        numParticles = gridPoints.length;\n\n        for (let i = 0; i < numParticles; i++) {\n            const props = createRandomParticleValues(canvas);\n            props.x = gridPoints[i][0];\n            props.y = gridPoints[i][1];\n            props.velocityX = 0;\n            props.velocityY = 0;\n            props.mass = 1;\n            props.radius = 1; // randomNumberBetween(10, 30);\n            props.spikes = createRandomNumberArray(20, 0, 360);\n\n            const h = mapRange(0, canvas.width, 0, 90, props.x);\n            const s = 100; // lerpRange(0,10,0,100,prop.radius);\n            const l = 50; // lerpRange(0,10,25,75,prop.radius);\n            props.color = `hsla(${h},${s}%,${l}%,0.1)`;\n\n            // props.color = { r: 0, g: 0, b: 0, a: 0.1 };\n\n            particlesArray.push(new Particle(props));\n        }\n\n        background(canvas, context)('white');\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        // background(canvas, context)({ r: 255, g: 255, b: 255, a: 0.001 });\n        for (let i = 0; i < numParticles; i++) {\n            particlesArray[i].attract(leftattractor, -1, attractorDist);\n            particlesArray[i].attract(midattractor, 1, attractorDist);\n            particlesArray[i].attract(rightattractor, -1, attractorDist);\n\n            particlesArray[i].velocity = particlesArray[i].velocity.limit(10);\n\n            particlesArray[i].updatePosWithVelocity();\n            // edgeBounce(canvas, particlesArray[i]);\n            drawParticlePoint(context)(particlesArray[i]);\n        }\n        connectParticles(context)(particlesArray, 50, false);\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import sourcePng from '../../media/images/hi1.png';\nimport { clearCanvas, drawSquareFilled, background } from '../lib/canvas';\nimport { createRandomParticleValues, edgeWrap, Particle } from '../lib/Particle';\nimport { createRandomNumberArray, mapRange, randomNumberBetween } from '../lib/math';\nimport { connectParticles, drawParticlePoint } from '../lib/canvas-particles';\nimport { createGridPointsXY } from '../lib/grids';\n\nconst getImageDataFromImage = (context) => (image) => {\n    context.drawImage(image, 0, 0);\n    return context.getImageData(0, 0, image.width, image.width);\n};\n\nconst getImageDataColor = (imageData, x, y) => ({\n    r: imageData.data[y * 4 * imageData.width + x * 4],\n    g: imageData.data[y * 4 * imageData.width + x * 4 + 1],\n    b: imageData.data[y * 4 * imageData.width + x * 4 + 2],\n    a: imageData.data[y * 4 * imageData.width + x * 4 + 3],\n});\n\nexport const hiImage01 = (_) => {\n    const config = {\n        width: 600,\n        height: 600,\n    };\n\n    let imageZoomFactor;\n    const png = new Image();\n    png.src = sourcePng;\n    let imageData;\n\n    const numParticles = 500;\n    const particlesArray = [];\n    const particleColor = { r: 252, g: 3, b: 152 };\n\n    const setup = ({ canvas, context }) => {\n        imageData = getImageDataFromImage(context)(png);\n        clearCanvas(canvas, context)();\n        imageZoomFactor = canvas.width / imageData.width;\n\n        for (let i = 0; i < numParticles; i++) {\n            const props = createRandomParticleValues(canvas);\n            props.radius = randomNumberBetween(1, 5);\n            props.color = particleColor;\n            if (i % 2) {\n                props.x = 0;\n            } else {\n                props.x = canvas.width;\n            }\n            particlesArray.push(new Particle(props));\n        }\n\n        background(canvas, context)({ r: 255, g: 255, b: 0 });\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        background(canvas, context)({ r: 255, g: 255, b: 0, a: 0.004 });\n\n        for (let i = 0; i < numParticles; i++) {\n            particlesArray[i].updatePosWithVelocity();\n            edgeWrap(canvas, particlesArray[i]);\n\n            const pxColor = getImageDataColor(\n                imageData,\n                Math.round(particlesArray[i].x / imageZoomFactor),\n                Math.round(particlesArray[i].y / imageZoomFactor)\n            );\n\n            if (pxColor.r > 250) {\n                particlesArray[i].drag(0.001);\n                particlesArray[i].color = { r: 3, g: 227, b: 252 };\n            } else {\n                particlesArray[i].color = particleColor;\n            }\n\n            drawParticlePoint(context)(particlesArray[i]);\n        }\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","module.exports=[[\"#69d2e7\",\"#a7dbd8\",\"#e0e4cc\",\"#f38630\",\"#fa6900\"],[\"#fe4365\",\"#fc9d9a\",\"#f9cdad\",\"#c8c8a9\",\"#83af9b\"],[\"#ecd078\",\"#d95b43\",\"#c02942\",\"#542437\",\"#53777a\"],[\"#556270\",\"#4ecdc4\",\"#c7f464\",\"#ff6b6b\",\"#c44d58\"],[\"#774f38\",\"#e08e79\",\"#f1d4af\",\"#ece5ce\",\"#c5e0dc\"],[\"#e8ddcb\",\"#cdb380\",\"#036564\",\"#033649\",\"#031634\"],[\"#490a3d\",\"#bd1550\",\"#e97f02\",\"#f8ca00\",\"#8a9b0f\"],[\"#594f4f\",\"#547980\",\"#45ada8\",\"#9de0ad\",\"#e5fcc2\"],[\"#00a0b0\",\"#6a4a3c\",\"#cc333f\",\"#eb6841\",\"#edc951\"],[\"#e94e77\",\"#d68189\",\"#c6a49a\",\"#c6e5d9\",\"#f4ead5\"],[\"#3fb8af\",\"#7fc7af\",\"#dad8a7\",\"#ff9e9d\",\"#ff3d7f\"],[\"#d9ceb2\",\"#948c75\",\"#d5ded9\",\"#7a6a53\",\"#99b2b7\"],[\"#ffffff\",\"#cbe86b\",\"#f2e9e1\",\"#1c140d\",\"#cbe86b\"],[\"#efffcd\",\"#dce9be\",\"#555152\",\"#2e2633\",\"#99173c\"],[\"#343838\",\"#005f6b\",\"#008c9e\",\"#00b4cc\",\"#00dffc\"],[\"#413e4a\",\"#73626e\",\"#b38184\",\"#f0b49e\",\"#f7e4be\"],[\"#ff4e50\",\"#fc913a\",\"#f9d423\",\"#ede574\",\"#e1f5c4\"],[\"#99b898\",\"#fecea8\",\"#ff847c\",\"#e84a5f\",\"#2a363b\"],[\"#655643\",\"#80bca3\",\"#f6f7bd\",\"#e6ac27\",\"#bf4d28\"],[\"#00a8c6\",\"#40c0cb\",\"#f9f2e7\",\"#aee239\",\"#8fbe00\"],[\"#351330\",\"#424254\",\"#64908a\",\"#e8caa4\",\"#cc2a41\"],[\"#554236\",\"#f77825\",\"#d3ce3d\",\"#f1efa5\",\"#60b99a\"],[\"#5d4157\",\"#838689\",\"#a8caba\",\"#cad7b2\",\"#ebe3aa\"],[\"#8c2318\",\"#5e8c6a\",\"#88a65e\",\"#bfb35a\",\"#f2c45a\"],[\"#fad089\",\"#ff9c5b\",\"#f5634a\",\"#ed303c\",\"#3b8183\"],[\"#ff4242\",\"#f4fad2\",\"#d4ee5e\",\"#e1edb9\",\"#f0f2eb\"],[\"#f8b195\",\"#f67280\",\"#c06c84\",\"#6c5b7b\",\"#355c7d\"],[\"#d1e751\",\"#ffffff\",\"#000000\",\"#4dbce9\",\"#26ade4\"],[\"#1b676b\",\"#519548\",\"#88c425\",\"#bef202\",\"#eafde6\"],[\"#5e412f\",\"#fcebb6\",\"#78c0a8\",\"#f07818\",\"#f0a830\"],[\"#bcbdac\",\"#cfbe27\",\"#f27435\",\"#f02475\",\"#3b2d38\"],[\"#452632\",\"#91204d\",\"#e4844a\",\"#e8bf56\",\"#e2f7ce\"],[\"#eee6ab\",\"#c5bc8e\",\"#696758\",\"#45484b\",\"#36393b\"],[\"#f0d8a8\",\"#3d1c00\",\"#86b8b1\",\"#f2d694\",\"#fa2a00\"],[\"#2a044a\",\"#0b2e59\",\"#0d6759\",\"#7ab317\",\"#a0c55f\"],[\"#f04155\",\"#ff823a\",\"#f2f26f\",\"#fff7bd\",\"#95cfb7\"],[\"#b9d7d9\",\"#668284\",\"#2a2829\",\"#493736\",\"#7b3b3b\"],[\"#bbbb88\",\"#ccc68d\",\"#eedd99\",\"#eec290\",\"#eeaa88\"],[\"#b3cc57\",\"#ecf081\",\"#ffbe40\",\"#ef746f\",\"#ab3e5b\"],[\"#a3a948\",\"#edb92e\",\"#f85931\",\"#ce1836\",\"#009989\"],[\"#300030\",\"#480048\",\"#601848\",\"#c04848\",\"#f07241\"],[\"#67917a\",\"#170409\",\"#b8af03\",\"#ccbf82\",\"#e33258\"],[\"#aab3ab\",\"#c4cbb7\",\"#ebefc9\",\"#eee0b7\",\"#e8caaf\"],[\"#e8d5b7\",\"#0e2430\",\"#fc3a51\",\"#f5b349\",\"#e8d5b9\"],[\"#ab526b\",\"#bca297\",\"#c5ceae\",\"#f0e2a4\",\"#f4ebc3\"],[\"#607848\",\"#789048\",\"#c0d860\",\"#f0f0d8\",\"#604848\"],[\"#b6d8c0\",\"#c8d9bf\",\"#dadabd\",\"#ecdbbc\",\"#fedcba\"],[\"#a8e6ce\",\"#dcedc2\",\"#ffd3b5\",\"#ffaaa6\",\"#ff8c94\"],[\"#3e4147\",\"#fffedf\",\"#dfba69\",\"#5a2e2e\",\"#2a2c31\"],[\"#fc354c\",\"#29221f\",\"#13747d\",\"#0abfbc\",\"#fcf7c5\"],[\"#cc0c39\",\"#e6781e\",\"#c8cf02\",\"#f8fcc1\",\"#1693a7\"],[\"#1c2130\",\"#028f76\",\"#b3e099\",\"#ffeaad\",\"#d14334\"],[\"#a7c5bd\",\"#e5ddcb\",\"#eb7b59\",\"#cf4647\",\"#524656\"],[\"#dad6ca\",\"#1bb0ce\",\"#4f8699\",\"#6a5e72\",\"#563444\"],[\"#5c323e\",\"#a82743\",\"#e15e32\",\"#c0d23e\",\"#e5f04c\"],[\"#edebe6\",\"#d6e1c7\",\"#94c7b6\",\"#403b33\",\"#d3643b\"],[\"#fdf1cc\",\"#c6d6b8\",\"#987f69\",\"#e3ad40\",\"#fcd036\"],[\"#230f2b\",\"#f21d41\",\"#ebebbc\",\"#bce3c5\",\"#82b3ae\"],[\"#b9d3b0\",\"#81bda4\",\"#b28774\",\"#f88f79\",\"#f6aa93\"],[\"#3a111c\",\"#574951\",\"#83988e\",\"#bcdea5\",\"#e6f9bc\"],[\"#5e3929\",\"#cd8c52\",\"#b7d1a3\",\"#dee8be\",\"#fcf7d3\"],[\"#1c0113\",\"#6b0103\",\"#a30006\",\"#c21a01\",\"#f03c02\"],[\"#000000\",\"#9f111b\",\"#b11623\",\"#292c37\",\"#cccccc\"],[\"#382f32\",\"#ffeaf2\",\"#fcd9e5\",\"#fbc5d8\",\"#f1396d\"],[\"#e3dfba\",\"#c8d6bf\",\"#93ccc6\",\"#6cbdb5\",\"#1a1f1e\"],[\"#f6f6f6\",\"#e8e8e8\",\"#333333\",\"#990100\",\"#b90504\"],[\"#1b325f\",\"#9cc4e4\",\"#e9f2f9\",\"#3a89c9\",\"#f26c4f\"],[\"#a1dbb2\",\"#fee5ad\",\"#faca66\",\"#f7a541\",\"#f45d4c\"],[\"#c1b398\",\"#605951\",\"#fbeec2\",\"#61a6ab\",\"#accec0\"],[\"#5e9fa3\",\"#dcd1b4\",\"#fab87f\",\"#f87e7b\",\"#b05574\"],[\"#951f2b\",\"#f5f4d7\",\"#e0dfb1\",\"#a5a36c\",\"#535233\"],[\"#8dccad\",\"#988864\",\"#fea6a2\",\"#f9d6ac\",\"#ffe9af\"],[\"#2d2d29\",\"#215a6d\",\"#3ca2a2\",\"#92c7a3\",\"#dfece6\"],[\"#413d3d\",\"#040004\",\"#c8ff00\",\"#fa023c\",\"#4b000f\"],[\"#eff3cd\",\"#b2d5ba\",\"#61ada0\",\"#248f8d\",\"#605063\"],[\"#ffefd3\",\"#fffee4\",\"#d0ecea\",\"#9fd6d2\",\"#8b7a5e\"],[\"#cfffdd\",\"#b4dec1\",\"#5c5863\",\"#a85163\",\"#ff1f4c\"],[\"#9dc9ac\",\"#fffec7\",\"#f56218\",\"#ff9d2e\",\"#919167\"],[\"#4e395d\",\"#827085\",\"#8ebe94\",\"#ccfc8e\",\"#dc5b3e\"],[\"#a8a7a7\",\"#cc527a\",\"#e8175d\",\"#474747\",\"#363636\"],[\"#f8edd1\",\"#d88a8a\",\"#474843\",\"#9d9d93\",\"#c5cfc6\"],[\"#046d8b\",\"#309292\",\"#2fb8ac\",\"#93a42a\",\"#ecbe13\"],[\"#f38a8a\",\"#55443d\",\"#a0cab5\",\"#cde9ca\",\"#f1edd0\"],[\"#a70267\",\"#f10c49\",\"#fb6b41\",\"#f6d86b\",\"#339194\"],[\"#ff003c\",\"#ff8a00\",\"#fabe28\",\"#88c100\",\"#00c176\"],[\"#ffedbf\",\"#f7803c\",\"#f54828\",\"#2e0d23\",\"#f8e4c1\"],[\"#4e4d4a\",\"#353432\",\"#94ba65\",\"#2790b0\",\"#2b4e72\"],[\"#0ca5b0\",\"#4e3f30\",\"#fefeeb\",\"#f8f4e4\",\"#a5b3aa\"],[\"#4d3b3b\",\"#de6262\",\"#ffb88c\",\"#ffd0b3\",\"#f5e0d3\"],[\"#fffbb7\",\"#a6f6af\",\"#66b6ab\",\"#5b7c8d\",\"#4f2958\"],[\"#edf6ee\",\"#d1c089\",\"#b3204d\",\"#412e28\",\"#151101\"],[\"#9d7e79\",\"#ccac95\",\"#9a947c\",\"#748b83\",\"#5b756c\"],[\"#fcfef5\",\"#e9ffe1\",\"#cdcfb7\",\"#d6e6c3\",\"#fafbe3\"],[\"#9cddc8\",\"#bfd8ad\",\"#ddd9ab\",\"#f7af63\",\"#633d2e\"],[\"#30261c\",\"#403831\",\"#36544f\",\"#1f5f61\",\"#0b8185\"],[\"#aaff00\",\"#ffaa00\",\"#ff00aa\",\"#aa00ff\",\"#00aaff\"],[\"#d1313d\",\"#e5625c\",\"#f9bf76\",\"#8eb2c5\",\"#615375\"],[\"#ffe181\",\"#eee9e5\",\"#fad3b2\",\"#ffba7f\",\"#ff9c97\"],[\"#73c8a9\",\"#dee1b6\",\"#e1b866\",\"#bd5532\",\"#373b44\"],[\"#805841\",\"#dcf7f3\",\"#fffcdd\",\"#ffd8d8\",\"#f5a2a2\"]];","import tinycolor from 'tinycolor2';\nimport * as nicepalettes from 'nice-color-palettes';\nimport { mapRange, oneOf, randomWholeBetween } from './math';\n\nexport const asTinyColor = (arry) => arry.map((c) => tinycolor(c));\n\nexport const brightest = (arry) => {\n    const colors = asTinyColor(arry);\n    return colors.reduce((acc, c) => {\n        if (c.getBrightness() > acc.getBrightness()) {\n            acc = c;\n        }\n        return acc;\n    }, colors[0]);\n};\n\nexport const darkest = (arry) => {\n    const colors = asTinyColor(arry);\n    return colors.reduce((acc, c) => {\n        if (c.getBrightness() < acc.getBrightness()) {\n            acc = c;\n        }\n        return acc;\n    }, colors[0]);\n};\n\nexport const bicPenBlue = tinycolor('hsl(250,79,29)').clone();\nexport const paperWhite = tinycolor('hsl(53,3,100)').clone();\n\nexport const warmWhite = tinycolor('hsl(42, 14%, 86%)').clone();\nexport const warmPink = tinycolor('hsl(29, 42%, 86%)').clone();\n\n// greys from https://uxdesign.cc/dark-mode-ui-design-the-definitive-guide-part-1-color-53dcfaea5129\nexport const coolGreyDark = tinycolor('#1f2933').clone();\nexport const warmGreyDark = tinycolor('#27241d').clone();\n\nexport const palettes = {\n    greyWarm: [\n        '#faf97f',\n        '#e8e6e1',\n        '#d3cec4',\n        '#b8b2a7',\n        '#a39e93',\n        '#857f72',\n        '#625d52',\n        '#504a40',\n        '#423d33',\n        '#27241d',\n    ],\n    greyCool: [\n        '#f5f7fa',\n        '#e4e7eb',\n        '#cbd2d9',\n        '#9aa5b1',\n        '#7b8794',\n        '#616e7c',\n        '#52606d',\n        '#3e4c59',\n        '#323f4b',\n        '#1f2933',\n    ],\n    pop: ['#ed3441', '#ffd630', '#329fe3', '#154296', '#303030'],\n    '60s_psyc': ['#ffeb00', '#fc0019', '#01ff4f', '#ff01d7', '#5600cc', '#00edf5'],\n    '70s': ['#73BFA3', '#F2DBAE', '#F29829', '#D9631E', '#593C2C'],\n    '80s_pastells': ['#FF3F3F', '#FF48C4', '#F3EA5F', '#C04DF9', '#2BD1FC', '#38CEF6'],\n    '80s_pop': ['#FF82E2', '#70BAFF', '#FED715', '#0037B3', '#FE0879'],\n    '90s': ['#42C8B0', '#4575F3', '#6933B0', '#D36F88', '#FC8D45'],\n    retro_sunset: ['#FFD319', '#FF2975', '#F222FF', '#8C1EFF', '#FF901F'],\n    vapor_wave: ['#F6A3EF', '#50D8EC', '#DD6DFB', '#EECD69', '#6FEAE6'],\n    // https://www.colourlovers.com/palette/694737/Thought_Provoking\n    thought_provoking: [\n        'hsl(46, 75%, 70%)',\n        'hsl(10, 66%, 56%)',\n        'hsl(350, 65%, 46%)',\n        'hsl(336, 40%, 24%)',\n        'hsl(185, 19%, 40%)',\n    ],\n};\n\nexport const nicePalette = (_) => nicepalettes[randomWholeBetween(0, 99)];\nexport const palette = (_) => palettes[oneOf(Object.keys(palettes))];\n\n// hslFromRange(50, 90,270, v);\nexport const hslFromRange = (y1, x2, y2, v) => {\n    const h = mapRange(0, y1, x2, y2, v);\n    const s = 100;\n    const l = 50;\n    return tinycolor(`hsl(${h},${s}%,${l}%)`);\n};\n\n/*\nColor between 2 defined and a hue spin in the middle to introduce a 3rd\n// Palette from https://www.colourlovers.com/palette/694737/Thought_Provoking\n\nconst colorTop = 'hsl(350, 65%, 46%)';\nconst colorBottom = 'hsl(185, 19%, 40%)';\nconst distFromCenter = Math.abs(mid - currentY);\nconst color = tinycolor.mix(colorTop, colorBottom, mapRange(startY, maxY, 0, 100, currentY));\ncolor.spin(mapRange(0, mid / 2, 60, 0, distFromCenter));\ncolor.brighten(mapRange(0, mid / 2, 50, 0, distFromCenter));\ncolor.darken(mapRange(0, mid, 0, 40, distFromCenter) + randomNumberBetween(0, 30));\n */\n","/*\nCanvas animation timeline based on Canvas Sketch time keeping methods\nhttps://github.com/mattdesl/canvas-sketch/blob/master/docs/animated-sketches.md\n */\n\nexport class Timeline {\n    constructor(fps, loop, duration) {\n        this.fps = fps || 30;\n        this.loop = loop || 0; // total loops\n        this.duration = duration || 1; // duration of each loop in seconds\n        this.totalLoopFrames = this.duration ? this.duration * this.fps : 1;\n        this.iterations = 0; // number of times drawn\n        this.time = 0; // elapsed time in seconds\n        this.playhead = 0; // current progress of the loop between 0 and 1\n        this.frame = 1; // frame of the loop\n        this.elapsedLoops = 0;\n        this.startTime = Date.now();\n    }\n\n    get elapsed() {\n        return Date.now() - this.startTime;\n    }\n\n    onFrame() {\n        this.iterations++;\n        // one frame\n        this.frame++;\n        this.playhead = this.frame / this.totalLoopFrames;\n        if (this.iterations % this.fps === 0) {\n            // a second elapsed\n            this.time++;\n            if (this.frame >= this.totalLoopFrames) {\n                // one loop duration passed\n                this.elapsedLoops++;\n                this.playhead = 0;\n                this.frame = 0;\n                if (this.loop && this.elapsedLoops >= this.loop) {\n                    console.log('End of loops');\n                    return -1;\n                }\n            }\n        }\n        return 1;\n    }\n}\n","import { background, drawLineAngle, setStokeColor } from '../lib/canvas';\nimport { nicePalette } from '../lib/palettes';\nimport { create3dNoiseAbs, marginify, oneOf, toSinValue, uvFromAngle } from '../lib/math';\nimport { Timeline } from '../lib/Timeline';\nimport { createGridPointsUV } from '../lib/grids';\n\nexport const windLines = () => {\n    const config = {\n        width: 600,\n        height: 600,\n        fps: 60,\n    };\n\n    let counter = 0;\n    let grid = createGridPointsUV(15, 15);\n\n    const timeline = new Timeline(config.fps, 0, 5);\n\n    const setup = ({ canvas, context }) => {\n        const colors = nicePalette();\n        grid = grid.map((g) => {\n            g.color = oneOf(colors);\n            return g;\n        });\n        background(canvas, context)('rgba(255,255,255,1');\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        background(canvas, context)('rgba(255,255,255,.1');\n\n        grid.forEach(({ position, rotation, color }) => {\n            const [u, v] = position;\n            const { x, y } = marginify({ margin: 100, u, v, width: canvas.width, height: canvas.height });\n            const t = toSinValue(timeline.playhead) * 0.1;\n            const wave = create3dNoiseAbs(u, v, counter, 3 * t) * 10;\n            const startvect = uvFromAngle((rotation + wave) * -1).setMag(25);\n            setStokeColor(context)(color);\n            drawLineAngle(context)(x + startvect.x, y + startvect.y, rotation + wave, 25, 4, 'round');\n        });\n\n        counter += 0.01;\n        return timeline.onFrame();\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport { background } from '../lib/canvas';\nimport { ratio, orientation } from '../lib/sketch';\nimport { create2dNoiseAbs, mapRange, randomNumberBetween, lowest, highest } from '../lib/math';\n\n/*\nOriginal inspiration\nChurn by Kenny Vaden\nhttps://www.reddit.com/r/generative/comments/lq8r11/churn_r_code/\n */\n\nconst createWave = (width, angle, frequency, amplitude, noise = 1) => {\n    const points = [];\n    const cfrequency = frequency * noise;\n    const camplitude = amplitude * noise;\n\n    for (let i = 0; i < width; i++) {\n        const s = Math.sin((angle + Math.PI * 2 + i) / frequency) * amplitude;\n        const c = Math.cos((angle + Math.PI * 2 + i) / cfrequency) * camplitude;\n        points.push(s + c);\n    }\n\n    return points;\n};\n\n// get the lowest of top and the highest of bottom, height+=that difference\nconst drawWaveLine = (context) => (startx, endx, yorigin, height, topWave, bottomWave, color, dots = true) => {\n    let currentX = startx;\n    let currentY = yorigin;\n\n    const waveColor = color.clone();\n\n    // const highestTop = lowest(topWave);\n    const lineheight = highest(bottomWave) - lowest(topWave) + height;\n\n    const gradient = context.createLinearGradient(0, yorigin, 0, yorigin + lineheight);\n    gradient.addColorStop(0, waveColor.toRgbString());\n    gradient.addColorStop(1, waveColor.darken(20).toRgbString());\n\n    context.strokeStyle = waveColor.darken(70).toRgbString();\n    context.lineWidth = 0.75;\n    context.beginPath();\n\n    context.moveTo(startx, currentY);\n\n    let xstep = (endx - startx) / topWave.length + 1;\n    topWave.forEach((w) => {\n        context.lineTo(currentX, w + currentY);\n        currentX += xstep;\n    });\n\n    currentY += lineheight;\n    context.lineTo(currentX, currentY);\n\n    xstep = (endx - startx) / bottomWave.length + 1;\n    bottomWave.forEach((w) => {\n        context.lineTo(currentX, w + currentY);\n        currentX -= xstep;\n    });\n\n    context.lineTo(startx, currentY);\n\n    if (dots) {\n        context.stroke();\n        context.fillStyle = gradient;\n    } else {\n        context.fillStyle = tinycolor(waveColor).toRgbString();\n    }\n\n    context.fill();\n\n    if (dots) {\n        currentX = startx;\n        currentY = yorigin;\n        xstep = (endx - startx) / topWave.length + 1;\n        const dotColor = color.clone();\n        topWave.forEach((w) => {\n            // if (w <= highestTop * 0.5) {\n            const rnd = randomNumberBetween(0, yorigin);\n            if (rnd < 2) {\n                // context.strokeStyle = tinycolor(waveColor).darken(20).toRgbString();\n                // context.lineWidth = 2;\n                const radius = rnd < 0.008 ? randomNumberBetween(50, 100) : randomNumberBetween(1, 3);\n\n                context.fillStyle = dotColor.lighten(5).toRgbString();\n                context.beginPath();\n                context.arc(\n                    currentX + randomNumberBetween(-50, 50),\n                    w + currentY - randomNumberBetween(5, 50),\n                    radius,\n                    0,\n                    Math.PI * 2,\n                    false\n                );\n                context.fill();\n                context.stroke();\n            }\n            // }\n            currentX += xstep;\n        });\n    }\n};\n\nexport const waves01 = () => {\n    const config = {\n        name: 'waves01',\n        // orientation: orientation.portrait,\n        ratio: ratio.square,\n    };\n\n    let canvasHeight;\n    let canvasMiddle;\n\n    // Palette from https://www.colourlovers.com/palette/694737/Thought_Provoking\n    const colorBackground = 'hsl(46, 75%, 70%)';\n    const colorTop = 'hsl(350, 65%, 46%)';\n    const colorBottom = 'hsl(185, 19%, 40%)';\n\n    const waves = [];\n\n    const waveResolution = 400;\n    let waveRows;\n\n    let incrementY = 1;\n    let startY = 0;\n    let currentY;\n    let maxY;\n\n    let angle = 90;\n    let frequency = 10;\n    let amplitude = 10;\n    let cosOffset = 0;\n\n    const createWavesRow = (idx) => {\n        const mid = waveRows / 2;\n        const distFromCenter = Math.abs(mid - idx);\n\n        angle = mapRange(0, waveRows, 0, 360, idx);\n\n        frequency = mapRange(0, mid, 8, 30, distFromCenter);\n        amplitude = mapRange(0, mid, 15, 20, distFromCenter) + randomNumberBetween(-5, 5);\n\n        const noise = create2dNoiseAbs(angle, idx, amplitude * 0.5, frequency * randomNumberBetween(0, 2));\n        cosOffset = noise / randomNumberBetween(2, 10);\n\n        return {\n            top: createWave(waveResolution, angle, frequency, amplitude, cosOffset),\n            bottom: createWave(waveResolution, angle, frequency, amplitude, cosOffset),\n        };\n    };\n\n    const setup = ({ canvas, context }) => {\n        canvasHeight = canvas.height;\n        canvasMiddle = canvas.height / 2;\n\n        waveRows = canvas.height;\n\n        const buffer = canvas.height / 5;\n        startY = buffer;\n\n        currentY = startY;\n\n        maxY = canvas.height - buffer * 1.5;\n        incrementY = (maxY - startY) / waveRows;\n\n        for (let i = 0; i < waveRows; i++) {\n            waves.push(createWavesRow(i));\n        }\n\n        background(canvas, context)(tinycolor(colorBackground).lighten(20));\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        const mid = canvasMiddle;\n\n        for (let i = 0; i < waves.length; i++) {\n            const distFromCenter = Math.abs(mid - currentY);\n            const color = tinycolor.mix(colorTop, colorBottom, mapRange(startY, maxY, 0, 100, currentY));\n\n            color.spin(mapRange(0, mid / 2, 60, 0, distFromCenter));\n            color.brighten(mapRange(0, mid / 2, 50, 0, distFromCenter));\n            color.darken(mapRange(0, mid, 0, 40, distFromCenter) + randomNumberBetween(0, 30));\n\n            const height = mapRange(startY, maxY, 50, 0, currentY);\n            drawWaveLine(context)(0, canvas.width, currentY, height, waves[i].top, waves[i].bottom, color, true);\n\n            currentY += incrementY;\n        }\n\n        // final white lines at top and bottom to clean up edges\n        // drawWaveLine(context)(0, canvas.width, currentY + rowHeight, 200, topwave, [0], 'white', false);\n        // drawWaveLine(context)(0, canvas.width, -100, 100, topwave, bottomwave, 'white', false);\n\n        return -1;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport { contextScale } from './canvas';\n\n// https://www.cssfontstack.com/\nexport const textStyles = {\n    size: (s) => `${s * contextScale}px \"Helvetica Neue\",Helvetica,Arial,sans-serif`,\n    sansHelvetica: (s) => `${s * contextScale}px \"Helvetica Neue\",Helvetica,Arial,sans-serif`,\n    monoCourier: (s) =>\n        `${s * contextScale}px \"Courier New\", Courier, \"Lucida Sans Typewriter\", \"Lucida Typewriter\", monospace`,\n    monoLucidia: (s) =>\n        `${\n            s * contextScale\n        }px \"Lucida Sans Typewriter\", \"Lucida Console\", monaco, \"Bitstream Vera Sans Mono\", monospace`,\n    serifGeorgia: (s) => `${s * contextScale}px Georgia, Times, \"Times New Roman\", serif`,\n    default: '16px \"Helvetica Neue\",Helvetica,Arial,sans-serif',\n    small: '12px \"Helvetica Neue\",Helvetica,Arial,sans-serif',\n};\nexport const drawTextFilled = (context) => (text, x, y, color, style) => {\n    context.fillStyle = tinycolor(color).toRgbString();\n    context.font = style || textStyles.sansHelvetica(16);\n    context.fillText(text, x, y);\n    // https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics\n    return context.measureText(text);\n};\nexport const setTextAlignLeftTop = (context) => {\n    context.textAlign = 'left';\n    context.textBaseline = 'top';\n};\nexport const setTextAlignAllCenter = (context) => {\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n};\n","import { background, pixel, drawRect, contextScale } from '../lib/canvas';\nimport { create2dNoiseAbs, oneOf, pointDistance, randomWholeBetween, round2 } from '../lib/math';\nimport { brightest, darkest, nicePalette } from '../lib/palettes';\nimport { ratio, scale } from '../lib/sketch';\nimport { drawTextFilled, setTextAlignLeftTop, textStyles } from '../lib/canvas-text';\nimport { createGridCellsXY } from '../lib/grids';\n\nclass Curve {\n    constructor(x, y, radius, angle, speed, noise) {\n        this.x = x;\n        this.y = y;\n        this.originX = x;\n        this.originY = y;\n        this.radius = radius;\n        this.speed = speed || 1;\n        this.angle = angle || 0;\n        this.noise = noise;\n\n        // Randomize some noise possibilities\n        this.xa = oneOf([randomWholeBetween(1, 5), round2(this.noise)]);\n        this.xb = oneOf([randomWholeBetween(1, 5), round2(this.noise)]);\n        this.ya = oneOf([randomWholeBetween(1, 5), round2(this.noise)]);\n        this.yb = oneOf([randomWholeBetween(1, 5), round2(this.noise)]);\n    }\n\n    get size() {\n        return this.radius * 2;\n    }\n\n    get centerX() {\n        return this.originX + this.radius;\n    }\n\n    get centerY() {\n        return this.originY + this.radius;\n    }\n\n    get distFromCenter() {\n        return pointDistance({ x: this.centerX, y: this.centerY }, { x: this.x, y: this.y });\n    }\n}\n\nexport const lissajous01 = () => {\n    const config = {\n        name: 'lissajous01',\n        ratio: ratio.square,\n        scale: scale.hidpi,\n    };\n\n    const renderBatch = 10;\n    const curves = [];\n    let canvasCenterX;\n    let canvasCenterY;\n    let centerRadius;\n    const columns = 3;\n    let margin;\n    const palette = nicePalette();\n    const colorBackground = brightest(palette).clone().lighten(10);\n    const colorCurve = darkest(palette).clone().darken(25);\n    const colorText = colorBackground.clone().darken(15).desaturate(20);\n    let tick = 0;\n    let grid;\n\n    const setup = ({ canvas, context }) => {\n        canvasCenterX = canvas.width / 2;\n        canvasCenterY = canvas.height / 2;\n        centerRadius = canvas.height / 4;\n        margin = 50 * contextScale;\n        if (columns === 1) {\n            curves.push(new Curve(canvasCenterX, canvasCenterY, centerRadius, 0, 0.05));\n        } else {\n            grid = createGridCellsXY(canvas.width, canvas.width, columns, columns, margin, margin / 2);\n            grid.points.forEach((point) => {\n                const x = point[0];\n                const y = point[1];\n                curves.push(new Curve(x, y, grid.columnWidth / 2, 0, 0.05, create2dNoiseAbs(x, y)));\n            });\n        }\n\n        background(canvas, context)(colorBackground);\n    };\n\n    const circleX = (curve, v = 1) => curve.radius * Math.cos(curve.angle * v);\n    const circleY = (curve, v = 1) => curve.radius * Math.sin(curve.angle * v);\n\n    // k is # of petals\n    // https://en.wikipedia.org/wiki/Rose_(mathematics)\n    // http://xahlee.info/SpecialPlaneCurves_dir/Rose_dir/rose.html\n    const roseX = (curve, k = 1, a = 1, b = 1) =>\n        curve.radius * Math.cos(k * curve.angle * a) * Math.cos(curve.angle * b);\n    const roseY = (curve, k = 1, a = 1, b = 1) =>\n        curve.radius * Math.cos(k * curve.angle * a) * Math.sin(curve.angle * b);\n\n    const linearYDown = (curve) => {\n        let { y } = curve;\n        if (++y > curve.size) y = 0;\n        return y;\n    };\n\n    const draw = ({ context }) => {\n        grid.points.forEach((point) => {\n            drawRect(context)(point[0], point[1], grid.columnWidth, grid.rowHeight, 1, colorText);\n        });\n        for (let b = 0; b < renderBatch; b++) {\n            for (let i = 0; i < curves.length; i++) {\n                // const idx = i + 1;\n                // const pointRad = 1;\n                const c = curves[i];\n\n                const k = round2(((i + 1) * 2) / 9);\n\n                const { xa } = c;\n                const { xb } = c;\n                const { ya } = c;\n                const { yb } = c;\n\n                // c.x = circleX(c);\n                // c.y = circleY(c);\n                c.x = roseX(c, k, xa, xb);\n                c.y = roseY(c, k, ya, yb);\n                // c.y = linearYDown(c);\n\n                // TODO, put a/b on the canvas so i can remember them!\n\n                c.angle += c.speed;\n\n                // const h = mapRange(0, c.radius, 180, 270, c.distFromCenter);\n                // const s = 100;\n                // const l = 30;\n                // const a = 0.75;\n                // const color = `hsla(${h},${s}%,${l}%,${a})`;\n\n                pixel(context)(c.x + c.centerX, c.y + c.centerY, colorCurve);\n\n                setTextAlignLeftTop(context);\n                drawTextFilled(context)(\n                    `k=${k}, ${xa}, ${xb}, ${ya}, ${yb}`,\n                    c.originX,\n                    c.originY + c.size + 10,\n                    colorText,\n                    textStyles.size(10)\n                );\n            }\n            tick++;\n        }\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport { create2dNoise, create3dNoise, pointDistance, randomNumberBetween, uvFromAngle } from './math';\n\nconst TAU = Math.PI * 2;\n\nexport const simplexNoise2d = (x, y, f = 0.0005) => create2dNoise(x, y, 1, f) * TAU;\nexport const simplexNoise3d = (x, y, t, f = 0.002) => create3dNoise(x, y, t, 1, f) * TAU;\n\nexport const diagLines = (x, y) => (x + y) * 0.01 * TAU;\n\n// From https://medium.com/@bit101/flow-fields-part-i-3ebebc688fd8\nexport const sinField = (x, y) => (Math.sin(x * 0.01) + Math.sin(y * 0.01)) * TAU;\n\n// random attractor params\nconst a = randomNumberBetween(-2, 2);\nconst b = randomNumberBetween(-2, 2);\nconst c = randomNumberBetween(-2, 2);\nconst d = randomNumberBetween(-2, 2);\n\n// http://paulbourke.net/fractals/clifford/\nexport const cliffordAttractor = (width, height, x, y) => {\n    const scale = 0.01;\n    x = (x - width / 2) * scale;\n    y = (y - height / 2) * scale;\n    const x1 = Math.sin(a * y) + c * Math.cos(a * x);\n    const y1 = Math.sin(b * x) + d * Math.cos(b * y);\n    return Math.atan2(y1 - y, x1 - x);\n};\n\n// http://paulbourke.net/fractals/peterdejong/\nexport const jongAttractor = (width, height, x, y) => {\n    const scale = 0.01;\n    x = (x - width / 2) * scale;\n    y = (y - height / 2) * scale;\n    const x1 = Math.sin(a * y) - Math.cos(b * x);\n    const y1 = Math.sin(c * x) - Math.cos(d * y);\n    return Math.atan2(y1 - y, x1 - x);\n};\n\n// Misc formula\nconst flowAtPoint = (x, y) => {\n    const scale = 0.01;\n    const fromCenter = pointDistance({ x, y }, { x: canvasMidX, y: canvasMidY });\n    const simplex = simplexNoise2d(x, y, 0.01);\n    // const theta = simplex;\n    const theta = (fromCenter + simplex) / 2; // mostly radial around middle\n    // const r1 = (Math.sin(1.2 * x) + 0.2 * Math.atan(2 * y)) * 8 * Math.PI;\n    // const r2 = (Math.pow(x, 2) + 0.8 * Math.pow(y, 1 / 2)) * 8 * Math.PI * 4;\n    // const theta = ((r1 + r2 + simplex) / 3) * 0.001;\n    // const theta = ((Math.cos(x) + x + Math.sin(y)) * 24) % (Math.PI / 2); // wander dl like like\n    // const theta = Math.atan2(y, x); // cones out from top left\n    // const theta = x + y + Math.cos(x * scale) * Math.sin(x * scale); // bl to tr diag and cross perp lines\n    // const theta = Math.cos(x * scale) * Math.sin(x * scale); // vertical lines\n    // const theta = Math.cos(x) * Math.sin(x) * scale; // horizontal lines\n    // const theta = x * Math.sin(y) * scale; // scribble\n    // const theta = Math.sin(x * scale) + Math.sin(y * scale); // diamonds\n    return theta * TAU;\n};\nexport const renderField = ({ width, height }, context, fn, color = 'black', cell = '50', length) => {\n    const mid = cell / 2;\n    for (let x = 0; x < width; x += cell) {\n        for (let y = 0; y < height; y += cell) {\n            const theta = fn(x, y);\n            const vect = uvFromAngle(theta).setMag(length || mid);\n            const x1 = x + mid;\n            const y1 = y + mid;\n            const x2 = x1 + vect.x;\n            const y2 = y1 + vect.y;\n            context.strokeStyle = tinycolor(color);\n            context.lineWidth = 1;\n            context.beginPath();\n            context.moveTo(x1, y1);\n            context.lineTo(x2, y2);\n            context.stroke();\n        }\n    }\n};\n","import tinycolor from 'tinycolor2';\nimport { mapRange, randomWholeBetween, uvFromAngle, snapNumber, quantize } from '../lib/math';\nimport { edgeWrap, Particle, createRandomParticleValues } from '../lib/Particle';\nimport { background, drawCircleFilled } from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { Vector } from '../lib/Vector';\nimport { simplexNoise3d } from '../lib/attractors';\nimport { hslFromRange } from '../lib/palettes';\n\nexport const flowFieldParticles = () => {\n    const config = {\n        name: 'flowFieldParticles',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    const numParticles = 400;\n    const particlesArray = [];\n    const maxSize = 3;\n\n    let time = 0;\n\n    const createRandomParticle = (canvas) => {\n        const props = createRandomParticleValues(canvas);\n        props.x = randomWholeBetween(0, canvas.width);\n        props.y = randomWholeBetween(0, canvas.height);\n        props.velocityX = 0;\n        props.velocityY = 0;\n        return new Particle(props);\n    };\n\n    const setup = ({ canvas, context }) => {\n        for (let i = 0; i < numParticles; i++) {\n            particlesArray.push(createRandomParticle(canvas));\n        }\n\n        background(canvas, context)('rgba(50,50,50,1)');\n    };\n\n    const drawPixel = (canvas, context, force, particle, color, rad = 1) => {\n        particle.applyForce(force);\n        particle.velocity = particle.velocity.limit(1);\n        particle.updatePosWithVelocity();\n        edgeWrap(canvas, particle);\n        const pcolor = color || particle.color;\n        const x = snapNumber(maxSize * 2, particle.x);\n        const y = snapNumber(maxSize * 2, particle.y);\n        drawCircleFilled(context)(x, y, rad, pcolor);\n        return true;\n    };\n\n    const drawParticles = ({ canvas, context }) => {\n        for (let i = 0; i < numParticles; i++) {\n            const particle = particlesArray[i];\n            const sNoise3d = simplexNoise3d(particle.x, particle.y, time, 0.002);\n            const theta = quantize(3, sNoise3d);\n            const force = uvFromAngle(theta);\n            const clr = hslFromRange(5, 270, 360, Math.abs(theta)).setAlpha(0.25);\n            const size = mapRange(0, 5, 1, maxSize, Math.abs(theta));\n\n            drawPixel(canvas, context, force, particle, clr, size);\n\n            particle.acceleration = new Vector(0, 0);\n        }\n    };\n\n    const drawFibers = ({ canvas, context }) => {\n        const particle = createRandomParticle(canvas);\n        const length = 200;\n        for (let i = 0; i < length; i++) {\n            const sNoise3d = simplexNoise3d(particle.x, particle.y, time, 0.002);\n            const theta = sNoise3d;\n            const force = uvFromAngle(theta);\n            const clr = 'rgba(0,0,0,.05)';\n\n            drawPixel(canvas, context, force, particle, clr, 1);\n\n            particle.acceleration = new Vector(0, 0);\n        }\n    };\n\n    const draw = ({ canvas, context }) => {\n        drawFibers({ canvas, context });\n        drawParticles({ canvas, context });\n        time += 0.01;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\n\nimport { background, drawLineAngle } from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { nicePalette, hslFromRange } from '../lib/palettes';\nimport {\n    simplexNoise2d,\n    simplexNoise3d,\n    sinField,\n    cliffordAttractor,\n    jongAttractor,\n    diagLines,\n} from '../lib/attractors';\nimport { mapRange, snapNumber } from '../lib/math';\n\nconst TAU = Math.PI * 2;\n\nconst arc = (context, x, y, size, thick, color, theta) => {\n    const startR = snapNumber(Math.PI / 2, theta);\n    const endR = startR + Math.PI / 2;\n    const clockWise = true;\n\n    context.strokeStyle = tinycolor(color).toRgbString();\n    context.lineCap = 'round';\n    context.lineWidth = thick;\n    context.beginPath();\n    context.arc(x + size, y + size, size, startR, endR, clockWise);\n    context.stroke();\n};\n\nconst circle = (context, x, y, size, color, theta) => {\n    const startR = 0; // snapNumber(Math.PI / 2, theta);\n    const endR = TAU; // startR + Math.PI / 2;\n    const clockWise = true;\n    const rad = mapRange(0, 5, size * 0.2, size * 0.6, Math.abs(theta));\n\n    context.beginPath();\n    context.arc(x + size, y + size, rad, startR, endR, clockWise);\n    context.fillStyle = tinycolor(color).toRgbString();\n    context.fill();\n};\n\nconst line = (context, x, y, size, thick, color, theta) => {\n    const startR = snapNumber(Math.PI / 2, theta) + Math.PI / 2;\n    context.strokeStyle = tinycolor(color).toRgbString();\n    drawLineAngle(context)(x + size, y + size, startR, size * 2, thick, 'round');\n};\n\nexport const flowFieldArcs = () => {\n    const config = {\n        name: 'flowFieldArcs',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    let time = 0;\n    const palette = nicePalette();\n    const colorBackground = tinycolor('rgba(50,50,50,1)');\n\n    const setup = ({ canvas, context }) => {\n        background(canvas, context)(colorBackground);\n    };\n\n    const renderField = ({ width, height }, context, fn, cell) => {\n        const mid = cell / 2;\n        for (let x = 0; x < width; x += cell) {\n            for (let y = 0; y < height; y += cell) {\n                const theta = fn(x, y);\n                const arcColor = hslFromRange(5, 270, 360, Math.abs(theta));\n                const lineColor = hslFromRange(5, 180, 270, Math.abs(theta)).darken(10);\n                line(context, x, y, mid, mid * 0.5, lineColor, theta);\n                circle(context, x, y, mid, lineColor, theta);\n                arc(context, x, y, mid, mid * 0.5, arcColor, theta);\n                arc(context, x, y, mid, mid * 0.1, 'yellow', theta);\n            }\n        }\n    };\n\n    const draw = ({ canvas, context }) => {\n        background(canvas, context)(colorBackground.setAlpha(0.1));\n\n        // const clifford = (x, y) => cliffordAttractor(canvas.width, canvas.height, x, y);\n        // const jong = (x, y) => jongAttractor(canvas.width, canvas.height, x, y);\n        const noise = (x, y) => simplexNoise3d(x, y, time, 0.001);\n\n        renderField(canvas, context, noise, Math.round(canvas.width / 20));\n        time += 0.25;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport { clearCanvas, getImageDataColor } from './canvas';\nimport { mapRange } from './math';\n\nexport class Bitmap {\n    constructor(src) {\n        this.scaleX = 1;\n        this.scaleY = 1;\n\n        this.image = new Image();\n        this.image.src = src;\n        this.imageData = undefined;\n    }\n\n    get width() {\n        return this.imageData.width;\n    }\n\n    get height() {\n        return this.imageData.height;\n    }\n\n    get data() {\n        return this.imageData;\n    }\n\n    toCanvasX(x) {\n        return Math.round(x * this.scaleX);\n    }\n\n    toCanvasY(y) {\n        return Math.round(y * this.scaley);\n    }\n\n    init(canvas, context, clear = true) {\n        this.canvas = canvas;\n        this.context = context;\n        this.context.drawImage(this.image, 0, 0);\n        this.imageData = context.getImageData(0, 0, this.image.width, this.image.width);\n        this.scaleX = canvas.width / this.imageData.width;\n        this.scaleY = canvas.height / this.imageData.height;\n        if (clear) clearCanvas(canvas, context);\n    }\n\n    pixelColorRaw(x, y) {\n        if (x < 0) x = 0;\n        if (y < 0) y = 0;\n        if (x >= this.width) x = this.width - 1;\n        if (y >= this.height) y = this.height - 1;\n        return {\n            r: this.imageData.data[y * 4 * this.imageData.width + x * 4],\n            g: this.imageData.data[y * 4 * this.imageData.width + x * 4 + 1],\n            b: this.imageData.data[y * 4 * this.imageData.width + x * 4 + 2],\n            a: this.imageData.data[y * 4 * this.imageData.width + x * 4 + 3],\n        };\n    }\n\n    pixelColor(x, y) {\n        return tinycolor(this.pixelColorRaw(x, y));\n    }\n\n    /*\n    Gray = 0.21R + 0.72G + 0.07B // Luminosity\n    Gray = (R + G + B) Ã· 3 // Average Brightness\n    Gray = 0.299R + 0.587G + 0.114B // rec601 standard\n    Gray = 0.2126R + 0.7152G + 0.0722B // ITU-R BT.709 standard\n    Gray = 0.2627R + 0.6780G + 0.0593B // ITU-R BT.2100 standard\n     */\n    // https://sighack.com/post/averaging-rgb-colors-the-right-way\n    pixelAverageGrey(x, y) {\n        const color = this.pixelColorRaw(x, y);\n        return Math.sqrt((color.r * color.r + color.g * color.g + color.b * color.b) / 3);\n    }\n\n    pixelTheta(x, y) {\n        // return this.pixelColor(x, y).getBrightness() / 256;\n        return this.pixelAverageGrey(x, y) / 256;\n    }\n\n    pixelColorFromCanvas(x, y) {\n        return this.pixelColor(Math.round(x / this.scaleX), Math.round(y / this.scaleY));\n    }\n\n    pixelThetaFromCanvas(x, y) {\n        return this.pixelTheta(Math.round(x / this.scaleX), Math.round(y / this.scaleY));\n    }\n\n    sizeFromPixelBrightness(x, y, size = 5, low = 0, max = 255) {\n        const pixelColor = this.pixelColorFromCanvas(x, y);\n        const brightness = 256 - pixelColor.getBrightness();\n        return mapRange(low, max, 0, size, brightness);\n    }\n\n    // const createColorArrayFromImageData = (imageData) => {\n    //     const data = [];\n    //     for (let y = 0, { height } = imageData; y < height; y++) {\n    //         for (let x = 0, { width } = imageData; x < width; x++) {\n    //             data.push({ x, y, ...getImageColor(imageData, x, y) });\n    //         }\n    //     }\n    //     return data;\n    // };\n}\n\n/*\nconst renderImage = () => {\n        for (let x = startX; x < maxX; x++) {\n            for (let y = startY; y < maxY; y++) {\n                const color = image.pixelColorFromCanvas(x, y);\n                pixel(ctx)(x, y, color, 'square', 1);\n            }\n        }\n    };\n */\n","// \"paint splatters\" around center point\nimport { randomNumberBetween, randomWholeBetween } from './math';\nimport { drawCircleFilled } from './canvas';\n\nconst TAU = Math.PI * 2;\n\nexport const splatter = (context) => (x, y, color, size, amount = 3, range = 20) => {\n    for (let i = 0; i < amount; i++) {\n        const s = randomWholeBetween(size * 0.25, size * 3);\n        // circle dist\n        const radius = randomWholeBetween(0, range);\n        const angle = randomNumberBetween(0, TAU);\n        const xoff = radius * Math.cos(angle);\n        const yoff = radius * Math.sin(angle);\n        // square dist\n        // const xoff = randomWholeBetween(-range, range);\n        // const yoff = randomWholeBetween(-range, range);\n        drawCircleFilled(context)(x + xoff, y + yoff, s, color);\n    }\n};\n","import tinycolor from 'tinycolor2';\nimport { mapRange, randomWholeBetween, uvFromAngle, snapNumber, quantize, pointDistance } from '../lib/math';\nimport { Particle, createRandomParticleValues } from '../lib/Particle';\nimport { background, drawCircleFilled } from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { Vector } from '../lib/Vector';\nimport { diagLines, renderField, simplexNoise2d, simplexNoise3d } from '../lib/attractors';\nimport { hslFromRange, warmWhite } from '../lib/palettes';\nimport { Bitmap } from '../lib/Bitmap';\nimport sourcePng from '../../media/images/kristijan-arsov-woman-400.png';\nimport { splatter } from '../lib/canvas-paint';\n\n/*\nhttps://marcteyssier.com/projects/flowfield/\nhttps://larrycarlson.com/collections/wavy-art-prints\n */\n\nconst TAU = Math.PI * 2;\n\nexport const flowFieldImage = () => {\n    const config = {\n        name: 'flowFieldImage',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    const maxSize = 5;\n    let time = 0;\n    const backgroundColor = warmWhite;\n    const image = new Bitmap(sourcePng);\n\n    const createRandomParticle = (canvas) => {\n        const props = createRandomParticleValues(canvas);\n        props.x = randomWholeBetween(0, canvas.width);\n        props.y = randomWholeBetween(0, canvas.height);\n        props.velocityX = 0;\n        props.velocityY = 0;\n        return new Particle(props);\n    };\n\n    const imageFlow = (x, y) => image.pixelThetaFromCanvas(x, y) * TAU;\n\n    const setup = ({ canvas, context }) => {\n        image.init(canvas, context);\n        background(canvas, context)(backgroundColor);\n        renderField(canvas, context, imageFlow, 'rgba(0,0,0,.15)', 50, 10);\n    };\n\n    const drawPixel = (canvas, context, particle, color, rad = 1) => {\n        const pcolor = color || particle.color;\n        const { x } = particle;\n        const { y } = particle;\n        drawCircleFilled(context)(x, y, rad, pcolor);\n        return true;\n    };\n\n    const drawParticle = ({ canvas, context }, particle) => {\n        const theta = imageFlow(particle.x, particle.y);\n        const force = uvFromAngle(theta);\n        particle.applyForce(force);\n        particle.velocity = particle.velocity.limit(3);\n        particle.updatePosWithVelocity();\n\n        const fromCenter = pointDistance(particle, { x: canvas.width / 2, y: canvas.height / 2 });\n\n        const imagePixelColor = image.pixelColorFromCanvas(particle.x, particle.y);\n        const imagePixelBrightness = 256 - imagePixelColor.getBrightness();\n        const hslColor = hslFromRange(canvas.width, 90, 270, particle.x).spin(time);\n        const particleColor = tinycolor.mix(hslColor, imagePixelColor, 90);\n        particleColor.desaturate(mapRange(canvas.width / 3, canvas.width / 2, 0, 10, fromCenter));\n\n        const size = mapRange(0, 255, 0, maxSize, imagePixelBrightness);\n        const sizeMult = mapRange(canvas.width / 3, canvas.width / 2, 1, 5, fromCenter);\n\n        drawPixel(canvas, context, particle, particleColor, size * sizeMult);\n\n        if (Math.abs(theta) >= 5.7) {\n            splatter(context)(particle.x, particle.y, particleColor.brighten(10), 1, 3, 100);\n        }\n\n        particle.acceleration = new Vector(0, 0);\n    };\n\n    const drawFibers = ({ canvas, context }) => {\n        const particle = createRandomParticle(canvas);\n        const length = randomWholeBetween(50, 1000);\n        for (let i = 0; i < length; i++) {\n            drawParticle({ canvas, context }, particle);\n        }\n    };\n\n    const draw = ({ canvas, context }) => {\n        drawFibers({ canvas, context });\n        time += 0.05;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport { randomWholeBetween, degreesToRadians, randomPointAround } from '../lib/math';\nimport { background, drawCircleFilled } from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { brightest, darkest, hslFromRange, nicePalette } from '../lib/palettes';\nimport { simplexNoise2d, simplexNoise3d } from '../lib/attractors';\n\n/*\nStarted here but took a detour\nhttps://www.reddit.com/r/creativecoding/comments/lx9prx/audiovisual_sound_of_space_solar_system_david/\n */\n\nconst TAU = Math.PI * 2;\n\nexport const radialNoise = () => {\n    const config = {\n        name: 'radialNoise',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    let canvasMidX;\n    let canvasMidY;\n    let maxRadius;\n    let radiusScale;\n    let currentRadiusSize = 360;\n\n    let originX;\n    let originY;\n    let time = 0;\n    let angle = 0;\n\n    const history = {};\n\n    const palette = nicePalette();\n    const backgroundColor = brightest(palette).clone().lighten(10);\n    const imageColor = darkest(palette).clone();\n\n    // let imageZoomFactor;\n    // const png = new Image();\n    // png.src = sourcePng;\n    // let imageData;\n\n    const setup = ({ canvas, context }) => {\n        canvasMidX = canvas.width / 2;\n        canvasMidY = canvas.height / 2;\n        maxRadius = canvas.width * 0.4;\n        radiusScale = currentRadiusSize / maxRadius;\n\n        originX = canvasMidX;\n        originY = canvasMidY;\n\n        // imageData = getImageDataFromImage(context)(png);\n        // clearCanvas(canvas, context)();\n        // imageZoomFactor = 360 / imageData.width;\n\n        background(canvas, context)(backgroundColor);\n    };\n\n    const drawPixel = (context, x, y, color, size = 1, heading = 0) => {\n        drawCircleFilled(context)(x, y, size, color);\n    };\n\n    const drawLine = (context, x1, y1, x2, y2, color, strokeWidth = 1) => {\n        context.strokeStyle = tinycolor(color).toRgbString();\n        context.lineWidth = strokeWidth;\n        context.beginPath();\n        context.moveTo(x1, y1);\n        context.lineTo(x2, y2);\n        context.stroke();\n    };\n\n    const circleX = (r, a, v = 1) => r * Math.cos(a * v);\n    const circleY = (r, a, v = 1) => r * Math.sin(a * v);\n\n    const draw = ({ canvas, context }) => {\n        for (let radius = 0; radius < currentRadiusSize; radius++) {\n            let ox;\n            let oy;\n\n            if (history.hasOwnProperty(radius)) {\n                ox = history[radius].x;\n                oy = history[radius].y;\n            }\n\n            const radScaled = radius / radiusScale;\n            const a = 1;\n            const b = 1;\n            const radians = degreesToRadians(angle) - Math.PI / 8;\n            let x = originX + circleX(radScaled, radians, a);\n            let y = originY + circleY(radScaled, radians, b);\n\n            const noise = simplexNoise3d(x, y, time, 0.02);\n            x += noise;\n            y += noise;\n\n            const monoColor = imageColor.clone().spin(time * 0.1);\n\n            if (ox !== undefined && oy !== undefined) {\n                drawLine(context, ox, oy, x, y, monoColor, 0.5);\n            }\n\n            history[radius] = { x, y };\n\n            time += 0.01;\n        }\n\n        angle += 3;\n\n        if (angle > 360) {\n            angle = 0;\n\n            currentRadiusSize = randomWholeBetween(100, 360);\n            radiusScale = 1; // currentRadiusSize / maxRadius;\n\n            const offs = randomPointAround((canvas.width - maxRadius) * 0.75);\n            originX = canvasMidX + offs.x;\n            originY = canvasMidY + offs.y;\n            background(canvas, context)(backgroundColor.setAlpha(0.25));\n        }\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport random from 'canvas-sketch-util/random';\nimport { randomWholeBetween, uvFromAngle, oneOf, randomPointAround, randomBoolean } from '../lib/math';\nimport { Particle } from '../lib/Particle';\nimport { background } from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { palettes } from '../lib/palettes';\nimport { Vector } from '../lib/Vector';\nimport { simplexNoise2d, simplexNoise3d, cliffordAttractor, jongAttractor, renderField } from '../lib/attractors';\n\n/*\nBased on\nhttps://tylerxhobbs.com/essays/2020/flow-fields\n */\n\nconst drawRibbonPoint = (context, point, i, thickness = 0, height = 0) => {\n    const x = point[0];\n    const y = point[1];\n    const jitterX = 0; // Math.cos(i * 0.05) * height;\n    const jitterY = 0; // Math.sin(i * 0.05) * height;\n    context.lineTo(x + thickness + jitterX, y + thickness + jitterY);\n};\n\nconst drawRibbon = (context) => (sideA, sideB, color, stroke = false, thickness = 1) => {\n    const startx = sideA[0][0];\n    const starty = sideA[0][1];\n    const endx = sideB[0][0] + thickness;\n    const endy = sideB[0][1] + thickness;\n\n    const rColor = tinycolor(color).clone();\n    const gradient = context.createLinearGradient(0, starty - thickness, 0, endy + thickness);\n    gradient.addColorStop(0, rColor.toRgbString());\n    gradient.addColorStop(1, rColor.clone().darken(20).toRgbString());\n\n    context.beginPath();\n    context.moveTo(startx, starty);\n    sideA.forEach((w, i) => {\n        drawRibbonPoint(context, w, i, 0, thickness * 0.1);\n    });\n    sideB.forEach((w, i) => {\n        drawRibbonPoint(context, w, i, thickness, thickness * 0.1);\n    });\n    context.lineTo(startx, starty);\n\n    if (stroke) {\n        context.strokeStyle = rColor.darken(70).toRgbString();\n        context.lineWidth = 0.75;\n        context.stroke();\n    }\n\n    context.fillStyle = gradient;\n    context.fill();\n};\n\nexport const flowFieldRibbons = () => {\n    const config = {\n        name: 'flowFieldRibbons',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    let canvasMidX;\n    let canvasMidY;\n    const palette = palettes.pop;\n    const backgroundColor = tinycolor('white');\n\n    let time = 0;\n\n    const createRibbon = (fieldFn, startX, startY, length, vlimit = 1) => {\n        const props = {\n            x: startX,\n            y: startY,\n            velocityX: 0,\n            velocityY: 0,\n            mass: 1,\n        };\n        const particle = new Particle(props);\n        const coords = [];\n        for (let i = 0; i < length; i++) {\n            const theta = fieldFn(particle.x, particle.y);\n            // theta = quantize(4, theta);\n            const force = uvFromAngle(theta);\n            particle.applyForce(force);\n            particle.velocity = particle.velocity.limit(vlimit);\n            particle.updatePosWithVelocity();\n            coords.push([particle.x, particle.y]);\n            particle.acceleration = new Vector(0, 0);\n        }\n        return coords;\n    };\n\n    const simplex2d = (x, y) => simplexNoise2d(x, y, 0.0005);\n    const simplex3d = (x, y) => simplexNoise3d(x, y, time, 0.0005);\n    const clifford = (x, y) => cliffordAttractor(canvas.width, canvas.height, x, y);\n    const jong = (x, y) => jongAttractor(canvas.width, canvas.height, x, y);\n    const noise = randomBoolean() ? clifford : jong;\n\n    let maxRadius;\n\n    const setup = ({ canvas, context }) => {\n        canvasMidX = canvas.width / 2;\n        canvasMidY = canvas.height / 2;\n        maxRadius = canvas.width * 0.4;\n\n        background(canvas, context)(backgroundColor);\n\n        renderField(canvas, context, noise, 'rgba(0,0,0,.15)', canvas.width / 10, 5);\n    };\n\n    const ribbonLen = randomWholeBetween(50, 1000);\n    const ribbonThickness = randomWholeBetween(3, 30);\n\n    const draw = ({ canvas, context }) => {\n        const color = oneOf(palette);\n        const len = maxRadius * 2; // ribbonLen;\n\n        const rpoint = random.onCircle(maxRadius); // randomPointAround(maxRadius * 0.4);\n\n        const x = rpoint[0] + canvasMidX;\n        const y = rpoint[1] + canvasMidY;\n        const x2 = x + 2;\n        const y2 = y;\n\n        const sideA = createRibbon(noise, x, y, len, 1);\n        const sideB = createRibbon(noise, x2, y2, len, 1).reverse();\n\n        drawRibbon(context)(sideA, sideB, color, false, ribbonThickness);\n\n        time += 0.01;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport random from 'canvas-sketch-util/random';\nimport { randomWholeBetween, uvFromAngle, oneOf, randomPointAround, randomBoolean } from '../lib/math';\nimport { Particle } from '../lib/Particle';\nimport { background } from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { palettes } from '../lib/palettes';\nimport { Vector } from '../lib/Vector';\nimport { simplexNoise2d, simplexNoise3d, cliffordAttractor, jongAttractor, renderField } from '../lib/attractors';\n\n/*\nBased on\nhttps://tylerxhobbs.com/essays/2020/flow-fields\n */\n\nconst drawRibbonPoint = (context, point, i, thickness = 0, height = 0) => {\n    const x = point[0];\n    const y = point[1];\n    const jitterX = 0; // Math.cos(i * 0.05) * height;\n    const jitterY = 0; // Math.sin(i * 0.05) * height;\n    context.lineTo(x + thickness + jitterX, y + thickness + jitterY);\n};\n\nconst drawRibbonSegment = (context, sideA, sideB, color, stroke = false, thickness = 1) => {\n    const segStartX = sideA[0][0];\n    const segStartY = sideA[0][1];\n    const segEndX = sideB[0][0] + thickness;\n    const segEndY = sideB[0][1] + thickness;\n\n    const rColor = tinycolor(color).clone();\n    const gradient = context.createLinearGradient(0, segStartY - thickness, 0, segEndY + thickness);\n    gradient.addColorStop(0, rColor.toRgbString());\n    gradient.addColorStop(0.5, rColor.toRgbString());\n    gradient.addColorStop(1, rColor.clone().darken(20).saturate(50).toRgbString());\n\n    context.beginPath();\n    context.moveTo(segStartX, segStartY);\n    sideA.forEach((w, i) => {\n        drawRibbonPoint(context, w, i, 0, thickness * 0.1);\n    });\n    sideB.forEach((w, i) => {\n        drawRibbonPoint(context, w, i, thickness, thickness * 0.1);\n    });\n    context.lineTo(segStartX, segStartY);\n\n    if (stroke) {\n        context.strokeStyle = rColor.darken(70).toRgbString();\n        context.lineWidth = 0.75;\n        context.stroke();\n    }\n\n    context.fillStyle = gradient;\n    context.fill();\n};\n\nconst drawRibbon = (context) => (sideA, sideB, color, stroke = false, thickness = 1) => {\n    const segmentGap = 1; // randomWholeBetween(1, 4);\n    const segments = randomWholeBetween(1, 3);\n    // const segmentsStep = Math.ceil((sideA.length - segmentGap * (segments - 1)) / segments);\n    const segmentData = [];\n\n    let left = sideA.length;\n    let start = 0;\n\n    for (let i = 0; i < segments; i++) {\n        const len = randomWholeBetween(1, left / 2);\n        // const start = i * segmentsStep + segmentGap * i;\n        // const len = segmentsStep;\n        segmentData.push({\n            sideA: sideA.slice(start, start + len),\n            sideB: sideB.slice(start, start + len).reverse(),\n        });\n        start += len + segmentGap;\n        left -= len + segmentGap;\n    }\n    segmentData.forEach((s) => {\n        drawRibbonSegment(context, s.sideA, s.sideB, color, stroke, thickness);\n    });\n\n    // drawRibbonSegment(context, segmentStart, segmentLen, sideA, sideB, color, stroke, thickness);\n};\n\nexport const flowFieldRibbons2 = () => {\n    const config = {\n        name: 'flowFieldRibbons',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    let canvasMidX;\n    let canvasMidY;\n    const palette = palettes['80s_pop'];\n    const backgroundColor = tinycolor('white');\n\n    let time = 0;\n\n    const createRibbon = (fieldFn, startX, startY, length, vlimit = 1) => {\n        const props = {\n            x: startX,\n            y: startY,\n            velocityX: 0,\n            velocityY: 0,\n            mass: 1,\n        };\n        const particle = new Particle(props);\n        const coords = [];\n        for (let i = 0; i < length; i++) {\n            const theta = fieldFn(particle.x, particle.y);\n            // theta = quantize(4, theta);\n            const force = uvFromAngle(theta);\n            particle.applyForce(force);\n            particle.velocity = particle.velocity.limit(vlimit);\n            particle.updatePosWithVelocity();\n            coords.push([particle.x, particle.y]);\n            particle.acceleration = new Vector(0, 0);\n        }\n        return coords;\n    };\n\n    const simplex2d = (x, y) => simplexNoise2d(x, y, 0.0001);\n    const simplex3d = (x, y) => simplexNoise3d(x, y, time, 0.0005);\n    const clifford = (x, y) => cliffordAttractor(canvas.width, canvas.height, x, y);\n    const jong = (x, y) => jongAttractor(canvas.width, canvas.height, x, y);\n    const noise = randomBoolean() ? clifford : jong;\n\n    let maxRadius;\n\n    const setup = ({ canvas, context }) => {\n        canvasMidX = canvas.width / 2;\n        canvasMidY = canvas.height / 2;\n        maxRadius = canvas.width * 0.4;\n\n        background(canvas, context)(backgroundColor);\n\n        // renderField(\n        //     canvas,\n        //     context,\n        //     noise,\n        //     tinycolor(oneOf(palette)).lighten(30),\n        //     canvas.width / 10,\n        //     canvas.width / 20\n        // );\n    };\n\n    const ribbonLen = randomWholeBetween(200, 500);\n    const ribbonThickness = randomWholeBetween(100, 300);\n\n    const maxItterations = randomWholeBetween(10, 30);\n    let currentItteration = 0;\n\n    const draw = ({ canvas, context }) => {\n        const color = oneOf(palette);\n        const len = ribbonLen;\n\n        // const rpoint = random.onCircle(maxRadius); // randomPointAround(maxRadius * 0.4);\n        const rpoint = [randomWholeBetween(0, canvas.width), randomWholeBetween(0, canvas.height)];\n\n        const x = rpoint[0];\n        const y = rpoint[1];\n        const x2 = x + 2;\n        const y2 = y;\n\n        const sideA = createRibbon(noise, x, y, len, 1);\n        const sideB = createRibbon(noise, x2, y2, len, 1);\n\n        drawRibbon(context)(sideA, sideB, color, false, ribbonThickness);\n\n        time += 0.01;\n\n        if (++currentItteration > maxItterations) return -1;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","export class Point {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    get toArray() {\n        return [this.x, this.y, this.z];\n    }\n\n    get toObject() {\n        return {\n            x: this.x,\n            y: this.y,\n            z: this.z,\n        };\n    }\n\n    clone() {\n        return new Point(this.x, this.y, this.z);\n    }\n}\n","/*\nFlow field inside?\nParticle physics inside\nBorder\nClip to no overflow?\n */\n\nimport tinycolor from 'tinycolor2';\nimport { randomWholeBetween, randomNormalWholeBetween } from './math';\nimport { defaultValue } from './utils';\nimport { drawRect, drawRectFilled, resetStyles } from './canvas';\nimport { Point } from './Point';\n\nconst defaultMP = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n};\n\nconst defaultFlow = (x, y) => 0;\n\nlet boxIndex = 0;\n\nexport class Box {\n    #backgroundColor;\n\n    constructor(props, children = []) {\n        this.name = `box${boxIndex++}`;\n        this.canvas = props.canvas;\n        this.context = props.context;\n        this.x = props.x;\n        this.y = props.y;\n        this.width = props.width;\n        this.height = props.height;\n        this.rotation = defaultValue(props, 'rotation', 0);\n        this.#backgroundColor = tinycolor(defaultValue(props, 'backgroundColor', 'white'));\n        this.padding = defaultValue(props, 'padding', defaultMP);\n        this.clip = defaultValue(props, 'clip', true);\n        this.flowField = defaultValue(props, 'flowField', defaultFlow);\n        this.children = children;\n    }\n\n    get x2() {\n        return this.x + this.width;\n    }\n\n    get y2() {\n        return this.y + this.height;\n    }\n\n    get innerWidth() {\n        return this.width - this.padding.left - this.padding.right;\n    }\n\n    get innerHeight() {\n        return this.height - this.padding.top - this.padding.bottom;\n    }\n\n    get centerPoint() {\n        return new Point(this.x + Math.round(this.width / 2), this.y + Math.round(this.height / 2));\n    }\n\n    get backgroundColor() {\n        return this.#backgroundColor.clone();\n    }\n\n    set backgroundColor(c) {\n        this.#backgroundColor = tinycolor(c);\n    }\n\n    fill(color) {\n        color = color || this.backgroundColor;\n        drawRectFilled(this.context)(this.x, this.y, this.width, this.height, color);\n    }\n\n    erase() {\n        this.context.clearRect(this.x, this.y, this.width, this.height);\n    }\n\n    outline(thickness, color) {\n        this.context.strokeStyle = tinycolor(color).toRgbString();\n        this.context.lineWidth = thickness;\n        this.context.rect(this.x, this.y, this.width, this.height);\n        this.context.stroke();\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip\n    // https://dustinpfister.github.io/2019/08/14/canvas-save/\n    // https://dustinpfister.github.io/2019/10/08/canvas-clip/\n    createClip() {\n        this.context.save();\n        const region = new Path2D();\n        region.rect(this.x, this.y, this.width, this.height);\n        this.context.clip(region);\n    }\n\n    removeClip() {\n        this.context.restore();\n    }\n\n    translateX(x) {\n        return this.x + x;\n    }\n\n    translateY(y) {\n        return this.y + y;\n    }\n\n    translateInto(point) {\n        return new Point(this.translateX(point.x), this.translateY(point.y));\n    }\n\n    translateOut(point) {\n        return new Point(point.x - this.x, point.y - this.y);\n    }\n\n    randomPointInside(distribution = 'whole') {\n        const edgeBuffer = 10;\n        let point = new Point(\n            randomWholeBetween(edgeBuffer, this.width - edgeBuffer),\n            randomWholeBetween(edgeBuffer, this.height - edgeBuffer)\n        );\n        if (distribution === 'normal') {\n            point = new Point(\n                randomNormalWholeBetween(edgeBuffer, this.width - edgeBuffer),\n                randomNormalWholeBetween(edgeBuffer, this.height - edgeBuffer)\n            );\n        }\n        return point;\n    }\n\n    isInside(point) {\n        return point.x >= this.x && point.x <= this.x2 && point.y >= this.y && point.y <= this.y2;\n    }\n\n    isOutside(point) {\n        return !this.isInside(point);\n    }\n\n    clipPoint(point) {\n        const np = new Point(point.x, point.y);\n        if (point.x < this.x) np.x = this.x;\n        if (point.x > this.x2) np.x = this.x2;\n        if (point.y < this.y) np.y = this.y;\n        if (point.y > this.y2) np.y = this.y2;\n        return np;\n    }\n\n    wrapPoint(point) {\n        const np = new Point(point.x, point.y);\n        if (point.x < this.x) np.x = this.x2;\n        if (point.x > this.x2) np.x = this.x;\n        if (point.y < this.y) np.y = this.y2;\n        if (point.y > this.y2) np.y = this.y;\n        return np;\n    }\n\n    particleEdgeBounce = (particle) => {\n        const psize = particle.radius;\n        if (particle.x + psize > this.x2) {\n            particle.x = this.x2 - psize;\n            particle.reverseVelocityX();\n        }\n        if (particle.x - psize < this.x) {\n            particle.x = this.x + psize;\n            particle.reverseVelocityX();\n        }\n        if (particle.y + psize > this.y2) {\n            particle.y = this.y2 - psize;\n            particle.reverseVelocityY();\n        }\n        if (particle.y - psize < this.y) {\n            particle.y = this.y + psize;\n            particle.reverseVelocityY();\n        }\n    };\n\n    particleEdgeWrap = (particle) => {\n        const psize = particle.radius;\n        if (particle.x + psize > this.x2) {\n            particle.x = this.x + psize;\n        }\n        if (particle.x - psize < this.x) {\n            particle.x = this.x2 - psize;\n        }\n        if (particle.y + psize > this.y2) {\n            particle.y = this.y + psize;\n        }\n        if (particle.y - psize < this.y) {\n            particle.y = this.y2 - psize;\n        }\n    };\n}\n","// More detailed implementation https://blog.wolfram.com/2016/05/06/computational-stippling-can-machines-do-as-well-as-humans/\nimport tinycolor from 'tinycolor2';\nimport { mapRange, randomNormalWholeBetween, randomSign, randomWholeBetween } from './math';\n\nexport const stippleRect = (context) => (x, y, width, height, color = 'black', amount = 5, mode = 'ticks') => {\n    if (amount <= 0) return;\n    amount = Math.min(amount, 10);\n    context.save();\n    const region = new Path2D();\n    region.rect(x, y, width, height);\n    context.clip(region);\n    const strokeColor = tinycolor(color).toRgbString();\n    const size = 3;\n    const colStep = mapRange(1, 10, 20, 3, amount);\n    const rowStep = mapRange(1, 10, 20, 3, amount);\n\n    context.strokeStyle = strokeColor;\n    context.lineWidth = 2;\n    context.lineCap = 'round';\n\n    for (let i = 0; i < width; i += colStep) {\n        for (let j = 0; j < height; j += rowStep) {\n            const tx = x + randomNormalWholeBetween(i, i + colStep);\n            const ty = y + randomNormalWholeBetween(j, j + rowStep);\n            const tx2 = tx + size;\n            const ty2 = ty + size * -1;\n            context.beginPath();\n            context.moveTo(tx, ty);\n            context.lineTo(tx2, ty2);\n            context.stroke();\n        }\n    }\n\n    context.restore();\n};\nexport const texturizeRect = (context) => (x, y, width, height, color = 'black', amount = 5, mode = 'circles') => {\n    if (amount <= 0) return;\n\n    context.save();\n    const region = new Path2D();\n    region.rect(x, y, width, height);\n    context.clip(region);\n    const half = width / 4;\n    const strokeColor = tinycolor(color).toRgbString();\n    const lineWidth = 1;\n    const fillamount = amount * 100;\n\n    for (let i = 0; i < fillamount; i++) {\n        const tx = randomWholeBetween(x, x + width);\n        const ty = randomWholeBetween(y, y + height);\n        const size = randomWholeBetween(half, width);\n\n        context.strokeStyle = strokeColor;\n        context.lineWidth = lineWidth;\n        context.beginPath();\n\n        if (mode === 'circles') {\n            context.arc(tx, ty, size, 0, Math.PI * 2, false);\n        } else if (mode === 'circles2') {\n            const tx = randomNormalWholeBetween(x, x + width);\n            const ty = randomNormalWholeBetween(y, y + height);\n            const size = randomWholeBetween(1, width);\n            context.arc(tx, ty, size, 0, Math.PI * 2, false);\n        } else if (mode === 'xhatch') {\n            const tx2 = tx + size * randomSign();\n            const ty2 = ty + size * randomSign();\n            context.moveTo(tx, ty);\n            context.lineTo(tx2, ty2);\n        }\n\n        context.stroke();\n    }\n    context.restore();\n};\n","import tinycolor from 'tinycolor2';\nimport { Particle, createRandomParticleValues } from '../lib/Particle';\nimport { background, pixel, resetStyles } from '../lib/canvas';\nimport { mapRange, oneOf, uvFromAngle } from '../lib/math';\nimport { ratio, scale } from '../lib/sketch';\nimport { palettes, warmGreyDark, warmWhite, warmPink, paperWhite, bicPenBlue } from '../lib/palettes';\nimport { Box } from '../lib/Box';\nimport { simplexNoise3d } from '../lib/attractors';\nimport { Vector } from '../lib/Vector';\nimport { stippleRect, texturizeRect } from '../lib/canvas-textures';\nimport { connectParticles, drawParticlePoint } from '../lib/canvas-particles';\nimport { createGridCellsXY } from '../lib/grids';\n\nexport const shadedBoxes = () => {\n    const config = {\n        name: 'shadedBoxes',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    const numParticles = 30;\n\n    let canvasCenterX;\n    let canvasCenterY;\n    let centerRadius;\n    let grid;\n    const boxes = [];\n    const palette = palettes.pop;\n    let time = 0;\n\n    const setup = ({ canvas, context }) => {\n        canvasCenterX = canvas.width / 2;\n        canvasCenterY = canvas.height / 2;\n        centerRadius = canvas.height / 4;\n\n        background(canvas, context)(paperWhite);\n\n        const boxwhite = paperWhite.clone().darken(10).saturate(10);\n        const boxbg = [boxwhite, bicPenBlue];\n        const boxfg = [bicPenBlue, boxwhite];\n\n        const gridMargin = Math.round(canvas.width / 10);\n        const gridGutter = Math.round(gridMargin / 4);\n\n        grid = createGridCellsXY(canvas.width, canvas.height, 1, 10, gridMargin, gridGutter);\n\n        grid.points.forEach((p, i) => {\n            boxes.push(\n                new Box({\n                    canvas,\n                    context,\n                    x: p[0],\n                    y: p[1],\n                    width: grid.columnWidth,\n                    height: grid.rowHeight,\n                })\n            );\n        });\n\n        let freq = 0.0001;\n\n        boxes.forEach((b, bidx) => {\n            const particles = [];\n            const clr = bidx % 2 === 0 ? 0 : 1;\n            b.backgroundColor = bicPenBlue.clone(); // boxbg[clr];\n            b.flowField = (x, y, t) => simplexNoise3d(x, y, t, freq);\n            freq += 0.0005;\n            for (let i = 0; i < numParticles; i++) {\n                const props = createRandomParticleValues(canvas);\n                const coords = b.translateInto(b.randomPointInside('normal'));\n                props.x = coords.x;\n                props.y = coords.y;\n                props.velocityX = 0;\n                props.velocityY = 0;\n                props.radius = 1;\n                props.color = bidx <= 4 ? bicPenBlue.clone() : paperWhite.clone(); // tinycolor(boxfg[clr]).clone().setAlpha(0.5);\n                particles.push(new Particle(props));\n            }\n            b.children = particles;\n\n            // texturizeRect(context)(b.x, b.y, b.width, b.height, b.backgroundColor, bidx * 3 + 1, 'circles2');\n            stippleRect(context)(b.x, b.y, b.width, b.height, b.backgroundColor, bidx + 1, 'circles2');\n        });\n\n        // boxes.forEach((b) => {\n        //     b.fill();\n        // });\n\n        return -1;\n    };\n\n    const draw = ({ canvas, context }) => {\n        boxes.forEach((box) => {\n            box.createClip();\n            box.children.forEach((particle) => {\n                const theta = box.flowField(particle.x, particle.y, time);\n                const force = uvFromAngle(theta);\n                particle.applyForce(force);\n                particle.velocity = particle.velocity.limit(1);\n                particle.updatePosWithVelocity();\n                particle.acceleration = new Vector(0, 0);\n                box.particleEdgeWrap(particle);\n                pixel(context)(particle.x, particle.y, particle.color, 'circle', 0.5);\n            });\n            box.removeClip();\n        });\n        time += 0.1;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport { mapRange } from '../lib/math';\nimport { background, pixel } from '../lib/canvas';\nimport { ratio, scale, orientation } from '../lib/sketch';\nimport { paperWhite } from '../lib/palettes';\nimport { Bitmap } from '../lib/Bitmap';\nimport sourcePng from '../../media/images/alexander-krivitskiy-2wOEPBkaH7o-unsplash.png';\n\n/*\nhttps://larrycarlson.com/collections/wavy-art-prints\n */\n\nexport const larrycarlson02 = () => {\n    const config = {\n        name: 'larrycarlson2',\n        ratio: ratio.square,\n        // ratio: ratio.poster,\n        // orientation: orientation.portrait,\n        scale: scale.standard,\n    };\n\n    let ctx;\n    let canvasWidth;\n    let canvasHeight;\n    let canvasCenterX;\n    let canvasCenterY;\n    let centerRadius;\n    let imageWidth;\n    let imageHeight;\n    let startX;\n    let maxX;\n    let startY;\n    let maxY;\n    const margin = 50;\n    const ribbonThickness = 10;\n\n    const backgroundColor = paperWhite.clone();\n    const image = new Bitmap(sourcePng);\n\n    const colorImageTop = tinycolor('#ffeb00');\n    const colorImageBottom = tinycolor('#01ff4f');\n\n    const colorLinesTop = tinycolor('#ff01d7');\n    const colorLinesBottom = tinycolor('#5600cc');\n\n    const setup = ({ canvas, context }) => {\n        image.init(canvas, context);\n\n        ctx = context;\n        canvasWidth = canvas.width;\n        canvasHeight = canvas.height;\n        canvasCenterX = canvas.width / 2;\n        canvasCenterY = canvas.height / 2;\n        centerRadius = canvas.height / 4;\n\n        imageWidth = canvas.width - margin * 2;\n        imageHeight = canvas.height - margin * 2;\n\n        startX = margin;\n        maxX = canvas.width - margin;\n        startY = margin;\n        maxY = canvas.height - margin;\n\n        background(canvas, context)(backgroundColor);\n    };\n\n    // const circleX = (theta, amp, freq) => Math.cos(theta / freq) * amp;\n    // const circleY = (theta, amp, freq) => Math.sin(theta / freq) * amp;\n\n    const renderImage = () => {\n        const resolution = ribbonThickness / 2;\n        const border = margin / -2;\n        // const freq = 30;\n        // const amp = 1;\n        // let theta = 0;\n        for (let x = startX + border; x < maxX - border; x += resolution) {\n            for (let y = startY + border; y < maxY - border; y += resolution) {\n                const pxcolor = image.pixelColorFromCanvas(x, y);\n                const pxbrightness = pxcolor.getBrightness();\n                const bright = mapRange(128, 255, 0, 50, pxbrightness);\n\n                const color = tinycolor.mix(colorImageTop, colorImageBottom, mapRange(startY, maxY, 0, 100, y));\n\n                const size = resolution;\n\n                if (pxbrightness > 128) color.brighten(bright);\n\n                if (pxbrightness >= 70 && pxbrightness <= 100) {\n                    color.spin(30);\n                }\n\n                if (pxbrightness >= 120 && pxbrightness <= 220) {\n                    // color.spin(-30);\n                }\n\n                // const ox = circleX(theta, amp, freq) + x;\n                // const oy = circleY(theta, amp, freq) + y;\n\n                pixel(ctx)(x, y, color, 'circle', size);\n\n                // theta += 0.25;\n            }\n        }\n    };\n\n    const drawRibbonPoint = (point, isOtherSide) => {\n        const x = point[0];\n        const y = point[1];\n\n        // -2 +1 to keep from overlapping other ribbons and give it a min thickness of 1\n        const size = image.sizeFromPixelBrightness(x, y, ribbonThickness - 2, 128, 255) + 0.75;\n        let jitterX = 0; // size;\n        // let jitterY = 0;\n\n        if (isOtherSide) {\n            jitterX = size * -1;\n            // jitterY = size * -0.25;\n        }\n\n        ctx.lineTo(x + jitterX, y);\n    };\n\n    const drawRibbon = (sideA, color, stroke = false) => {\n        const rColor = tinycolor(color).clone();\n        const gradient = ctx.createLinearGradient(0, startY, 0, maxY);\n        gradient.addColorStop(0, colorLinesTop.toRgbString());\n        gradient.addColorStop(1, colorLinesBottom.toRgbString());\n\n        ctx.beginPath();\n        ctx.moveTo(sideA[0], sideA[0]);\n        sideA.forEach((w) => {\n            drawRibbonPoint(w, false);\n        });\n        sideA.reverse().forEach((w) => {\n            drawRibbonPoint(w, true);\n        });\n        ctx.closePath();\n\n        if (stroke) {\n            ctx.strokeStyle = rColor.darken(70).toRgbString();\n            ctx.lineWidth = 0.75;\n            ctx.stroke();\n        }\n\n        ctx.fillStyle = gradient;\n        ctx.fill();\n    };\n\n    const renderPoints = (points) => {\n        points.forEach((line) => {\n            if (line.length) {\n                drawRibbon(line, 'red', false, 0);\n            }\n        });\n    };\n\n    /*\n    https://www.desmos.com/calculator/rzwar3xxpy\n    y-x = amp * Math.sin((y+x)/freq)\n     */\n    const getPointsDiagSinWave = (xoffset, yoffset) => {\n        const freq = 40; // 30\n        const amp = 15; // 5\n        let y = 0;\n        const a = Math.PI / 3; // angle of the wave, 1 is 45\n        const points = [];\n        for (let x = 0; x < canvasWidth; x++) {\n            const b = x; // Math.sin(x / Math.PI) * 2;\n            // y = amp * Math.sin((y + b) / freq) + x * a;\n            y = amp * Math.sin((y * a + b) / freq) + x * a;\n            const px = x + xoffset;\n            const py = y + yoffset;\n            if (px > startX && px < maxX && py > startY && py < maxY) {\n                points.push([px, py]);\n            }\n        }\n        return points;\n    };\n\n    const draw = ({ canvas, context }) => {\n        const points = [];\n\n        renderImage();\n\n        for (let x = (imageWidth + 100) * -1; x < imageWidth * 2; x += ribbonThickness) {\n            points.push(getPointsDiagSinWave(x, 0));\n        }\n\n        renderPoints(points);\n\n        return -1;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import { variation1 } from './released/variation1';\nimport { variation2 } from './released/variation2';\nimport { domokun } from './released/domokun';\nimport { variation4 } from './released/variation4';\nimport { variation5 } from './released/variation5';\nimport { variation6 } from './released/variation6';\nimport { rainbowRakeOrbit } from './released/rainbow-rake-orbit-mouse';\nimport { threeAttractors } from './released/threeAttractors';\nimport { hiImage01 } from './released/hiImage01';\nimport { windLines } from './released/windLines';\nimport { waves01 } from './released/waves01';\nimport { lissajous01 } from './released/lissajous01';\nimport { flowFieldParticles } from './released/flow-field-particles';\nimport { flowFieldArcs } from './released/flow-field-arcs';\nimport { flowFieldImage } from './released/flow-field-image';\nimport { radialNoise } from './released/radial-noise';\nimport { flowFieldRibbons } from './released/flow-field-ribbons';\nimport { flowFieldRibbons2 } from './released/flow-field-ribbons-2';\nimport { shadedBoxes } from './released/shaded-boxes';\nimport { larrycarlson02 } from './released/larrycarlson02';\n\nexport const variationsIndex = {\n    1: {\n        note: 'Particles are attracted to the pointer. Press to repel.',\n        sketch: variation1,\n    },\n    2: {\n        note: 'Press to increase speed.',\n        sketch: variation2,\n    },\n    3: {\n        note: 'Particles are repelled from the pointer. Press to attract.',\n        sketch: domokun,\n    },\n    4: {\n        note: 'Particles are repelled from the pointer. Press to attract.',\n        sketch: variation4,\n    },\n    5: {\n        note: 'Sit back and watch.',\n        sketch: variation5,\n    },\n    6: {\n        note: 'Move the mouse',\n        sketch: variation6,\n    },\n    7: {\n        note: 'Rakes orbit center and the mouse. Click to repel.',\n        sketch: rainbowRakeOrbit,\n    },\n    8: {\n        note: 'One attractor in the center, two on the sides.',\n        sketch: threeAttractors,\n    },\n    9: {\n        note: 'Say Hi',\n        sketch: hiImage01,\n    },\n    10: {\n        note: 'In the breeze',\n        sketch: windLines,\n    },\n    11: {\n        note: 'Inspired by Churn, Kenny Vaden https://www.reddit.com/r/generative/comments/lq8r11/churn_r_code/',\n        sketch: waves01,\n    },\n    12: {\n        note: 'Experimenting with rose shapes. Refresh for new randomized set.',\n        sketch: lissajous01,\n    },\n    13: {\n        note: 'Particles and fibers flowing with 3d simplex noise.',\n        sketch: flowFieldParticles,\n    },\n    14: {\n        note: 'Arcs flowing with 3d simplex noise.',\n        sketch: flowFieldArcs,\n    },\n    15: {\n        note: 'Rendering an image with flow fields. Photo by Francesca Zama https://unsplash.com/photos/OFjnQOf1pPA',\n        sketch: flowFieldImage,\n    },\n    16: {\n        note: 'Simplex noise going around ...',\n        sketch: radialNoise,\n    },\n    17: {\n        note: 'Ribbons attracted to an attractor',\n        sketch: flowFieldRibbons,\n    },\n    18: {\n        note: 'Ribbons attracted to an attractor',\n        sketch: flowFieldRibbons2,\n    },\n    19: {\n        note: 'Shaded boxes with flow field particles.',\n        sketch: shadedBoxes,\n    },\n    20: {\n        note: 'Render an image in the wavy art style of Larry Carlson',\n        sketch: larrycarlson02,\n    },\n};\n","/*\nExplorations with generative code\n*/\n\nimport normalize from 'normalize.css';\nimport { sketch } from './lib/sketch';\nimport { variationsIndex } from './variationsIndex';\n\nimport { shadedBoxes } from './released/shaded-boxes';\nimport { larrycarlson02 } from './released/larrycarlson02';\n\nconst experimentalVariation = undefined;\n// const experimentalVariation = larrycarlson02;\n\nconst s = sketch();\n\nconst saveCanvasCapture = (_) => {\n    console.log('Saving capture');\n    const imageURI = s.canvas().toDataURL('image/png');\n    document.getElementById('download').setAttribute('download', `${s.variationName()}.png`);\n    document.getElementById('download').href = imageURI;\n};\n\ndocument.getElementById('download').addEventListener('click', saveCanvasCapture);\nwindow.addEventListener('keydown', (e) => {\n    if (e.key === 's') {\n        document.getElementById('download').click();\n    }\n});\n\nconst setNote = (note) => (document.getElementById('note').innerText = note);\n\nconst getQueryVariable = (variable) => {\n    const query = window.location.search.substring(1);\n    const vars = query.split('&');\n    for (let i = 0; i < vars.length; i++) {\n        const pair = vars[i].split('=');\n        if (pair[0] === variable) {\n            return pair[1];\n        }\n    }\n    return false;\n};\n\nlet variationKey = getQueryVariable('variation');\nconst variationKeys = Object.keys(variationsIndex);\nvariationKey = variationKey || variationKeys[variationKeys.length - 1];\n\nif (variationsIndex.hasOwnProperty(variationKey) && experimentalVariation === undefined) {\n    const vToRun = variationsIndex[variationKey];\n    setNote(vToRun.note);\n    s.run(vToRun.sketch);\n} else {\n    setNote('Not a valid variation!');\n}\n\nif (experimentalVariation) {\n    s.run(experimentalVariation);\n}\n"]}