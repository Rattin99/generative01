{"version":3,"sources":["node_modules/tinycolor2/tinycolor.js","node_modules/seed-random/index.js","node_modules/simplex-noise/simplex-noise.js","node_modules/defined/index.js","node_modules/canvas-sketch-util/random.js","scripts/lib/Vector.js","scripts/lib/math.js","scripts/lib/canvas.js","scripts/lib/utils.js","scripts/lib/sketch.js","scripts/lib/Particle.js","scripts/released/variation1.js","scripts/released/variation2.js","scripts/released/domokun.js","scripts/released/variation4.js","scripts/released/variation5.js","scripts/released/variation6.js","scripts/released/rainbow-rake-orbit-mouse.js","scripts/released/threeAttractors.js","scripts/released/hiImage01.js","node_modules/nice-color-palettes/100.json","scripts/lib/palettes.js","scripts/lib/Timeline.js","scripts/released/windLines.js","scripts/released/waves01.js","scripts/released/lissajous01.js","scripts/lib/attractors.js","scripts/released/flow-field-particles.js","scripts/released/flow-field-arcs.js","scripts/lib/Bitmap.js","scripts/released/flow-field-image.js","scripts/released/radial-noise.js","scripts/released/flow-field-ribbons.js","scripts/released/flow-field-ribbons-2.js","scripts/lib/Point.js","scripts/lib/Box.js","scripts/released/shaded-boxes.js","scripts/released/larrycarlson01.js","scripts/variationsIndex.js","scripts/index.js"],"names":["Vector","x","y","z","prototype","negative","add","v","sub","mult","div","equals","dot","cross","length","Math","sqrt","mag","magSq","m","setMag","c","r","normalize","unit","divide","min","max","limit","cm","toAngles","theta","atan2","phi","asin","angleTo","a","acos","toArray","n","slice","clone","init","b","subtract","multiply","fromAngles","cos","sin","randomDirection","random","PI","lerp","fraction","fromArray","angleBetween","Ï€","TAU","abs","tan","pow","round","floor","setSeed","getRandomSeed","console","log","getSeed","golden","fibonacci","snapNumber","snap","houghQuantize","numAngles","quantize","round2","num","Number","EPSILON","setRandomSeed","s","randomNormalBM","u","value","randomNormalBM2","skew","randomNormalNumberBetween","randomNormalWholeBetween","randomNumberBetween","valueNonZero","randomWholeBetween","randomNumberBetweenMid","randomSign","randomBoolean","randomChance","chance","oneOf","arry","lowest","reduce","acc","highest","createRandomNumberArray","len","Array","from","map","loopingValue","t","pingPontValue","pointOnCircle","val","normalizeInverse","clamp","invlerp","mapRange","x1","y1","x2","y2","toSinValue","mapToTau","start","end","marginify","margin","width","height","pointDistance","pointA","pointB","dx","dy","pointRotateCoord","point","angle","pointAngleFromVelocity","velocityX","velocityY","aFromVector","uvFromAngle","radiansToDegrees","rad","degreesToRadians","deg","scalePointToCanvas","canvasWidth","canvasHeight","zoomFactor","create2dNoise","amplitude","frequency","noise2D","create2dNoiseAbs","create3dNoise","noise3D","create3dNoiseAbs","randomPointAround","range","radius","chaikin","arr","l","smooth","i","flat","createCirclePoints","offsetX","offsetY","diameter","steps","sx","sy","points","push","createGridPointsXY","xMargin","yMargin","columns","rows","gridPoints","colStep","rowStep","col","row","columnWidth","rowHeight","createGridCellsXY","gutter","ceil","createGridPointsUV","rotation","position","isHiDPI","contextScale","resizeCanvas","canvas","context","scale","window","devicePixelRatio","style","clearCanvas","_","clearRect","fillCanvas","opacity","color","fillStyle","fillRect","background","toRgbString","resetStyles","strokeStyle","lineWidth","setLineDash","lineCap","sharpLines","translate","blendMode","mode","globalCompositeOperation","filter","f","pixel","size","beginPath","arc","fill","drawParticlePoint","setStokeColor","drawLine","strokeWidth","linecap","moveTo","lineTo","stroke","drawLineAngle","vect","drawCircle","drawCircleFilled","drawRect","w","h","rect","drawRectFilled","drawSquareFilled","drawTriangleFilled","half","drawQuadRectFilled","mx","my","quadraticCurveTo","drawRoundRectFilled","corner","textStyles","sansHelvetica","monoCourier","monoLucidia","serifGeorgia","default","small","drawTextFilled","text","font","fillText","measureText","setTextAlignLeftTop","textAlign","textBaseline","setTextAlignAllCenter","drawRake","spacing","drawSpikeCircle","spikes","spikeLength","splatter","amount","xoff","yoff","stippleRect","save","region","Path2D","clip","strokeColor","j","tx","ty","tx2","ty2","restore","texturizeRect","fillamount","drawRotatedParticle","ctx","drawFn","particle","pSaveX","pSaveY","rotate","heading","args","connectParticles","pArray","proximity","useAlpha","pA","pB","distance","pColor","setAlpha","toHslString","drawPointTrail","trailLen","xHistory","aFade","alpha","sFade","startX","startY","yHistory","drawTestPoint","drawParticleVectors","vmult","vVector","aVector","vel","drawMouse","undefined","drawAttractor","mass","g","renderField","fn","cell","mid","defaultValue","obj","key","hasOwnProperty","orientation","portrait","landscape","ratio","letter","poster","square","auto","standard","hidpi","sketch","mouse","currentVariationFn","currentVariationRes","animationId","isDown","hasStarted","fps","document","getElementById","getContext","mouseDown","evt","mouseMove","canvasFrame","getBoundingClientRect","mouseUp","mouseOut","addEventListener","applyCanvasSize","run","variation","config","innerWidth","innerHeight","newWidth","newHeight","cfgOrientation","cfgRatio","cfgScale","aSide","bSide","rendering","lastAnimationFrameTime","targetFpsInterval","startSketch","removeEventListener","setup","Date","now","requestAnimationFrame","renderAtFps","elapsed","draw","render","stop","cancelAnimationFrame","variationName","seed","name","MAX_COORD_HISTORY","limitArrayLen","arrLength","splice","Particle","values","initValues","index","accelerationX","accelerationY","lifetime","updateFn","colorFn","rest","props","oX","oY","res","warn","unshift","psCanvasRandom","createRandomParticleValues","coords","updatePosWithVelocity","applyForce","fVect","fV","aV","pV","friction","mu","normal","vfriction","drag","coefficent","velUnit","speed","vdrag","attract","affectDist","dir","distanceSq","strength","force","edgeBounce","reverseVelocityX","reverseVelocityY","edgeWrap","gravityPoint","forceDirectionX","forceDirectionY","tempX","tempY","avoidPoint","attractPoint","pointPush","variation1","numParticles","canvasCenterX","canvasCenterY","centerRadius","particlesArray","variation2","gravity","decay","tweenDamp","intensity","newValues","newCoords","getImageDataFromImage","image","drawImage","getImageData","getImageDataColor","imageData","data","domokun","png","Image","src","domokunPng","imageZoomFactor","pxColor","pX","pY","variation4","circles","centerX","centerY","variation5","variation6","hue","rainbowRakeOrbit","attractor","threeAttractors","attractorDist","leftattractor","midattractor","rightattractor","hiImage01","sourcePng","particleColor","asTinyColor","brightest","colors","getBrightness","darkest","bicPenBlue","paperWhite","warmWhite","warmPink","coolGreyDark","warmGreyDark","palettes","greyWarm","greyCool","pop","retro_sunset","vapor_wave","thought_provoking","nicePalette","nicepalettes","palette","Object","keys","hslFromRange","Timeline","loop","duration","totalLoopFrames","iterations","time","playhead","frame","elapsedLoops","startTime","windLines","counter","grid","timeline","forEach","wave","startvect","onFrame","createWave","noise","cfrequency","camplitude","drawWaveLine","startx","endx","yorigin","topWave","bottomWave","dots","currentX","currentY","waveColor","lineheight","gradient","createLinearGradient","addColorStop","darken","xstep","dotColor","rnd","lighten","waves01","canvasMiddle","waveRows","maxY","waves","incrementY","cosOffset","createWavesRow","idx","distFromCenter","top","bottom","buffer","colorBackground","tinycolor","mix","spin","brighten","Curve","originX","originY","xa","xb","ya","yb","lissajous01","curves","colorCurve","colorText","desaturate","roseX","curve","k","roseY","tick","simplexNoise2d","simplexNoise3d","diagLines","sinField","d","cliffordAttractor","jongAttractor","flowAtPoint","canvasMidX","canvasMidY","flowFieldParticles","createRandomParticle","drawPixel","pcolor","maxSize","sNoise3d","drawFibers","clr","drawParticles","thick","startR","endR","circle","line","flowFieldArcs","arcColor","lineColor","Bitmap","scaleX","scaleY","scaley","clear","pixelColorRaw","pixelAverageGrey","pixelColor","pixelTheta","low","brightness","pixelColorFromCanvas","flowFieldImage","backgroundColor","imageFlow","pixelThetaFromCanvas","drawParticle","fromCenter","imagePixelColor","imagePixelBrightness","hslColor","radialNoise","maxRadius","radiusScale","currentRadiusSize","history","imageColor","circleX","circleY","ox","oy","radScaled","radians","monoColor","offs","drawRibbonPoint","thickness","drawRibbon","sideA","sideB","starty","endy","rColor","flowFieldRibbons","createRibbon","fieldFn","vlimit","clifford","ribbonThickness","rpoint","onCircle","reverse","drawRibbonSegment","segStartX","segStartY","segEndY","saturate","segments","segmentData","left","flowFieldRibbons2","ribbonLen","maxItterations","currentItteration","Point","defaultMP","right","defaultFlow","boxIndex","Box","children","psize","padding","flowField","translateX","translateY","distribution","edgeBuffer","isInside","np","shadedBoxes","boxes","boxwhite","gridMargin","gridGutter","p","freq","bidx","particles","translateInto","randomPointInside","box","createClip","particleEdgeWrap","removeClip","larrycarlson01","imageWidth","maxX","colorImageTop","colorImageBottom","colorLinesTop","colorLinesBottom","amp","plot","sizeFromPixelBrightness","plotDiagSinWave","xoffset","yoffset","resolution","pxcolor","pxbrightness","renderImage","variationsIndex","note","experimentalVariation","saveCanvasCapture","imageURI","toDataURL","setAttribute","href","e","click","setNote","innerText","getQueryVariable","variable","query","vars","location","search","substring","split","pair","variationKey","variationKeys","vToRun"],"mappings":"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AAA,SACA,WAAA,SACA,UAAA,SACA,MAAA,SACA,eAAA,SACA,SAAA,SACA,QAAA,SACA,KAAA,MACA,SAAA,SACA,SAAA,SACA,cAAA,SACA,SAAA,SACA,UAAA,SACA,SAAA,SACA,UAAA,SACA,YAAA,SACA,eAAA,SACA,WAAA,SACA,WAAA,SACA,QAAA,SACA,WAAA,SACA,aAAA,SACA,cAAA,SACA,cAAA,SACA,cAAA,SACA,cAAA,SACA,WAAA,SACA,SAAA,SACA,YAAA,SACA,QAAA,SACA,QAAA,SACA,WAAA,SACA,UAAA,SACA,YAAA,SACA,YAAA,SACA,QAAA,MACA,UAAA,SACA,WAAA,SACA,KAAA,SACA,UAAA,SACA,KAAA,SACA,MAAA,SACA,YAAA,SACA,KAAA,SACA,SAAA,SACA,QAAA,SACA,UAAA,SACA,OAAA,SACA,MAAA,SACA,MAAA,SACA,SAAA,SACA,cAAA,SACA,UAAA,SACA,aAAA,SACA,UAAA,SACA,WAAA,SACA,UAAA,SACA,qBAAA,SACA,UAAA,SACA,WAAA,SACA,UAAA,SACA,UAAA,SACA,YAAA,SACA,cAAA,SACA,aAAA,SACA,eAAA,MACA,eAAA,MACA,eAAA,SACA,YAAA,SACA,KAAA,MACA,UAAA,SACA,MAAA,SACA,QAAA,MACA,OAAA,SACA,iBAAA,SACA,WAAA,SACA,aAAA,SACA,aAAA,SACA,eAAA,SACA,gBAAA,SACA,kBAAA,SACA,gBAAA,SACA,gBAAA,SACA,aAAA,SACA,UAAA,SACA,UAAA,SACA,SAAA,SACA,YAAA,SACA,KAAA,SACA,QAAA,SACA,MAAA,SACA,UAAA,SACA,OAAA,SACA,UAAA,SACA,OAAA,SACA,cAAA,SACA,UAAA,SACA,cAAA,SACA,cAAA,SACA,WAAA,SACA,UAAA,SACA,KAAA,SACA,KAAA,SACA,KAAA,SACA,WAAA,SACA,OAAA,SACA,cAAA,SACA,IAAA,MACA,UAAA,SACA,UAAA,SACA,YAAA,SACA,OAAA,SACA,WAAA,SACA,SAAA,SACA,SAAA,SACA,OAAA,SACA,OAAA,SACA,QAAA,SACA,UAAA,SACA,UAAA,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","file":"scripts.cea2bfd0.js","sourceRoot":"..","sourcesContent":["// TinyColor v1.4.2\n// https://github.com/bgrins/TinyColor\n// Brian Grinstead, MIT License\n\n(function(Math) {\n\nvar trimLeft = /^\\s+/,\n    trimRight = /\\s+$/,\n    tinyCounter = 0,\n    mathRound = Math.round,\n    mathMin = Math.min,\n    mathMax = Math.max,\n    mathRandom = Math.random;\n\nfunction tinycolor (color, opts) {\n\n    color = (color) ? color : '';\n    opts = opts || { };\n\n    // If input is already a tinycolor, return itself\n    if (color instanceof tinycolor) {\n       return color;\n    }\n    // If we are called as a function, call using new instead\n    if (!(this instanceof tinycolor)) {\n        return new tinycolor(color, opts);\n    }\n\n    var rgb = inputToRGB(color);\n    this._originalInput = color,\n    this._r = rgb.r,\n    this._g = rgb.g,\n    this._b = rgb.b,\n    this._a = rgb.a,\n    this._roundA = mathRound(100*this._a) / 100,\n    this._format = opts.format || rgb.format;\n    this._gradientType = opts.gradientType;\n\n    // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n    if (this._r < 1) { this._r = mathRound(this._r); }\n    if (this._g < 1) { this._g = mathRound(this._g); }\n    if (this._b < 1) { this._b = mathRound(this._b); }\n\n    this._ok = rgb.ok;\n    this._tc_id = tinyCounter++;\n}\n\ntinycolor.prototype = {\n    isDark: function() {\n        return this.getBrightness() < 128;\n    },\n    isLight: function() {\n        return !this.isDark();\n    },\n    isValid: function() {\n        return this._ok;\n    },\n    getOriginalInput: function() {\n      return this._originalInput;\n    },\n    getFormat: function() {\n        return this._format;\n    },\n    getAlpha: function() {\n        return this._a;\n    },\n    getBrightness: function() {\n        //http://www.w3.org/TR/AERT#color-contrast\n        var rgb = this.toRgb();\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    getLuminance: function() {\n        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        var rgb = this.toRgb();\n        var RsRGB, GsRGB, BsRGB, R, G, B;\n        RsRGB = rgb.r/255;\n        GsRGB = rgb.g/255;\n        BsRGB = rgb.b/255;\n\n        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}\n        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}\n        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}\n        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);\n    },\n    setAlpha: function(value) {\n        this._a = boundAlpha(value);\n        this._roundA = mathRound(100*this._a) / 100;\n        return this;\n    },\n    toHsv: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\n    },\n    toHsvString: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\n        return (this._a == 1) ?\n          \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\n          \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\n    },\n    toHsl: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\n    },\n    toHslString: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\n        return (this._a == 1) ?\n          \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\n          \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\n    },\n    toHex: function(allow3Char) {\n        return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function(allow3Char) {\n        return '#' + this.toHex(allow3Char);\n    },\n    toHex8: function(allow4Char) {\n        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n    },\n    toHex8String: function(allow4Char) {\n        return '#' + this.toHex8(allow4Char);\n    },\n    toRgb: function() {\n        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\n    },\n    toRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\n          \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\n    },\n    toPercentageRgb: function() {\n        return { r: mathRound(bound01(this._r, 255) * 100) + \"%\", g: mathRound(bound01(this._g, 255) * 100) + \"%\", b: mathRound(bound01(this._b, 255) * 100) + \"%\", a: this._a };\n    },\n    toPercentageRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" :\n          \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n    },\n    toName: function() {\n        if (this._a === 0) {\n            return \"transparent\";\n        }\n\n        if (this._a < 1) {\n            return false;\n        }\n\n        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function(secondColor) {\n        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n        var secondHex8String = hex8String;\n        var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n\n        if (secondColor) {\n            var s = tinycolor(secondColor);\n            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n        }\n\n        return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\n    },\n    toString: function(format) {\n        var formatSet = !!format;\n        format = format || this._format;\n\n        var formattedString = false;\n        var hasAlpha = this._a < 1 && this._a >= 0;\n        var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n\n        if (needsAlphaFormat) {\n            // Special case for \"transparent\", all other non-alpha formats\n            // will return rgba when there is transparency.\n            if (format === \"name\" && this._a === 0) {\n                return this.toName();\n            }\n            return this.toRgbString();\n        }\n        if (format === \"rgb\") {\n            formattedString = this.toRgbString();\n        }\n        if (format === \"prgb\") {\n            formattedString = this.toPercentageRgbString();\n        }\n        if (format === \"hex\" || format === \"hex6\") {\n            formattedString = this.toHexString();\n        }\n        if (format === \"hex3\") {\n            formattedString = this.toHexString(true);\n        }\n        if (format === \"hex4\") {\n            formattedString = this.toHex8String(true);\n        }\n        if (format === \"hex8\") {\n            formattedString = this.toHex8String();\n        }\n        if (format === \"name\") {\n            formattedString = this.toName();\n        }\n        if (format === \"hsl\") {\n            formattedString = this.toHslString();\n        }\n        if (format === \"hsv\") {\n            formattedString = this.toHsvString();\n        }\n\n        return formattedString || this.toHexString();\n    },\n    clone: function() {\n        return tinycolor(this.toString());\n    },\n\n    _applyModification: function(fn, args) {\n        var color = fn.apply(null, [this].concat([].slice.call(args)));\n        this._r = color._r;\n        this._g = color._g;\n        this._b = color._b;\n        this.setAlpha(color._a);\n        return this;\n    },\n    lighten: function() {\n        return this._applyModification(lighten, arguments);\n    },\n    brighten: function() {\n        return this._applyModification(brighten, arguments);\n    },\n    darken: function() {\n        return this._applyModification(darken, arguments);\n    },\n    desaturate: function() {\n        return this._applyModification(desaturate, arguments);\n    },\n    saturate: function() {\n        return this._applyModification(saturate, arguments);\n    },\n    greyscale: function() {\n        return this._applyModification(greyscale, arguments);\n    },\n    spin: function() {\n        return this._applyModification(spin, arguments);\n    },\n\n    _applyCombination: function(fn, args) {\n        return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function() {\n        return this._applyCombination(analogous, arguments);\n    },\n    complement: function() {\n        return this._applyCombination(complement, arguments);\n    },\n    monochromatic: function() {\n        return this._applyCombination(monochromatic, arguments);\n    },\n    splitcomplement: function() {\n        return this._applyCombination(splitcomplement, arguments);\n    },\n    triad: function() {\n        return this._applyCombination(triad, arguments);\n    },\n    tetrad: function() {\n        return this._applyCombination(tetrad, arguments);\n    }\n};\n\n// If input is an object, force 1 into \"1.0\" to handle ratios properly\n// String input requires \"1.0\" as input, so 1 will be treated as 1\ntinycolor.fromRatio = function(color, opts) {\n    if (typeof color == \"object\") {\n        var newColor = {};\n        for (var i in color) {\n            if (color.hasOwnProperty(i)) {\n                if (i === \"a\") {\n                    newColor[i] = color[i];\n                }\n                else {\n                    newColor[i] = convertToPercentage(color[i]);\n                }\n            }\n        }\n        color = newColor;\n    }\n\n    return tinycolor(color, opts);\n};\n\n// Given a string or object, convert that input to RGB\n// Possible string inputs:\n//\n//     \"red\"\n//     \"#f00\" or \"f00\"\n//     \"#ff0000\" or \"ff0000\"\n//     \"#ff000000\" or \"ff000000\"\n//     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n//     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n//     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n//     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n//     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n//     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n//     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n//\nfunction inputToRGB(color) {\n\n    var rgb = { r: 0, g: 0, b: 0 };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n\n    if (typeof color == \"string\") {\n        color = stringInputToObject(color);\n    }\n\n    if (typeof color == \"object\") {\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n            rgb = rgbToRgb(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n            s = convertToPercentage(color.s);\n            v = convertToPercentage(color.v);\n            rgb = hsvToRgb(color.h, s, v);\n            ok = true;\n            format = \"hsv\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n            s = convertToPercentage(color.s);\n            l = convertToPercentage(color.l);\n            rgb = hslToRgb(color.h, s, l);\n            ok = true;\n            format = \"hsl\";\n        }\n\n        if (color.hasOwnProperty(\"a\")) {\n            a = color.a;\n        }\n    }\n\n    a = boundAlpha(a);\n\n    return {\n        ok: ok,\n        format: color.format || format,\n        r: mathMin(255, mathMax(rgb.r, 0)),\n        g: mathMin(255, mathMax(rgb.g, 0)),\n        b: mathMin(255, mathMax(rgb.b, 0)),\n        a: a\n    };\n}\n\n\n// Conversion Functions\n// --------------------\n\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n// `rgbToRgb`\n// Handle bounds / percentage checking to conform to CSS color spec\n// <http://www.w3.org/TR/css3-color/>\n// *Assumes:* r, g, b in [0, 255] or [0, 1]\n// *Returns:* { r, g, b } in [0, 255]\nfunction rgbToRgb(r, g, b){\n    return {\n        r: bound01(r, 255) * 255,\n        g: bound01(g, 255) * 255,\n        b: bound01(b, 255) * 255\n    };\n}\n\n// `rgbToHsl`\n// Converts an RGB color value to HSL.\n// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n// *Returns:* { h, s, l } in [0,1]\nfunction rgbToHsl(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, l = (max + min) / 2;\n\n    if(max == min) {\n        h = s = 0; // achromatic\n    }\n    else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n\n        h /= 6;\n    }\n\n    return { h: h, s: s, l: l };\n}\n\n// `hslToRgb`\n// Converts an HSL color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nfunction hslToRgb(h, s, l) {\n    var r, g, b;\n\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n\n    function hue2rgb(p, q, t) {\n        if(t < 0) t += 1;\n        if(t > 1) t -= 1;\n        if(t < 1/6) return p + (q - p) * 6 * t;\n        if(t < 1/2) return q;\n        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n        return p;\n    }\n\n    if(s === 0) {\n        r = g = b = l; // achromatic\n    }\n    else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1/3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1/3);\n    }\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHsv`\n// Converts an RGB color value to HSV\n// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n// *Returns:* { h, s, v } in [0,1]\nfunction rgbToHsv(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, v = max;\n\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n\n    if(max == min) {\n        h = 0; // achromatic\n    }\n    else {\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, v: v };\n}\n\n// `hsvToRgb`\n// Converts an HSV color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\n function hsvToRgb(h, s, v) {\n\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n\n    var i = Math.floor(h),\n        f = h - i,\n        p = v * (1 - s),\n        q = v * (1 - f * s),\n        t = v * (1 - (1 - f) * s),\n        mod = i % 6,\n        r = [v, q, p, p, t, v][mod],\n        g = [t, v, v, q, p, p][mod],\n        b = [p, p, t, v, v, q][mod];\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHex`\n// Converts an RGB color to hex\n// Assumes r, g, and b are contained in the set [0, 255]\n// Returns a 3 or 6 character hex\nfunction rgbToHex(r, g, b, allow3Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    // Return a 3 character hex if possible\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToHex`\n// Converts an RGBA color plus alpha transparency to hex\n// Assumes r, g, b are contained in the set [0, 255] and\n// a in [0, 1]. Returns a 4 or 8 character rgba hex\nfunction rgbaToHex(r, g, b, a, allow4Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16)),\n        pad2(convertDecimalToHex(a))\n    ];\n\n    // Return a 4 character hex if possible\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToArgbHex`\n// Converts an RGBA color to an ARGB Hex8 string\n// Rarely used, but required for \"toFilter()\"\nfunction rgbaToArgbHex(r, g, b, a) {\n\n    var hex = [\n        pad2(convertDecimalToHex(a)),\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    return hex.join(\"\");\n}\n\n// `equals`\n// Can be called with any tinycolor input\ntinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) { return false; }\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n};\n\ntinycolor.random = function() {\n    return tinycolor.fromRatio({\n        r: mathRandom(),\n        g: mathRandom(),\n        b: mathRandom()\n    });\n};\n\n\n// Modification Functions\n// ----------------------\n// Thanks to less.js for some of the basics here\n// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\nfunction desaturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction saturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction greyscale(color) {\n    return tinycolor(color).desaturate(100);\n}\n\nfunction lighten (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\nfunction brighten(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\n    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\n    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\n    return tinycolor(rgb);\n}\n\nfunction darken (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\n// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n// Values outside of this range will be wrapped into this range.\nfunction spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n}\n\n// Combination Functions\n// ---------------------\n// Thanks to jQuery xColor for some of the ideas behind these\n// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\nfunction complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n}\n\nfunction triad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction tetrad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\n        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\n    ];\n}\n\nfunction analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n\n    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\n        hsl.h = (hsl.h + part) % 360;\n        ret.push(tinycolor(hsl));\n    }\n    return ret;\n}\n\nfunction monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h, s = hsv.s, v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n\n    while (results--) {\n        ret.push(tinycolor({ h: h, s: s, v: v}));\n        v = (v + modification) % 1;\n    }\n\n    return ret;\n}\n\n// Utility Functions\n// ---------------------\n\ntinycolor.mix = function(color1, color2, amount) {\n    amount = (amount === 0) ? 0 : (amount || 50);\n\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n\n    var p = amount / 100;\n\n    var rgba = {\n        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,\n        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,\n        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,\n        a: ((rgb2.a - rgb1.a) * p) + rgb1.a\n    };\n\n    return tinycolor(rgba);\n};\n\n\n// Readability Functions\n// ---------------------\n// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\n// `contrast`\n// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\ntinycolor.readability = function(color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);\n};\n\n// `isReadable`\n// Ensure that foreground and background color combinations meet WCAG2 guidelines.\n// The third argument is an optional Object.\n//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n// If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\n// *Example*\n//    tinycolor.isReadable(\"#000\", \"#111\") => false\n//    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\ntinycolor.isReadable = function(color1, color2, wcag2) {\n    var readability = tinycolor.readability(color1, color2);\n    var wcag2Parms, out;\n\n    out = false;\n\n    wcag2Parms = validateWCAG2Parms(wcag2);\n    switch (wcag2Parms.level + wcag2Parms.size) {\n        case \"AAsmall\":\n        case \"AAAlarge\":\n            out = readability >= 4.5;\n            break;\n        case \"AAlarge\":\n            out = readability >= 3;\n            break;\n        case \"AAAsmall\":\n            out = readability >= 7;\n            break;\n    }\n    return out;\n\n};\n\n// `mostReadable`\n// Given a base color and a list of possible foreground or background\n// colors for that base, returns the most readable color.\n// Optionally returns Black or White if the most readable color is unreadable.\n// *Example*\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\ntinycolor.mostReadable = function(baseColor, colorList, args) {\n    var bestColor = null;\n    var bestScore = 0;\n    var readability;\n    var includeFallbackColors, level, size ;\n    args = args || {};\n    includeFallbackColors = args.includeFallbackColors ;\n    level = args.level;\n    size = args.size;\n\n    for (var i= 0; i < colorList.length ; i++) {\n        readability = tinycolor.readability(baseColor, colorList[i]);\n        if (readability > bestScore) {\n            bestScore = readability;\n            bestColor = tinycolor(colorList[i]);\n        }\n    }\n\n    if (tinycolor.isReadable(baseColor, bestColor, {\"level\":level,\"size\":size}) || !includeFallbackColors) {\n        return bestColor;\n    }\n    else {\n        args.includeFallbackColors=false;\n        return tinycolor.mostReadable(baseColor,[\"#fff\", \"#000\"],args);\n    }\n};\n\n\n// Big List of Colors\n// ------------------\n// <http://www.w3.org/TR/css3-color/#svg-color>\nvar names = tinycolor.names = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    burntsienna: \"ea7e5d\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    grey: \"808080\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    rebeccapurple: \"663399\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\"\n};\n\n// Make it easy to access colors via `hexNames[hex]`\nvar hexNames = tinycolor.hexNames = flip(names);\n\n\n// Utilities\n// ---------\n\n// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\nfunction flip(o) {\n    var flipped = { };\n    for (var i in o) {\n        if (o.hasOwnProperty(i)) {\n            flipped[o[i]] = i;\n        }\n    }\n    return flipped;\n}\n\n// Return a valid alpha value [0,1] with all invalid values being set to 1\nfunction boundAlpha(a) {\n    a = parseFloat(a);\n\n    if (isNaN(a) || a < 0 || a > 1) {\n        a = 1;\n    }\n\n    return a;\n}\n\n// Take input from [0, n] and return it as [0, 1]\nfunction bound01(n, max) {\n    if (isOnePointZero(n)) { n = \"100%\"; }\n\n    var processPercent = isPercentage(n);\n    n = mathMin(max, mathMax(0, parseFloat(n)));\n\n    // Automatically convert percentage into number\n    if (processPercent) {\n        n = parseInt(n * max, 10) / 100;\n    }\n\n    // Handle floating point rounding errors\n    if ((Math.abs(n - max) < 0.000001)) {\n        return 1;\n    }\n\n    // Convert into [0, 1] range if it isn't already\n    return (n % max) / parseFloat(max);\n}\n\n// Force a number between 0 and 1\nfunction clamp01(val) {\n    return mathMin(1, mathMax(0, val));\n}\n\n// Parse a base-16 hex value into a base-10 integer\nfunction parseIntFromHex(val) {\n    return parseInt(val, 16);\n}\n\n// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\nfunction isOnePointZero(n) {\n    return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\n}\n\n// Check to see if string passed in is a percentage\nfunction isPercentage(n) {\n    return typeof n === \"string\" && n.indexOf('%') != -1;\n}\n\n// Force a hex value to have 2 characters\nfunction pad2(c) {\n    return c.length == 1 ? '0' + c : '' + c;\n}\n\n// Replace a decimal with it's percentage value\nfunction convertToPercentage(n) {\n    if (n <= 1) {\n        n = (n * 100) + \"%\";\n    }\n\n    return n;\n}\n\n// Converts a decimal to a hex value\nfunction convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n}\n// Converts a hex value to a decimal\nfunction convertHexToDecimal(h) {\n    return (parseIntFromHex(h) / 255);\n}\n\nvar matchers = (function() {\n\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n    // <http://www.w3.org/TR/css3-values/#number-value>\n    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n    // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n\n    return {\n        CSS_UNIT: new RegExp(CSS_UNIT),\n        rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n        rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n        hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n        hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n        hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n        hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n    };\n})();\n\n// `isValidCSSUnit`\n// Take in a single string / number and check to see if it looks like a CSS unit\n// (see `matchers` above for definition).\nfunction isValidCSSUnit(color) {\n    return !!matchers.CSS_UNIT.exec(color);\n}\n\n// `stringInputToObject`\n// Permissive string parsing.  Take in a number of formats, and output an object\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\nfunction stringInputToObject(color) {\n\n    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\n    var named = false;\n    if (names[color]) {\n        color = names[color];\n        named = true;\n    }\n    else if (color == 'transparent') {\n        return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\n    }\n\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match;\n    if ((match = matchers.rgb.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3] };\n    }\n    if ((match = matchers.rgba.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsl.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3] };\n    }\n    if ((match = matchers.hsla.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsv.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3] };\n    }\n    if ((match = matchers.hsva.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n    }\n    if ((match = matchers.hex8.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            a: convertHexToDecimal(match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex6.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n    if ((match = matchers.hex4.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            a: convertHexToDecimal(match[4] + '' + match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex3.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n\n    return false;\n}\n\nfunction validateWCAG2Parms(parms) {\n    // return valid WCAG2 parms for isReadable.\n    // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n    var level, size;\n    parms = parms || {\"level\":\"AA\", \"size\":\"small\"};\n    level = (parms.level || \"AA\").toUpperCase();\n    size = (parms.size || \"small\").toLowerCase();\n    if (level !== \"AA\" && level !== \"AAA\") {\n        level = \"AA\";\n    }\n    if (size !== \"small\" && size !== \"large\") {\n        size = \"small\";\n    }\n    return {\"level\":level, \"size\":size};\n}\n\n// Node: Export function\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = tinycolor;\n}\n// AMD/requirejs: Define the module\nelse if (typeof define === 'function' && define.amd) {\n    define(function () {return tinycolor;});\n}\n// Browser: Expose to window\nelse {\n    window.tinycolor = tinycolor;\n}\n\n})(Math);\n","'use strict';\r\n\r\nvar width = 256;// each RC4 output is 0 <= x < 256\r\nvar chunks = 6;// at least six RC4 outputs for each double\r\nvar digits = 52;// there are 52 significant digits in a double\r\nvar pool = [];// pool: entropy pool starts empty\r\nvar GLOBAL = typeof global === 'undefined' ? window : global;\r\n\r\n//\r\n// The following constants are related to IEEE 754 limits.\r\n//\r\nvar startdenom = Math.pow(width, chunks),\r\n    significance = Math.pow(2, digits),\r\n    overflow = significance * 2,\r\n    mask = width - 1;\r\n\r\n\r\nvar oldRandom = Math.random;\r\n\r\n//\r\n// seedrandom()\r\n// This is the seedrandom function described above.\r\n//\r\nmodule.exports = function(seed, options) {\r\n  if (options && options.global === true) {\r\n    options.global = false;\r\n    Math.random = module.exports(seed, options);\r\n    options.global = true;\r\n    return Math.random;\r\n  }\r\n  var use_entropy = (options && options.entropy) || false;\r\n  var key = [];\r\n\r\n  // Flatten the seed string or build one from local entropy if needed.\r\n  var shortseed = mixkey(flatten(\r\n    use_entropy ? [seed, tostring(pool)] :\r\n    0 in arguments ? seed : autoseed(), 3), key);\r\n\r\n  // Use the seed to initialize an ARC4 generator.\r\n  var arc4 = new ARC4(key);\r\n\r\n  // Mix the randomness into accumulated entropy.\r\n  mixkey(tostring(arc4.S), pool);\r\n\r\n  // Override Math.random\r\n\r\n  // This function returns a random double in [0, 1) that contains\r\n  // randomness in every bit of the mantissa of the IEEE 754 value.\r\n\r\n  return function() {         // Closure to return a random double:\r\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\r\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\r\n        x = 0;                          //   and no 'extra last byte'.\r\n    while (n < significance) {          // Fill up all significant digits by\r\n      n = (n + x) * width;              //   shifting numerator and\r\n      d *= width;                       //   denominator and generating a\r\n      x = arc4.g(1);                    //   new least-significant-byte.\r\n    }\r\n    while (n >= overflow) {             // To avoid rounding up, before adding\r\n      n /= 2;                           //   last byte, shift everything\r\n      d /= 2;                           //   right using integer Math until\r\n      x >>>= 1;                         //   we have exactly the desired bits.\r\n    }\r\n    return (n + x) / d;                 // Form the number within [0, 1).\r\n  };\r\n};\r\n\r\nmodule.exports.resetGlobal = function () {\r\n  Math.random = oldRandom;\r\n};\r\n\r\n//\r\n// ARC4\r\n//\r\n// An ARC4 implementation.  The constructor takes a key in the form of\r\n// an array of at most (width) integers that should be 0 <= x < (width).\r\n//\r\n// The g(count) method returns a pseudorandom integer that concatenates\r\n// the next (count) outputs from ARC4.  Its return value is a number x\r\n// that is in the range 0 <= x < (width ^ count).\r\n//\r\n/** @constructor */\r\nfunction ARC4(key) {\r\n  var t, keylen = key.length,\r\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\r\n\r\n  // The empty key [] is treated as [0].\r\n  if (!keylen) { key = [keylen++]; }\r\n\r\n  // Set up S using the standard key scheduling algorithm.\r\n  while (i < width) {\r\n    s[i] = i++;\r\n  }\r\n  for (i = 0; i < width; i++) {\r\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\r\n    s[j] = t;\r\n  }\r\n\r\n  // The \"g\" method returns the next (count) outputs as one number.\r\n  (me.g = function(count) {\r\n    // Using instance members instead of closure state nearly doubles speed.\r\n    var t, r = 0,\r\n        i = me.i, j = me.j, s = me.S;\r\n    while (count--) {\r\n      t = s[i = mask & (i + 1)];\r\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\r\n    }\r\n    me.i = i; me.j = j;\r\n    return r;\r\n    // For robust unpredictability discard an initial batch of values.\r\n    // See http://www.rsa.com/rsalabs/node.asp?id=2009\r\n  })(width);\r\n}\r\n\r\n//\r\n// flatten()\r\n// Converts an object tree to nested arrays of strings.\r\n//\r\nfunction flatten(obj, depth) {\r\n  var result = [], typ = (typeof obj)[0], prop;\r\n  if (depth && typ == 'o') {\r\n    for (prop in obj) {\r\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\r\n    }\r\n  }\r\n  return (result.length ? result : typ == 's' ? obj : obj + '\\0');\r\n}\r\n\r\n//\r\n// mixkey()\r\n// Mixes a string seed into a key that is an array of integers, and\r\n// returns a shortened string seed that is equivalent to the result key.\r\n//\r\nfunction mixkey(seed, key) {\r\n  var stringseed = seed + '', smear, j = 0;\r\n  while (j < stringseed.length) {\r\n    key[mask & j] =\r\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\r\n  }\r\n  return tostring(key);\r\n}\r\n\r\n//\r\n// autoseed()\r\n// Returns an object for autoseeding, using window.crypto if available.\r\n//\r\n/** @param {Uint8Array=} seed */\r\nfunction autoseed(seed) {\r\n  try {\r\n    GLOBAL.crypto.getRandomValues(seed = new Uint8Array(width));\r\n    return tostring(seed);\r\n  } catch (e) {\r\n    return [+new Date, GLOBAL, GLOBAL.navigator && GLOBAL.navigator.plugins,\r\n            GLOBAL.screen, tostring(pool)];\r\n  }\r\n}\r\n\r\n//\r\n// tostring()\r\n// Converts an array of charcodes to a string\r\n//\r\nfunction tostring(a) {\r\n  return String.fromCharCode.apply(0, a);\r\n}\r\n\r\n//\r\n// When seedrandom.js is loaded, we immediately mix a few bits\r\n// from the built-in RNG into the entropy pool.  Because we do\r\n// not want to intefere with determinstic PRNG state later,\r\n// seedrandom will not call Math.random on its own again after\r\n// initialization.\r\n//\r\nmixkey(Math.random(), pool);\r\n","/*\n * A fast javascript implementation of simplex noise by Jonas Wagner\n\nBased on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\nWhich is based on example code by Stefan Gustavson (stegu@itn.liu.se).\nWith Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\nBetter rank ordering method by Stefan Gustavson in 2012.\n\n\n Copyright (c) 2018 Jonas Wagner\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n(function() {\n  'use strict';\n\n  var F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\n  var G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\n  var F3 = 1.0 / 3.0;\n  var G3 = 1.0 / 6.0;\n  var F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n  var G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n\n  function SimplexNoise(randomOrSeed) {\n    var random;\n    if (typeof randomOrSeed == 'function') {\n      random = randomOrSeed;\n    }\n    else if (randomOrSeed) {\n      random = alea(randomOrSeed);\n    } else {\n      random = Math.random;\n    }\n    this.p = buildPermutationTable(random);\n    this.perm = new Uint8Array(512);\n    this.permMod12 = new Uint8Array(512);\n    for (var i = 0; i < 512; i++) {\n      this.perm[i] = this.p[i & 255];\n      this.permMod12[i] = this.perm[i] % 12;\n    }\n\n  }\n  SimplexNoise.prototype = {\n    grad3: new Float32Array([1, 1, 0,\n      -1, 1, 0,\n      1, -1, 0,\n\n      -1, -1, 0,\n      1, 0, 1,\n      -1, 0, 1,\n\n      1, 0, -1,\n      -1, 0, -1,\n      0, 1, 1,\n\n      0, -1, 1,\n      0, 1, -1,\n      0, -1, -1]),\n    grad4: new Float32Array([0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1,\n      0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1,\n      1, 0, 1, 1, 1, 0, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1,\n      -1, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, -1, 0, -1, -1,\n      1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1,\n      -1, 1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, -1,\n      1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0,\n      -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 0]),\n    noise2D: function(xin, yin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0 = 0; // Noise contributions from the three corners\n      var n1 = 0;\n      var n2 = 0;\n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin) * F2; // Hairy factor for 2D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var t = (i + j) * G2;\n      var X0 = i - t; // Unskew the cell origin back to (x,y) space\n      var Y0 = j - t;\n      var x0 = xin - X0; // The x,y distances from the cell origin\n      var y0 = yin - Y0;\n      // For the 2D case, the simplex shape is an equilateral triangle.\n      // Determine which simplex we are in.\n      var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n      if (x0 > y0) {\n        i1 = 1;\n        j1 = 0;\n      } // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      else {\n        i1 = 0;\n        j1 = 1;\n      } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n      // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n      // c = (3-sqrt(3))/6\n      var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n      var y1 = y0 - j1 + G2;\n      var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n      var y2 = y0 - 1.0 + 2.0 * G2;\n      // Work out the hashed gradient indices of the three simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      // Calculate the contribution from the three corners\n      var t0 = 0.5 - x0 * x0 - y0 * y0;\n      if (t0 >= 0) {\n        var gi0 = permMod12[ii + perm[jj]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient\n      }\n      var t1 = 0.5 - x1 * x1 - y1 * y1;\n      if (t1 >= 0) {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1);\n      }\n      var t2 = 0.5 - x2 * x2 - y2 * y2;\n      if (t2 >= 0) {\n        var gi2 = permMod12[ii + 1 + perm[jj + 1]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to return values in the interval [-1,1].\n      return 70.0 * (n0 + n1 + n2);\n    },\n    // 3D simplex noise\n    noise3D: function(xin, yin, zin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0, n1, n2, n3; // Noise contributions from the four corners\n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var k = Math.floor(zin + s);\n      var t = (i + j + k) * G3;\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var x0 = xin - X0; // The x,y,z distances from the cell origin\n      var y0 = yin - Y0;\n      var z0 = zin - Z0;\n      // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n      // Determine which simplex we are in.\n      var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n      var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n      if (x0 >= y0) {\n        if (y0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // X Y Z order\n        else if (x0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // X Z Y order\n        else {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // Z X Y order\n      }\n      else { // x0<y0\n        if (y0 < z0) {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Z Y X order\n        else if (x0 < z0) {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Y Z X order\n        else {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // Y X Z order\n      }\n      // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n      // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n      // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n      // c = 1/6.\n      var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n      var y1 = y0 - j1 + G3;\n      var z1 = z0 - k1 + G3;\n      var x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n      var y2 = y0 - j2 + 2.0 * G3;\n      var z2 = z0 - k2 + 2.0 * G3;\n      var x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n      var y3 = y0 - 1.0 + 3.0 * G3;\n      var z3 = z0 - 1.0 + 3.0 * G3;\n      // Work out the hashed gradient indices of the four simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255;\n      // Calculate the contribution from the four corners\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n      if (t0 < 0) n0 = 0.0;\n      else {\n        var gi0 = permMod12[ii + perm[jj + perm[kk]]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0 + grad3[gi0 + 2] * z0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n      if (t1 < 0) n1 = 0.0;\n      else {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1 + grad3[gi1 + 2] * z1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n      if (t2 < 0) n2 = 0.0;\n      else {\n        var gi2 = permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2 + grad3[gi2 + 2] * z2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n      if (t3 < 0) n3 = 0.0;\n      else {\n        var gi3 = permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]] * 3;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad3[gi3] * x3 + grad3[gi3 + 1] * y3 + grad3[gi3 + 2] * z3);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to stay just inside [-1,1]\n      return 32.0 * (n0 + n1 + n2 + n3);\n    },\n    // 4D simplex noise, better simplex rank ordering method 2012-03-09\n    noise4D: function(x, y, z, w) {\n      var perm = this.perm;\n      var grad4 = this.grad4;\n\n      var n0, n1, n2, n3, n4; // Noise contributions from the five corners\n      // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n      var s = (x + y + z + w) * F4; // Factor for 4D skewing\n      var i = Math.floor(x + s);\n      var j = Math.floor(y + s);\n      var k = Math.floor(z + s);\n      var l = Math.floor(w + s);\n      var t = (i + j + k + l) * G4; // Factor for 4D unskewing\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var W0 = l - t;\n      var x0 = x - X0; // The x,y,z,w distances from the cell origin\n      var y0 = y - Y0;\n      var z0 = z - Z0;\n      var w0 = w - W0;\n      // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n      // To find out which of the 24 possible simplices we're in, we need to\n      // determine the magnitude ordering of x0, y0, z0 and w0.\n      // Six pair-wise comparisons are performed between each possible pair\n      // of the four coordinates, and the results are used to rank the numbers.\n      var rankx = 0;\n      var ranky = 0;\n      var rankz = 0;\n      var rankw = 0;\n      if (x0 > y0) rankx++;\n      else ranky++;\n      if (x0 > z0) rankx++;\n      else rankz++;\n      if (x0 > w0) rankx++;\n      else rankw++;\n      if (y0 > z0) ranky++;\n      else rankz++;\n      if (y0 > w0) ranky++;\n      else rankw++;\n      if (z0 > w0) rankz++;\n      else rankw++;\n      var i1, j1, k1, l1; // The integer offsets for the second simplex corner\n      var i2, j2, k2, l2; // The integer offsets for the third simplex corner\n      var i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n      // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n      // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n      // impossible. Only the 24 indices which have non-zero entries make any sense.\n      // We use a thresholding to set the coordinates in turn from the largest magnitude.\n      // Rank 3 denotes the largest coordinate.\n      i1 = rankx >= 3 ? 1 : 0;\n      j1 = ranky >= 3 ? 1 : 0;\n      k1 = rankz >= 3 ? 1 : 0;\n      l1 = rankw >= 3 ? 1 : 0;\n      // Rank 2 denotes the second largest coordinate.\n      i2 = rankx >= 2 ? 1 : 0;\n      j2 = ranky >= 2 ? 1 : 0;\n      k2 = rankz >= 2 ? 1 : 0;\n      l2 = rankw >= 2 ? 1 : 0;\n      // Rank 1 denotes the second smallest coordinate.\n      i3 = rankx >= 1 ? 1 : 0;\n      j3 = ranky >= 1 ? 1 : 0;\n      k3 = rankz >= 1 ? 1 : 0;\n      l3 = rankw >= 1 ? 1 : 0;\n      // The fifth corner has all coordinate offsets = 1, so no need to compute that.\n      var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n      var y1 = y0 - j1 + G4;\n      var z1 = z0 - k1 + G4;\n      var w1 = w0 - l1 + G4;\n      var x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n      var y2 = y0 - j2 + 2.0 * G4;\n      var z2 = z0 - k2 + 2.0 * G4;\n      var w2 = w0 - l2 + 2.0 * G4;\n      var x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n      var y3 = y0 - j3 + 3.0 * G4;\n      var z3 = z0 - k3 + 3.0 * G4;\n      var w3 = w0 - l3 + 3.0 * G4;\n      var x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n      var y4 = y0 - 1.0 + 4.0 * G4;\n      var z4 = z0 - 1.0 + 4.0 * G4;\n      var w4 = w0 - 1.0 + 4.0 * G4;\n      // Work out the hashed gradient indices of the five simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255;\n      var ll = l & 255;\n      // Calculate the contribution from the five corners\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n      if (t0 < 0) n0 = 0.0;\n      else {\n        var gi0 = (perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32) * 4;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad4[gi0] * x0 + grad4[gi0 + 1] * y0 + grad4[gi0 + 2] * z0 + grad4[gi0 + 3] * w0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n      if (t1 < 0) n1 = 0.0;\n      else {\n        var gi1 = (perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32) * 4;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad4[gi1] * x1 + grad4[gi1 + 1] * y1 + grad4[gi1 + 2] * z1 + grad4[gi1 + 3] * w1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n      if (t2 < 0) n2 = 0.0;\n      else {\n        var gi2 = (perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32) * 4;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad4[gi2] * x2 + grad4[gi2 + 1] * y2 + grad4[gi2 + 2] * z2 + grad4[gi2 + 3] * w2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n      if (t3 < 0) n3 = 0.0;\n      else {\n        var gi3 = (perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32) * 4;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad4[gi3] * x3 + grad4[gi3 + 1] * y3 + grad4[gi3 + 2] * z3 + grad4[gi3 + 3] * w3);\n      }\n      var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n      if (t4 < 0) n4 = 0.0;\n      else {\n        var gi4 = (perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32) * 4;\n        t4 *= t4;\n        n4 = t4 * t4 * (grad4[gi4] * x4 + grad4[gi4 + 1] * y4 + grad4[gi4 + 2] * z4 + grad4[gi4 + 3] * w4);\n      }\n      // Sum up and scale the result to cover the range [-1,1]\n      return 27.0 * (n0 + n1 + n2 + n3 + n4);\n    }\n  };\n\n  function buildPermutationTable(random) {\n    var i;\n    var p = new Uint8Array(256);\n    for (i = 0; i < 256; i++) {\n      p[i] = i;\n    }\n    for (i = 0; i < 255; i++) {\n      var r = i + ~~(random() * (256 - i));\n      var aux = p[i];\n      p[i] = p[r];\n      p[r] = aux;\n    }\n    return p;\n  }\n  SimplexNoise._buildPermutationTable = buildPermutationTable;\n\n  function alea() {\n    // Johannes BaagÃ¸e <baagoe@baagoe.com>, 2010\n    var s0 = 0;\n    var s1 = 0;\n    var s2 = 0;\n    var c = 1;\n\n    var mash = masher();\n    s0 = mash(' ');\n    s1 = mash(' ');\n    s2 = mash(' ');\n\n    for (var i = 0; i < arguments.length; i++) {\n      s0 -= mash(arguments[i]);\n      if (s0 < 0) {\n        s0 += 1;\n      }\n      s1 -= mash(arguments[i]);\n      if (s1 < 0) {\n        s1 += 1;\n      }\n      s2 -= mash(arguments[i]);\n      if (s2 < 0) {\n        s2 += 1;\n      }\n    }\n    mash = null;\n    return function() {\n      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n      s0 = s1;\n      s1 = s2;\n      return s2 = t - (c = t | 0);\n    };\n  }\n  function masher() {\n    var n = 0xefc8249d;\n    return function(data) {\n      data = data.toString();\n      for (var i = 0; i < data.length; i++) {\n        n += data.charCodeAt(i);\n        var h = 0.02519603282416938 * n;\n        n = h >>> 0;\n        h -= n;\n        h *= n;\n        n = h >>> 0;\n        h -= n;\n        n += h * 0x100000000; // 2^32\n      }\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n    };\n  }\n\n  // amd\n  if (typeof define !== 'undefined' && define.amd) define(function() {return SimplexNoise;});\n  // common js\n  if (typeof exports !== 'undefined') exports.SimplexNoise = SimplexNoise;\n  // browser\n  else if (typeof window !== 'undefined') window.SimplexNoise = SimplexNoise;\n  // nodejs\n  if (typeof module !== 'undefined') {\n    module.exports = SimplexNoise;\n  }\n\n})();\n","module.exports = function () {\n    for (var i = 0; i < arguments.length; i++) {\n        if (arguments[i] !== undefined) return arguments[i];\n    }\n};\n","var seedRandom = require('seed-random');\nvar SimplexNoise = require('simplex-noise');\nvar defined = require('defined');\n\nfunction createRandom (defaultSeed) {\n  defaultSeed = defined(defaultSeed, null);\n  var defaultRandom = Math.random;\n  var currentSeed;\n  var currentRandom;\n  var noiseGenerator;\n  var _nextGaussian = null;\n  var _hasNextGaussian = false;\n\n  setSeed(defaultSeed);\n\n  return {\n    value: value,\n    createRandom: function (defaultSeed) {\n      return createRandom(defaultSeed);\n    },\n    setSeed: setSeed,\n    getSeed: getSeed,\n    getRandomSeed: getRandomSeed,\n    valueNonZero: valueNonZero,\n    permuteNoise: permuteNoise,\n    noise1D: noise1D,\n    noise2D: noise2D,\n    noise3D: noise3D,\n    noise4D: noise4D,\n    sign: sign,\n    boolean: boolean,\n    chance: chance,\n    range: range,\n    rangeFloor: rangeFloor,\n    pick: pick,\n    shuffle: shuffle,\n    onCircle: onCircle,\n    insideCircle: insideCircle,\n    onSphere: onSphere,\n    insideSphere: insideSphere,\n    quaternion: quaternion,\n    weighted: weighted,\n    weightedSet: weightedSet,\n    weightedSetIndex: weightedSetIndex,\n    gaussian: gaussian\n  };\n\n  function setSeed (seed, opt) {\n    if (typeof seed === 'number' || typeof seed === 'string') {\n      currentSeed = seed;\n      currentRandom = seedRandom(currentSeed, opt);\n    } else {\n      currentSeed = undefined;\n      currentRandom = defaultRandom;\n    }\n    noiseGenerator = createNoise();\n    _nextGaussian = null;\n    _hasNextGaussian = false;\n  }\n\n  function value () {\n    return currentRandom();\n  }\n\n  function valueNonZero () {\n    var u = 0;\n    while (u === 0) u = value();\n    return u;\n  }\n\n  function getSeed () {\n    return currentSeed;\n  }\n\n  function getRandomSeed () {\n    var seed = String(Math.floor(Math.random() * 1000000));\n    return seed;\n  }\n\n  function createNoise () {\n    return new SimplexNoise(currentRandom);\n  }\n\n  function permuteNoise () {\n    noiseGenerator = createNoise();\n  }\n\n  function noise1D (x, frequency, amplitude) {\n    if (!isFinite(x)) throw new TypeError('x component for noise() must be finite');\n    frequency = defined(frequency, 1);\n    amplitude = defined(amplitude, 1);\n    return amplitude * noiseGenerator.noise2D(x * frequency, 0);\n  }\n\n  function noise2D (x, y, frequency, amplitude) {\n    if (!isFinite(x)) throw new TypeError('x component for noise() must be finite');\n    if (!isFinite(y)) throw new TypeError('y component for noise() must be finite');\n    frequency = defined(frequency, 1);\n    amplitude = defined(amplitude, 1);\n    return amplitude * noiseGenerator.noise2D(x * frequency, y * frequency);\n  }\n\n  function noise3D (x, y, z, frequency, amplitude) {\n    if (!isFinite(x)) throw new TypeError('x component for noise() must be finite');\n    if (!isFinite(y)) throw new TypeError('y component for noise() must be finite');\n    if (!isFinite(z)) throw new TypeError('z component for noise() must be finite');\n    frequency = defined(frequency, 1);\n    amplitude = defined(amplitude, 1);\n    return amplitude * noiseGenerator.noise3D(\n      x * frequency,\n      y * frequency,\n      z * frequency\n    );\n  }\n\n  function noise4D (x, y, z, w, frequency, amplitude) {\n    if (!isFinite(x)) throw new TypeError('x component for noise() must be finite');\n    if (!isFinite(y)) throw new TypeError('y component for noise() must be finite');\n    if (!isFinite(z)) throw new TypeError('z component for noise() must be finite');\n    if (!isFinite(w)) throw new TypeError('w component for noise() must be finite');\n    frequency = defined(frequency, 1);\n    amplitude = defined(amplitude, 1);\n    return amplitude * noiseGenerator.noise4D(\n      x * frequency,\n      y * frequency,\n      z * frequency,\n      w * frequency\n    );\n  }\n\n  function sign () {\n    return boolean() ? 1 : -1;\n  }\n\n  function boolean () {\n    return value() > 0.5;\n  }\n\n  function chance (n) {\n    n = defined(n, 0.5);\n    if (typeof n !== 'number') throw new TypeError('expected n to be a number');\n    return value() < n;\n  }\n\n  function range (min, max) {\n    if (max === undefined) {\n      max = min;\n      min = 0;\n    }\n\n    if (typeof min !== 'number' || typeof max !== 'number') {\n      throw new TypeError('Expected all arguments to be numbers');\n    }\n\n    return value() * (max - min) + min;\n  }\n\n  function rangeFloor (min, max) {\n    if (max === undefined) {\n      max = min;\n      min = 0;\n    }\n\n    if (typeof min !== 'number' || typeof max !== 'number') {\n      throw new TypeError('Expected all arguments to be numbers');\n    }\n\n    return Math.floor(range(min, max));\n  }\n\n  function pick (array) {\n    if (array.length === 0) return undefined;\n    return array[rangeFloor(0, array.length)];\n  }\n\n  function shuffle (arr) {\n    if (!Array.isArray(arr)) {\n      throw new TypeError('Expected Array, got ' + typeof arr);\n    }\n\n    var rand;\n    var tmp;\n    var len = arr.length;\n    var ret = arr.slice();\n    while (len) {\n      rand = Math.floor(value() * len--);\n      tmp = ret[len];\n      ret[len] = ret[rand];\n      ret[rand] = tmp;\n    }\n    return ret;\n  }\n\n  function onCircle (radius, out) {\n    radius = defined(radius, 1);\n    out = out || [];\n    var theta = value() * 2.0 * Math.PI;\n    out[0] = radius * Math.cos(theta);\n    out[1] = radius * Math.sin(theta);\n    return out;\n  }\n\n  function insideCircle (radius, out) {\n    radius = defined(radius, 1);\n    out = out || [];\n    onCircle(1, out);\n    var r = radius * Math.sqrt(value());\n    out[0] *= r;\n    out[1] *= r;\n    return out;\n  }\n\n  function onSphere (radius, out) {\n    radius = defined(radius, 1);\n    out = out || [];\n    var u = value() * Math.PI * 2;\n    var v = value() * 2 - 1;\n    var phi = u;\n    var theta = Math.acos(v);\n    out[0] = radius * Math.sin(theta) * Math.cos(phi);\n    out[1] = radius * Math.sin(theta) * Math.sin(phi);\n    out[2] = radius * Math.cos(theta);\n    return out;\n  }\n\n  function insideSphere (radius, out) {\n    radius = defined(radius, 1);\n    out = out || [];\n    var u = value() * Math.PI * 2;\n    var v = value() * 2 - 1;\n    var k = value();\n\n    var phi = u;\n    var theta = Math.acos(v);\n    var r = radius * Math.cbrt(k);\n    out[0] = r * Math.sin(theta) * Math.cos(phi);\n    out[1] = r * Math.sin(theta) * Math.sin(phi);\n    out[2] = r * Math.cos(theta);\n    return out;\n  }\n\n  function quaternion (out) {\n    out = out || [];\n    var u1 = value();\n    var u2 = value();\n    var u3 = value();\n\n    var sq1 = Math.sqrt(1 - u1);\n    var sq2 = Math.sqrt(u1);\n\n    var theta1 = Math.PI * 2 * u2;\n    var theta2 = Math.PI * 2 * u3;\n\n    var x = Math.sin(theta1) * sq1;\n    var y = Math.cos(theta1) * sq1;\n    var z = Math.sin(theta2) * sq2;\n    var w = Math.cos(theta2) * sq2;\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n  }\n\n  function weightedSet (set) {\n    set = set || [];\n    if (set.length === 0) return null;\n    return set[weightedSetIndex(set)].value;\n  }\n\n  function weightedSetIndex (set) {\n    set = set || [];\n    if (set.length === 0) return -1;\n    return weighted(set.map(function (s) {\n      return s.weight;\n    }));\n  }\n\n  function weighted (weights) {\n    weights = weights || [];\n    if (weights.length === 0) return -1;\n    var totalWeight = 0;\n    var i;\n\n    for (i = 0; i < weights.length; i++) {\n      totalWeight += weights[i];\n    }\n\n    if (totalWeight <= 0) throw new Error('Weights must sum to > 0');\n\n    var random = value() * totalWeight;\n    for (i = 0; i < weights.length; i++) {\n      if (random < weights[i]) {\n        return i;\n      }\n      random -= weights[i];\n    }\n    return 0;\n  }\n\n  function gaussian (mean, standardDerivation) {\n    mean = defined(mean, 0);\n    standardDerivation = defined(standardDerivation, 1);\n\n    // https://github.com/openjdk-mirror/jdk7u-jdk/blob/f4d80957e89a19a29bb9f9807d2a28351ed7f7df/src/share/classes/java/util/Random.java#L496\n    if (_hasNextGaussian) {\n      _hasNextGaussian = false;\n      var result = _nextGaussian;\n      _nextGaussian = null;\n      return mean + standardDerivation * result;\n    } else {\n      var v1 = 0;\n      var v2 = 0;\n      var s = 0;\n      do {\n        v1 = value() * 2 - 1; // between -1 and 1\n        v2 = value() * 2 - 1; // between -1 and 1\n        s = v1 * v1 + v2 * v2;\n      } while (s >= 1 || s === 0);\n      var multiplier = Math.sqrt(-2 * Math.log(s) / s);\n      _nextGaussian = (v2 * multiplier);\n      _hasNextGaussian = true;\n      return mean + standardDerivation * (v1 * multiplier);\n    }\n  }\n}\n\nmodule.exports = createRandom();\n","// Vector class originally from https://evanw.github.io/lightgl.js/docs/vector.html\n// Edited and expanded to match p5's vectors\n// ref - p5 vector https://p5js.org/reference/#/p5.Vector\n// https://www.khanacademy.org/computing/computer-programming/programming-natural-simulations/programming-vectors/a/more-vector-math\n\nexport function Vector(x, y, z) {\n    this.x = x || 0;\n    this.y = y || 0;\n    this.z = z || 0;\n}\nVector.prototype = {\n    negative() {\n        return new Vector(-this.x, -this.y, -this.z);\n    },\n    add(v) {\n        if (v instanceof Vector) return new Vector(this.x + v.x, this.y + v.y, this.z + v.z);\n        return new Vector(this.x + v, this.y + v, this.z + v);\n    },\n    sub(v) {\n        if (v instanceof Vector) return new Vector(this.x - v.x, this.y - v.y, this.z - v.z);\n        return new Vector(this.x - v, this.y - v, this.z - v);\n    },\n    mult(v) {\n        if (v instanceof Vector) return new Vector(this.x * v.x, this.y * v.y, this.z * v.z);\n        return new Vector(this.x * v, this.y * v, this.z * v);\n    },\n    div(v) {\n        if (v instanceof Vector) return new Vector(this.x / v.x, this.y / v.y, this.z / v.z);\n        return new Vector(this.x / v, this.y / v, this.z / v);\n    },\n    equals(v) {\n        return this.x === v.x && this.y === v.y && this.z === v.z;\n    },\n    dot(v) {\n        return this.x * v.x + this.y * v.y + this.z * v.z;\n    },\n    cross(v) {\n        return new Vector(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x);\n    },\n    length() {\n        return Math.sqrt(this.dot(this));\n    },\n    mag() {\n        return this.length();\n    },\n    magSq() {\n        const m = this.length();\n        return m * m;\n    },\n    setMag(m) {\n        const c = this.mag();\n        const r = m / c;\n        return this.mult(r);\n    },\n    normalize() {\n        let mag = this.mag();\n        mag = mag || 1;\n        return this.div(mag);\n    },\n    unit() {\n        return this.divide(this.length());\n    },\n    min() {\n        return Math.min(Math.min(this.x, this.y), this.z);\n    },\n    max() {\n        return Math.max(Math.max(this.x, this.y), this.z);\n    },\n    limit(v) {\n        const cm = this.mag();\n        if (cm > v) {\n            return this.setMag(v);\n        }\n        return this;\n    },\n    // clamp(min, max) {\n    //     // export const clamp = (min = 0, max = 1, a) => Math.min(max, Math.max(min, a));\n    // },\n    toAngles() {\n        return {\n            theta: Math.atan2(this.z, this.x),\n            phi: Math.asin(this.y / this.length()),\n        };\n    },\n    angleTo(a) {\n        return Math.acos(this.dot(a) / (this.length() * a.length()));\n    },\n    toArray(n) {\n        return [this.x, this.y, this.z].slice(0, n || 3);\n    },\n    clone() {\n        return new Vector(this.x, this.y, this.z);\n    },\n    init(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        return this;\n    },\n};\nVector.negative = function (a, b) {\n    b.x = -a.x;\n    b.y = -a.y;\n    b.z = -a.z;\n    return b;\n};\nVector.add = function (a, b, c) {\n    if (b instanceof Vector) {\n        c.x = a.x + b.x;\n        c.y = a.y + b.y;\n        c.z = a.z + b.z;\n    } else {\n        c.x = a.x + b;\n        c.y = a.y + b;\n        c.z = a.z + b;\n    }\n    return c;\n};\nVector.subtract = function (a, b, c) {\n    if (b instanceof Vector) {\n        c.x = a.x - b.x;\n        c.y = a.y - b.y;\n        c.z = a.z - b.z;\n    } else {\n        c.x = a.x - b;\n        c.y = a.y - b;\n        c.z = a.z - b;\n    }\n    return c;\n};\nVector.multiply = function (a, b, c) {\n    if (b instanceof Vector) {\n        c.x = a.x * b.x;\n        c.y = a.y * b.y;\n        c.z = a.z * b.z;\n    } else {\n        c.x = a.x * b;\n        c.y = a.y * b;\n        c.z = a.z * b;\n    }\n    return c;\n};\nVector.divide = function (a, b, c) {\n    if (b instanceof Vector) {\n        c.x = a.x / b.x;\n        c.y = a.y / b.y;\n        c.z = a.z / b.z;\n    } else {\n        c.x = a.x / b;\n        c.y = a.y / b;\n        c.z = a.z / b;\n    }\n    return c;\n};\nVector.cross = function (a, b, c) {\n    c.x = a.y * b.z - a.z * b.y;\n    c.y = a.z * b.x - a.x * b.z;\n    c.z = a.x * b.y - a.y * b.x;\n    return c;\n};\nVector.unit = function (a, b) {\n    const length = a.length();\n    b.x = a.x / length;\n    b.y = a.y / length;\n    b.z = a.z / length;\n    return b;\n};\nVector.fromAngles = function (theta, phi) {\n    return new Vector(Math.cos(theta) * Math.cos(phi), Math.sin(phi), Math.sin(theta) * Math.cos(phi));\n};\nVector.randomDirection = function () {\n    return Vector.fromAngles(Math.random() * Math.PI * 2, Math.asin(Math.random() * 2 - 1));\n};\nVector.min = function (a, b) {\n    return new Vector(Math.min(a.x, b.x), Math.min(a.y, b.y), Math.min(a.z, b.z));\n};\nVector.max = function (a, b) {\n    return new Vector(Math.max(a.x, b.x), Math.max(a.y, b.y), Math.max(a.z, b.z));\n};\nVector.lerp = function (a, b, fraction) {\n    return b.subtract(a).multiply(fraction).add(a);\n};\nVector.fromArray = function (a) {\n    return new Vector(a[0], a[1], a[2]);\n};\nVector.angleBetween = function (a, b) {\n    return a.angleTo(b);\n};\n","/*\n  Math Snippets\n  https://github.com/terkelg/math\n*/\n\nimport random from 'canvas-sketch-util/random';\nimport { Vector } from './Vector';\n\n// Math aliases\nconst Ï€ = Math.PI;\nconst { PI } = Math;\nconst TAU = Math.PI * 2;\nconst { abs } = Math;\nconst { sin } = Math;\nconst { cos } = Math;\nconst { tan } = Math;\nconst { pow } = Math;\nconst { round } = Math;\nconst { floor } = Math;\n\nrandom.setSeed(random.getRandomSeed());\nconsole.log(`Using seed ${random.getSeed()}`);\n\n// Ï† phi\nexport const golden = 1.6180339887498948482;\n// g angles: 222.5, 137.5\n\n// https://www.mathsisfun.com/numbers/fibonacci-sequence.html\nexport const fibonacci = [\n    0,\n    1,\n    1,\n    2,\n    3,\n    5,\n    8,\n    13,\n    21,\n    34,\n    55,\n    89,\n    144,\n    233,\n    377,\n    610,\n    987,\n    1597,\n    2584,\n    4181,\n    6765,\n    10946,\n    17711,\n    28657,\n    46368,\n    75025,\n    121393,\n    196418,\n    317811,\n];\n\nexport const snapNumber = (snap, n) => Math.floor(n / snap) * snap;\n\n// Hough transform\n// https://stackoverflow.com/questions/24372921/how-to-calculate-quantized-angle\nexport const houghQuantize = (numAngles, theta) => Math.floor((numAngles * theta) / TAU + 0.5);\n// https://stackoverflow.com/questions/47047691/how-to-quantize-directions-in-canny-edge-detector-in-python\nexport const quantize = (numAngles, theta) => (Math.round(theta * (numAngles / Math.PI)) + numAngles) % numAngles;\n\nexport const round2 = (num) => Math.round((num + Number.EPSILON) * 100) / 100;\n\nexport const getRandomSeed = () => random.getSeed();\nexport const setRandomSeed = (s) => random.setRandomSeed(s);\n\n// Box-Muller Transform\n// https://stackoverflow.com/questions/25582882/javascript-math-random-normal-distribution-gaussian-bell-curve\nexport const randomNormalBM = () => {\n    let u = 0;\n    let v = 0;\n    while (u === 0) u = random.value(); // Converting [0,1) to (0,1)\n    while (v === 0) v = random.value();\n    let num = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\n    num = num / 10.0 + 0.5; // Translate to 0 -> 1\n    if (num > 1 || num < 0) return randomNormalBM(); // resample between 0 and 1\n    return num;\n};\n\n// same source as above\n// better solution https://spin.atomicobject.com/2019/09/30/skew-normal-prng-javascript/\nexport const randomNormalBM2 = (min = 0, max = 1, skew = 1) => {\n    let u = 0;\n    let v = 0;\n    while (u === 0) u = random.value(); // Converting [0,1) to (0,1)\n    while (v === 0) v = random.value();\n    let num = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\n\n    num = num / 10.0 + 0.5; // Translate to 0 -> 1\n    if (num > 1 || num < 0) {\n        // // resample between 0 and 1 if out of range\n        num = randomNormalBM2(min, max, skew);\n    } else {\n        num = Math.pow(num, skew); // Skew\n        num *= max - min; // Stretch to fill range\n        num += min; // offset to min\n    }\n    return num;\n};\n\nexport const randomNormalNumberBetween = (min, max) => randomNormalBM() * (max - min) + min;\nexport const randomNormalWholeBetween = (min, max) => Math.round(randomNormalBM() * (max - min) + min);\n\nexport const randomNumberBetween = (min, max) => random.valueNonZero() * (max - min) + min;\nexport const randomWholeBetween = (min, max) => Math.floor(random.value() * (max - min) + min);\n\nexport const randomNumberBetweenMid = (min, max) => randomNumberBetween(min, max) - max / 2;\n\nexport const randomSign = () => (Math.round(random.value()) === 1 ? 1 : -1);\nexport const randomBoolean = () => Math.round(random.value()) === 1;\nexport const randomChance = (chance = 0.5) => random.chance(chance);\n\nexport const oneOf = (arry) => {\n    const i = randomWholeBetween(0, arry.length - 1);\n    return arry[i];\n};\n\nexport const lowest = (arry) =>\n    arry.reduce((acc, v) => {\n        if (v < acc) {\n            acc = v;\n        }\n        return acc;\n    }, 0);\n\nexport const highest = (arry) =>\n    arry.reduce((acc, v) => {\n        if (v > acc) {\n            acc = v;\n        }\n        return acc;\n    }, 0);\n\nexport const createRandomNumberArray = (len, min, max) =>\n    Array.from(new Array(len)).map(() => randomNumberBetween(min, max));\n\n// -> -1 ... 1\nexport const loopingValue = (t, m = 0.5) => Math.sin(t * m);\n\n// t is 0-1, -> -1 ... 1\nexport const pingPontValue = (t) => Math.sin(t * Math.PI);\n\n// x,y offsets for the current circle position\nexport const pointOnCircle = (x, y, r, a) => ({ x: r * Math.sin(a) + x, y: r * Math.cos(a) + y });\n\n// returns value between 0-1, 250,500,0 => .5\nexport const normalize = (min, max, val) => (val - min) / (max - min);\nexport const normalizeInverse = (min, max, val) => 1 - normalize(min, max, val);\n\n// https://twitter.com/mattdesl/status/1031305279227478016\n// https://www.trysmudford.com/blog/linear-interpolation-functions/\n// lerp(20, 80, 0.5) // 40\nexport const lerp = (x, y, a) => x * (1 - a) + y * a;\n\nexport const clamp = (min = 0, max = 1, a) => Math.min(max, Math.max(min, a));\n\n// invlerp(50, 100, 75)  // 0.5\nexport const invlerp = (x, y, a) => clamp(0, 1, (a - x) / (y - x));\n\n// p5js map fn is reverse map(a,x2,y2,x1,y1)\n// a is point in 1 and converts to point in 2\n// range(10, 100, 2000, 20000, 50) // 10000\nexport const mapRange = (x1, y1, x2, y2, a) => lerp(x2, y2, invlerp(x1, y1, a));\n\n// Accepts a value 0-1 and returns a value 0-1 in a sin wave\nexport const toSinValue = (value) => Math.abs(Math.sin(value * TAU));\n\nexport const mapToTau = (start, end, value) => mapRange(start, end, 0, TAU, value);\n\nexport const marginify = ({ margin, u, v, width, height }) => ({\n    x: lerp(margin, width - margin, u),\n    y: lerp(margin, height - margin, v),\n});\n\nexport const pointDistance = (pointA, pointB) => {\n    const dx = pointA.x - pointB.x;\n    const dy = pointA.y - pointB.y;\n    return Math.sqrt(dx * dx + dy * dy);\n};\n\n// https://stackoverflow.com/questions/13043945/how-do-i-calculate-the-position-of-a-point-in-html5-canvas-after-rotation\nexport const pointRotateCoord = (point, angle) => ({\n    x: point.x * cos(angle) - point.y * sin(angle),\n    y: point.y * cos(angle) + point.x * sin(angle),\n});\n\n// https://www.khanacademy.org/computing/computer-programming/programming-natural-simulations/programming-angular-movement/a/pointing-towards-movement\nexport const pointAngleFromVelocity = ({ velocityX, velocityY }) => Math.atan2(velocityY, velocityX);\n\nexport const aFromVector = ({ x, y }) => Math.atan2(y, x);\nexport const uvFromAngle = (a) => new Vector(Math.cos(a), Math.sin(a));\n\nexport const radiansToDegrees = (rad) => (rad * 180) / Math.PI;\nexport const degreesToRadians = (deg) => (deg * Math.PI) / 180;\n\n// Scale up point grid and center in the canvas\nexport const scalePointToCanvas = (canvasWidth, canvasHeight, width, height, zoomFactor, x, y) => {\n    const particleXOffset = canvasWidth / 2 - (width * zoomFactor) / 2;\n    const particleYOffset = canvasHeight / 2 - (height * zoomFactor) / 2;\n    return {\n        x: x * zoomFactor + particleXOffset,\n        y: y * zoomFactor + particleYOffset,\n    };\n};\n\nexport const create2dNoise = (u, v, amplitude = 1, frequency = 0.5) =>\n    random.noise2D(u * frequency, v * frequency) * amplitude;\n\nexport const create2dNoiseAbs = (u, v, amplitude = 1, frequency = 0.5) =>\n    Math.abs(random.noise2D(u * frequency, v * frequency)) * amplitude;\n\nexport const create3dNoise = (u, v, t, amplitude = 1, frequency = 0.5) =>\n    random.noise3D(u * frequency, v * frequency, t * frequency) * amplitude;\n\nexport const create3dNoiseAbs = (u, v, t, amplitude = 1, frequency = 0.5) =>\n    Math.abs(random.noise3D(u * frequency, v * frequency, t * frequency)) * amplitude;\n\nexport const randomPointAround = (range = 20) => {\n    const radius = randomWholeBetween(0, range);\n    const angle = randomNumberBetween(0, TAU);\n    return { x: radius * Math.cos(angle), y: radius * Math.sin(angle) };\n};\n\n// https://observablehq.com/@pamacha/chaikins-algorithm\nexport const chaikin = (arr, num) => {\n    if (num === 0) return arr;\n    const l = arr.length;\n    const smooth = arr\n        .map((c, i) => [\n            [0.75 * c[0] + 0.25 * arr[(i + 1) % l][0], 0.75 * c[1] + 0.25 * arr[(i + 1) % l][1]],\n            [0.25 * c[0] + 0.75 * arr[(i + 1) % l][0], 0.25 * c[1] + 0.75 * arr[(i + 1) % l][1]],\n        ])\n        .flat();\n    return num === 1 ? smooth : chaikin(smooth, num - 1);\n};\n\n// [[x,y], ...]\nexport const createCirclePoints = (offsetX, offsetY, diameter, steps, sx = 1, sy = 1) => {\n    const points = [];\n    for (let theta = 0; theta < 360; theta += steps) {\n        const radius = theta * (Math.PI / 180);\n        const x = Math.cos(radius) * diameter + sx + offsetX;\n        const y = Math.sin(radius) * diameter + sy + offsetY;\n        points.push([x, y]);\n    }\n    return points;\n};\n\nexport const createGridPointsXY = (width, height, xMargin, yMargin, columns, rows) => {\n    const gridPoints = [];\n\n    const colStep = Math.round((width - xMargin * 2) / (columns - 1));\n    const rowStep = Math.round((height - yMargin * 2) / (rows - 1));\n\n    for (let col = 0; col < columns; col++) {\n        const x = xMargin + col * colStep;\n        for (let row = 0; row < rows; row++) {\n            const y = yMargin + row * rowStep;\n            gridPoints.push([x, y]);\n        }\n    }\n\n    return { points: gridPoints, columnWidth: colStep, rowHeight: rowStep };\n};\n\nexport const createGridCellsXY = (width, height, columns, rows, margin = 0, gutter = 0) => {\n    const points = [];\n\n    const colStep = Math.ceil((width - margin * 2 - gutter * (columns - 1)) / columns);\n    const rowStep = Math.ceil((height - margin * 2 - gutter * (rows - 1)) / rows);\n\n    for (let row = 0; row < rows; row++) {\n        const y = margin + row * rowStep + gutter * row;\n        for (let col = 0; col < columns; col++) {\n            const x = margin + col * colStep + gutter * col;\n            points.push([x, y]);\n        }\n    }\n\n    return { points, columnWidth: colStep, rowHeight: rowStep };\n};\n\n// -> [{radius, rotation, position:[u,v]}, ...]\nexport const createGridPointsUV = (columns, rows) => {\n    rows = rows || columns;\n    const points = [];\n\n    const amplitude = 0.1;\n    const frequency = 1;\n\n    for (let x = 0; x < columns; x++) {\n        for (let y = 0; y < rows; y++) {\n            const u = columns <= 1 ? 0.5 : x / (columns - 1);\n            const v = columns <= 1 ? 0.5 : y / (rows - 1);\n            // const radius = Math.abs(random.gaussian() * 0.02);\n            const radius = create2dNoiseAbs(u, v);\n            const rotation = create2dNoiseAbs(u, v);\n            points.push({\n                radius,\n                rotation,\n                position: [u, v],\n            });\n        }\n    }\n    return points;\n};\n","import tinycolor from 'tinycolor2';\n\nimport {\n    radiansToDegrees,\n    pointAngleFromVelocity,\n    pointDistance,\n    normalizeInverse,\n    pointOnCircle,\n    uvFromAngle,\n    randomWholeBetween,\n    randomNumberBetween,\n    randomSign,\n    randomNormalWholeBetween,\n    mapRange,\n} from './math';\n\nconst TAU = Math.PI * 2;\n\nexport let isHiDPI = false;\nexport let contextScale = 1;\n\nexport const resizeCanvas = (canvas, context, width, height, scale) => {\n    contextScale = scale || window.devicePixelRatio;\n\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n\n    canvas.width = Math.floor(width * contextScale);\n    canvas.height = Math.floor(height * contextScale);\n\n    if (contextScale === 2) {\n        isHiDPI = true;\n        context.scale(1, 1);\n        // context.scale(2, 2);\n    } else {\n        context.scale(contextScale, contextScale);\n    }\n};\n\nexport const clearCanvas = (canvas, context) => (_) => context.clearRect(0, 0, canvas.width, canvas.height);\n\nexport const fillCanvas = (canvas, context) => (opacity = 1, color = '0,0,0') => {\n    context.fillStyle = `rgba(${color},${opacity})`;\n    context.fillRect(0, 0, canvas.width, canvas.height);\n};\n\nexport const background = (canvas, context) => (color = 'black') => {\n    context.fillStyle = tinycolor(color).toRgbString();\n    context.fillRect(0, 0, canvas.width, canvas.height);\n};\n\nexport const resetStyles = (context) => {\n    context.strokeStyle = '#000';\n    context.fillStyle = '#fff';\n    context.lineWidth = 1;\n    context.setLineDash([]);\n    context.lineCap = 'butt';\n};\n\n// https://www.rgraph.net/canvas/howto-antialias.html\nexport const sharpLines = (context) => context.translate(0.5, 0.5);\n\n// https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\n// multiply, screen, overlay, soft-light, hard-light, color-dodge, color-burn, darken, lighten, difference, exclusion, hue, saturation, luminosity, color, add, subtract, average, negative\nexport const blendMode = (context) => (mode = 'source-over') => (context.globalCompositeOperation = mode);\n\n// https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter\nexport const filter = (context) => (f = '') => (context.filter = f);\n\n//----------------------------------------------------------------------------------------------------------------------\n// PRIMITIVES\n//----------------------------------------------------------------------------------------------------------------------\n\n// TODO, circle or square?\nexport const pixel = (context) => (x, y, color = 'black', mode = 'square', size) => {\n    size = size || contextScale;\n    context.fillStyle = tinycolor(color).toRgbString();\n    if (mode === 'circle') {\n        context.beginPath();\n        context.arc(x, y, size, 0, Math.PI * 2, false);\n        context.fill();\n    } else {\n        context.fillRect(x, y, size, size);\n    }\n};\n\n// TODO use circle?\nexport const drawParticlePoint = (context) => ({ x, y, radius, color }) => {\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    context.fillStyle = color.toRgbString();\n    context.fill();\n};\n\nexport const setStokeColor = (context) => (color) => (context.strokeStyle = tinycolor(color).toRgbString());\n\n// linecap = butt, round, square\nexport const drawLine = (context) => (x1, y1, x2, y2, strokeWidth = 1, linecap = 'butt') => {\n    // color = 'black',\n    // context.strokeStyle = tinycolor(color).toRgbString();\n    context.lineWidth = strokeWidth;\n    context.lineCap = linecap;\n    context.beginPath();\n    context.moveTo(x1, y1);\n    context.lineTo(x2, y2);\n    context.stroke();\n};\n\nexport const drawLineAngle = (context) => (x1, y1, angle, length, strokeWidth, linecap) => {\n    const vect = uvFromAngle(angle).setMag(length);\n    const x2 = x1 + vect.x;\n    const y2 = y1 + vect.y;\n    drawLine(context)(x1, y1, x2, y2, strokeWidth, linecap);\n};\n\nexport const drawCircle = (context) => (strokeWidth, x, y, radius, color) => {\n    if (color) {\n        context.strokeStyle = tinycolor(color).toRgbString();\n    }\n    context.lineWidth = strokeWidth;\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    // context.fillStyle = 'rgba(255,255,255,.1)';\n    // context.fill();\n    context.stroke();\n};\n\nexport const drawCircleFilled = (context) => (x, y, radius, color) => {\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    context.fillStyle = color;\n    context.fill();\n};\n\nexport const drawRect = (context) => (x, y, w, h, strokeWidth = 1, color) => {\n    if (color) {\n        context.strokeStyle = tinycolor(color).toRgbString();\n    }\n    context.lineWidth = strokeWidth;\n    context.rect(x, y, w, h);\n    context.stroke();\n};\n\nexport const drawRectFilled = (context) => (x, y, w, h, color = 'white') => {\n    context.fillStyle = tinycolor(color).toRgbString();\n    context.fillRect(x, y, w, h);\n};\n\nexport const drawSquareFilled = (context) => (x, y, size, color) => {\n    drawRectFilled(context)(x, y, size, size, color);\n};\n\nexport const drawTriangleFilled = (context) => (x, y, size, color) => {\n    const half = size / 2;\n    context.beginPath();\n    context.moveTo(x - half, y - half);\n    context.lineTo(x + half, y);\n    context.lineTo(x - half, y + half);\n    context.fillStyle = color.toRgbString();\n    context.fill();\n};\n\n// https://www.scriptol.com/html5/canvas/rounded-rectangle.php\n// TODO center on x,y\nexport const drawQuadRectFilled = (context) => (x, y, w, h, color) => {\n    const mx = x + w / 2;\n    const my = y + h / 2;\n    context.beginPath();\n    // context.strokeStyle = 'green';\n    // context.lineWidth = '4';\n    context.fillStyle = tinycolor(color).toRgbString();\n    context.moveTo(x, my);\n    context.quadraticCurveTo(x, y, mx, y);\n    context.quadraticCurveTo(x + w, y, x + w, my);\n    context.quadraticCurveTo(x + w, y + h, mx, y + h);\n    context.quadraticCurveTo(x, y + h, x, my);\n    // context.stroke();\n    context.fill();\n};\n\n// https://www.scriptol.com/html5/canvas/rounded-rectangle.php\n// TODO center on x,y\nexport const drawRoundRectFilled = (context) => (x, y, w, h, corner, color) => {\n    if (w < corner || h < corner) {\n        corner = Math.min(w, h);\n    }\n\n    const r = x + w;\n    const b = y + h;\n    context.beginPath();\n    // context.strokeStyle = 'green';\n    // context.lineWidth = '4';\n    context.fillStyle = tinycolor(color).toRgbString();\n    context.moveTo(x + corner, y);\n    context.lineTo(r - corner, y);\n    context.quadraticCurveTo(r, y, r, y + corner);\n    context.lineTo(r, y + h - corner);\n    context.quadraticCurveTo(r, b, r - corner, b);\n    context.lineTo(x + corner, b);\n    context.quadraticCurveTo(x, b, x, b - corner);\n    context.lineTo(x, y + corner);\n    context.quadraticCurveTo(x, y, x + corner, y);\n    // context.stroke();\n    context.fill();\n};\n\n// https://www.cssfontstack.com/\nexport const textStyles = {\n    size: (s) => `${s * contextScale}px \"Helvetica Neue\",Helvetica,Arial,sans-serif`,\n    sansHelvetica: (s) => `${s * contextScale}px \"Helvetica Neue\",Helvetica,Arial,sans-serif`,\n    monoCourier: (s) =>\n        `${s * contextScale}px \"Courier New\", Courier, \"Lucida Sans Typewriter\", \"Lucida Typewriter\", monospace`,\n    monoLucidia: (s) =>\n        `${\n            s * contextScale\n        }px \"Lucida Sans Typewriter\", \"Lucida Console\", monaco, \"Bitstream Vera Sans Mono\", monospace`,\n    serifGeorgia: (s) => `${s * contextScale}px Georgia, Times, \"Times New Roman\", serif`,\n    default: '16px \"Helvetica Neue\",Helvetica,Arial,sans-serif',\n    small: '12px \"Helvetica Neue\",Helvetica,Arial,sans-serif',\n};\n\nexport const drawTextFilled = (context) => (text, x, y, color, style) => {\n    context.fillStyle = tinycolor(color).toRgbString();\n    context.font = style || textStyles.sansHelvetica(16);\n    context.fillText(text, x, y);\n    // https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics\n    return context.measureText(text);\n};\n\nexport const setTextAlignLeftTop = (context) => {\n    context.textAlign = 'left';\n    context.textBaseline = 'top';\n};\n\nexport const setTextAlignAllCenter = (context) => {\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n};\n\n//----------------------------------------------------------------------------------------------------------------------\n// COMPLEX SHAPES\n//----------------------------------------------------------------------------------------------------------------------\n\n// TODO center it\nexport const drawRake = (context) => ({ x, y, radius, color }, spacing) => {\n    const points = 5;\n    spacing |= radius * 3;\n    for (let i = 0; i < points; i++) {\n        drawParticlePoint(context)({ x: x + spacing * i, y, radius, color });\n    }\n};\n\n// Spikes is an array of angles\nexport const drawSpikeCircle = (context) => ({ x, y, radius, color }, spikes, spikeLength = 5) => {\n    const circleStroke = 1;\n    const spikeStroke = 2;\n    context.strokeStyle = color.toRgbString();\n    context.lineWidth = circleStroke;\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    // context.fillStyle = 'rgba(255,255,255,.1)';\n    // context.fill();\n    context.stroke();\n    for (let s = 0; s < spikes.length; s++) {\n        const pointA = pointOnCircle(x, y, radius, spikes[s]);\n        const pointB = pointOnCircle(x, y, radius + spikeLength, spikes[s]);\n        context.strokeStyle = color.toRgbString();\n        drawLine(context)(pointA.x, pointA.y, pointB.x, pointB.y, spikeStroke);\n    }\n};\n\n// \"paint splatters\" around center point\nexport const splatter = (context) => (x, y, color, size, amount = 3, range = 20) => {\n    for (let i = 0; i < amount; i++) {\n        const s = randomWholeBetween(size * 0.25, size * 3);\n        // circle dist\n        const radius = randomWholeBetween(0, range);\n        const angle = randomNumberBetween(0, TAU);\n        const xoff = radius * Math.cos(angle);\n        const yoff = radius * Math.sin(angle);\n        // square dist\n        // const xoff = randomWholeBetween(-range, range);\n        // const yoff = randomWholeBetween(-range, range);\n        drawCircleFilled(context)(x + xoff, y + yoff, s, color);\n    }\n};\n\n// More detailed implementation https://blog.wolfram.com/2016/05/06/computational-stippling-can-machines-do-as-well-as-humans/\nexport const stippleRect = (context) => (x, y, width, height, color = 'black', amount = 5, mode = 'ticks') => {\n    if (amount <= 0) return;\n    amount = Math.min(amount, 10);\n    context.save();\n    const region = new Path2D();\n    region.rect(x, y, width, height);\n    context.clip(region);\n    const strokeColor = tinycolor(color).toRgbString();\n    const size = 3;\n    const colStep = mapRange(1, 10, 20, 3, amount);\n    const rowStep = mapRange(1, 10, 20, 3, amount);\n\n    context.strokeStyle = strokeColor;\n    context.lineWidth = 2;\n    context.lineCap = 'round';\n\n    for (let i = 0; i < width; i += colStep) {\n        for (let j = 0; j < height; j += rowStep) {\n            const tx = x + randomNormalWholeBetween(i, i + colStep);\n            const ty = y + randomNormalWholeBetween(j, j + rowStep);\n            const tx2 = tx + size;\n            const ty2 = ty + size * -1;\n            context.beginPath();\n            context.moveTo(tx, ty);\n            context.lineTo(tx2, ty2);\n            context.stroke();\n        }\n    }\n\n    context.restore();\n};\n\nexport const texturizeRect = (context) => (x, y, width, height, color = 'black', amount = 5, mode = 'circles') => {\n    if (amount <= 0) return;\n\n    context.save();\n    const region = new Path2D();\n    region.rect(x, y, width, height);\n    context.clip(region);\n    const half = width / 4;\n    const strokeColor = tinycolor(color).toRgbString();\n    const lineWidth = 1;\n    const fillamount = amount * 100;\n\n    for (let i = 0; i < fillamount; i++) {\n        const tx = randomWholeBetween(x, x + width);\n        const ty = randomWholeBetween(y, y + height);\n        const size = randomWholeBetween(half, width);\n\n        context.strokeStyle = strokeColor;\n        context.lineWidth = lineWidth;\n        context.beginPath();\n\n        if (mode === 'circles') {\n            context.arc(tx, ty, size, 0, Math.PI * 2, false);\n        } else if (mode === 'circles2') {\n            const tx = randomNormalWholeBetween(x, x + width);\n            const ty = randomNormalWholeBetween(y, y + height);\n            const size = randomWholeBetween(1, width);\n            context.arc(tx, ty, size, 0, Math.PI * 2, false);\n        } else if (mode === 'xhatch') {\n            const tx2 = tx + size * randomSign();\n            const ty2 = ty + size * randomSign();\n            context.moveTo(tx, ty);\n            context.lineTo(tx2, ty2);\n        }\n\n        context.stroke();\n    }\n    context.restore();\n};\n\n//----------------------------------------------------------------------------------------------------------------------\n// PARTICLE INTERACTIVITY\n//----------------------------------------------------------------------------------------------------------------------\n\nexport const drawRotatedParticle = (ctx, drawFn, particle, ...args) => {\n    const pSaveX = particle.x;\n    const pSaveY = particle.y;\n    particle.x = 0;\n    particle.y = 0;\n    ctx.save();\n    ctx.translate(pSaveX, pSaveY);\n    ctx.rotate(particle.heading);\n    drawFn(ctx)(particle, args);\n    ctx.restore();\n    particle.x = pSaveX;\n    particle.y = pSaveY;\n};\n\nexport const connectParticles = (context) => (pArray, proximity, useAlpha = true) => {\n    const len = pArray.length;\n    for (let a = 0; a < len; a++) {\n        // all consecutive particles\n        for (let b = a; b < len; b++) {\n            const pA = pArray[a];\n            const pB = pArray[b];\n            const distance = pointDistance(pA, pB);\n            if (distance < proximity) {\n                const pColor = pA.color;\n                if (useAlpha) {\n                    pColor.setAlpha(normalizeInverse(0, proximity, distance));\n                }\n                context.strokeStyle = pColor.toHslString();\n                drawLine(context)(pA.x, pA.y, pB.x, pB.y, 0.5);\n            }\n        }\n    }\n    resetStyles(context);\n};\n\nexport const drawPointTrail = (context) => (particle) => {\n    const trailLen = particle.xHistory.length;\n    context.lineWidth = particle.radius;\n    const pColor = particle.color;\n    const aFade = (100 / trailLen) * 0.01;\n    let alpha = 1;\n    const sFade = (particle.radius * 2) / trailLen;\n    let stroke = particle.radius * 2;\n    for (let i = 0; i < trailLen; i++) {\n        const startX = i === 0 ? particle.x : particle.xHistory[i - 1];\n        const startY = i === 0 ? particle.y : particle.yHistory[i - 1];\n        drawLine(context)(startX, startY, particle.xHistory[i], particle.yHistory[i], stroke);\n        pColor.setAlpha(alpha);\n        context.strokeStyle = pColor.toRgbString();\n        alpha -= aFade;\n        stroke -= sFade;\n    }\n};\n\n//----------------------------------------------------------------------------------------------------------------------\n// DEBUG\n//----------------------------------------------------------------------------------------------------------------------\n\nexport const drawTestPoint = (context) => ({ x, y, radius, color }) => {\n    context.strokeStyle = color.toRgbString();\n    context.lineWidth = 1;\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    context.fillStyle = 'rgba(255,255,255,.1)';\n    context.fill();\n    context.stroke();\n    drawLine(context)(x, y, x + radius, y, 1);\n};\n\nexport const drawParticleVectors = (context) => (particle) => {\n    const vmult = 5;\n    const amult = 100;\n    const vel = 'green';\n    const acc = 'yellow';\n    const { vVector } = particle;\n    const { aVector } = particle;\n\n    context.strokeStyle = tinycolor(vel).toRgbString();\n    drawLine(context)(particle.x, particle.y, particle.x + vVector.x * vmult, particle.y + vVector.y * vmult, 1);\n\n    context.strokeStyle = tinycolor(acc).toRgbString();\n    drawLine(context)(particle.x, particle.y, particle.x + aVector.x * amult, particle.y + aVector.y * amult, 1);\n};\n\nexport const drawMouse = (context) => ({ x, y, radius }) => {\n    if (x === undefined || y === undefined) return;\n    context.strokeStyle = 'rgba(255,255,255,.25)';\n    context.lineWidth = 1;\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    context.fillStyle = 'rgba(255,255,255,.1)';\n    context.fill();\n    context.stroke();\n};\n\nexport const drawAttractor = (context) => ({ x, y, mass, g }, mode, radius) => {\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    context.fillStyle = 'rgba(0,0,0,.1)';\n    context.fill();\n\n    context.beginPath();\n    context.arc(x, y, Math.sqrt(mass) * g, 0, Math.PI * 2, false);\n    context.fillStyle = mode === 1 ? 'rgba(0,255,0,.25)' : 'rgba(255,0,0,.25)';\n    context.fill();\n};\n\nexport const renderField = ({ width, height }, context, fn, color = 'black', cell = '50', length) => {\n    const mid = cell / 2;\n    for (let x = 0; x < width; x += cell) {\n        for (let y = 0; y < height; y += cell) {\n            const theta = fn(x, y);\n            const vect = uvFromAngle(theta).setMag(length || mid);\n            const x1 = x + mid;\n            const y1 = y + mid;\n            const x2 = x1 + vect.x;\n            const y2 = y1 + vect.y;\n            context.strokeStyle = tinycolor(color);\n            context.lineWidth = 1;\n            context.beginPath();\n            context.moveTo(x1, y1);\n            context.lineTo(x2, y2);\n            context.stroke();\n        }\n    }\n};\n","export const defaultValue = (obj, key, value) => (obj.hasOwnProperty(key) ? obj[key] : value);\n","/*\nConvenience canvas sketch runner. Based on p5js\n\n\nconst variation = () => {\n    const config = {};\n\n    const setup = ({canvas, context}) => {\n        // create initial state\n    };\n\n    // will run every frame\n    const draw = ({canvas, context, mouse}) => {\n        // draw on every frame\n        return 1; // -1 to exit animation loop\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n\nTODO\n- [ ] merge screen shot code\n- [ ] Canvas Recorder  https://xosh.org/canvas-recorder/\n- [ ] coords of a mouse down to variation?\n- [ ] better touch input\n- [ ] svg https://github.com/canvg/canvg\n- [ ] great ideas here http://paperjs.org/features/\n*/\n\nimport { isHiDPI, contextScale, resizeCanvas } from './canvas';\nimport { getRandomSeed, golden } from './math';\nimport { defaultValue } from './utils';\n\nexport const orientation = {\n    portrait: 0,\n    landscape: 1,\n};\n\nexport const ratio = {\n    letter: 0.773, // 8.5x11\n    poster: 0.667, // 24x36\n    golden: golden - 1,\n    square: -1,\n    auto: 1,\n};\n\nexport const scale = {\n    standard: 1,\n    hidpi: 2,\n};\n\nexport const sketch = () => {\n    const mouse = {\n        x: undefined,\n        y: undefined,\n        isDown: false,\n        radius: 100,\n    };\n\n    let hasStarted = false;\n\n    let fps = 0;\n\n    let currentVariationFn;\n    let currentVariationRes;\n    let animationId;\n\n    const canvasSizeFraction = 0.9;\n    const canvas = document.getElementById('canvas');\n    const context = canvas.getContext('2d');\n\n    const getCanvas = (_) => canvas;\n    const getContext = (_) => context;\n    const getMouse = (_) => mouse;\n\n    const mouseDown = (evt) => {\n        mouse.isDown = true;\n    };\n\n    const mouseMove = (evt) => {\n        const mult = isHiDPI ? 2 : 1;\n        const canvasFrame = canvas.getBoundingClientRect();\n        mouse.x = (evt.x - canvasFrame.x) * mult;\n        mouse.y = (evt.y - canvasFrame.y) * mult;\n    };\n\n    const mouseUp = (evt) => {\n        mouse.isDown = false;\n    };\n\n    const mouseOut = (evt) => {\n        mouse.x = undefined;\n        mouse.y = undefined;\n        mouse.isDown = false;\n    };\n\n    window.addEventListener('mousedown', mouseDown);\n    window.addEventListener('touchstart', mouseDown);\n\n    window.addEventListener('mousemove', mouseMove);\n    window.addEventListener('touchmove', mouseMove);\n\n    window.addEventListener('mouseup', mouseUp);\n    window.addEventListener('touchend', mouseUp);\n\n    window.addEventListener('mouseout', mouseOut);\n    window.addEventListener('touchcancel', mouseOut);\n\n    const applyCanvasSize = (config) => {\n        const width = defaultValue(config, 'width', window.innerWidth * canvasSizeFraction);\n        const height = defaultValue(config, 'height', window.innerHeight * canvasSizeFraction);\n        let newWidth = width;\n        let newHeight = height;\n\n        const cfgOrientation = defaultValue(config, 'orientation', orientation.landscape);\n        const cfgRatio = defaultValue(config, 'ratio', ratio.auto);\n        const cfgScale = defaultValue(config, 'scale', scale.standard);\n\n        const aSide = Math.min(width, height);\n        const bSide = Math.round(cfgRatio * aSide);\n\n        if (cfgRatio === ratio.square) {\n            newWidth = aSide;\n            newHeight = aSide;\n        } else if (cfgOrientation === orientation.portrait) {\n            newWidth = bSide;\n            newHeight = aSide;\n        } else if (cfgOrientation === orientation.landscape && cfgRatio !== ratio.auto) {\n            console.log('land');\n            newWidth = aSide;\n            newHeight = bSide;\n        }\n\n        resizeCanvas(canvas, context, newWidth, newHeight, cfgScale);\n    };\n\n    const run = (variation) => {\n        currentVariationFn = variation;\n\n        currentVariationRes = currentVariationFn();\n\n        let backgroundColor;\n\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        if (currentVariationRes.hasOwnProperty('config')) {\n            const { config } = currentVariationRes;\n            applyCanvasSize(config);\n            if (config.background) {\n                backgroundColor = config.background;\n            }\n            if (config.fps) {\n                fps = config.fps;\n            }\n        } else {\n            resizeCanvas(\n                canvas,\n                context,\n                window.innerWidth * canvasSizeFraction,\n                window.innerHeight * canvasSizeFraction\n            );\n        }\n\n        let rendering = true;\n        const targetFpsInterval = 1000 / fps;\n        let lastAnimationFrameTime;\n\n        // context.translate(0.5, 0.5);\n\n        const startSketch = () => {\n            window.removeEventListener('load', startSketch);\n            hasStarted = true;\n\n            currentVariationRes.setup({ canvas, context, s: this });\n\n            const render = () => {\n                const result = currentVariationRes.draw({ canvas, context, mouse });\n                if (result !== -1) {\n                    animationId = requestAnimationFrame(render);\n                }\n            };\n\n            // https://stackoverflow.com/questions/19764018/controlling-fps-with-requestanimationframe\n            const renderAtFps = () => {\n                if (rendering) {\n                    animationId = window.requestAnimationFrame(renderAtFps);\n                }\n\n                const now = Date.now();\n                const elapsed = now - lastAnimationFrameTime;\n\n                if (elapsed > targetFpsInterval) {\n                    lastAnimationFrameTime = now - (elapsed % targetFpsInterval);\n                    const result = currentVariationRes.draw({ canvas, context, mouse });\n                    if (result === -1) {\n                        rendering = false;\n                    }\n                }\n            };\n\n            if (!fps) {\n                animationId = window.requestAnimationFrame(render);\n            } else {\n                lastAnimationFrameTime = Date.now();\n                animationId = window.requestAnimationFrame(renderAtFps);\n            }\n        };\n\n        if (!hasStarted) {\n            window.addEventListener('load', startSketch);\n        } else {\n            startSketch();\n        }\n    };\n\n    const stop = () => {\n        window.cancelAnimationFrame(animationId);\n    };\n\n    const getVariationName = () => {\n        const seed = getRandomSeed();\n        let name = 'untitled';\n        if (\n            currentVariationRes &&\n            currentVariationRes.hasOwnProperty('config') &&\n            currentVariationRes.config.hasOwnProperty('name')\n        ) {\n            name = currentVariationRes.config.name;\n        }\n        return `sketch-${name}-${seed}`;\n    };\n\n    const windowResize = (evt) => {\n        // resizeCanvas(canvas, context, window.innerWidth * canvasSizeFraction, window.innerHeight * canvasSizeFraction);\n        if (animationId) {\n            stop();\n            run(currentVariationFn);\n        }\n    };\n    window.addEventListener('resize', windowResize);\n\n    return {\n        variationName: getVariationName,\n        canvas: getCanvas,\n        context: getContext,\n        mouse: getMouse,\n        run,\n        stop,\n        s: sketch,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport { pointDistance, normalizeInverse, randomNumberBetween, lerp, pointAngleFromVelocity, clamp } from './math';\nimport { Vector } from './Vector';\n\nconst MAX_COORD_HISTORY = 30;\n\nconst limitArrayLen = (arr) => {\n    const arrLength = arr.length;\n    if (arrLength > MAX_COORD_HISTORY) {\n        arr.splice(0, arrLength - MAX_COORD_HISTORY);\n    }\n    return arr;\n};\n\nexport class Particle {\n    #x;\n\n    #y;\n\n    #color;\n\n    constructor(values) {\n        this.initValues(values);\n    }\n\n    initValues({\n        index,\n        x,\n        y,\n        velocityX,\n        velocityY,\n        accelerationX,\n        accelerationY,\n        radius,\n        mass,\n        color,\n        alpha,\n        rotation,\n        lifetime,\n        drawFn,\n        updateFn,\n        colorFn,\n        ...rest\n    }) {\n        this.props = rest;\n        this.index = index || 0;\n        this.#x = x || 0;\n        this.#y = y || 0;\n        this.xHistory = [x];\n        this.yHistory = [y];\n        this.oX = x || this.oX;\n        this.oY = y || this.oY;\n        this.velocityX = velocityX || 0;\n        this.velocityY = velocityY || 0;\n        this.accelerationX = accelerationX || 0;\n        this.accelerationY = accelerationY || 0;\n        this.mass = mass || 1;\n        this.radius = radius || 1;\n        this.#color = color ? tinycolor(color) : tinycolor({ r: 255, g: 255, b: 255 });\n        this.rotation = rotation || 0;\n        this.lifetime = lifetime || 1;\n        this.drawFn = drawFn;\n        this.updateFn = updateFn;\n        // must always return a string\n        this.colorFn = colorFn;\n    }\n\n    get color() {\n        if (this.colorFn) {\n            return tinycolor(this.colorFn(this));\n        }\n        return this.#color;\n    }\n\n    set color(value) {\n        this.#color = tinycolor(value);\n    }\n\n    get colorStr() {\n        if (this.colorFn) {\n            const res = this.colorFn(this);\n            if (typeof res !== 'string') {\n                console.warn('Particle color fn must return a string!');\n                return '#ff0000';\n            }\n            return res;\n        }\n        return this.#color.toRgbString();\n    }\n\n    get x() {\n        return this.#x;\n    }\n\n    set x(value) {\n        this.#x = value;\n        this.xHistory.unshift(value);\n        if (this.xHistory.length > MAX_COORD_HISTORY) {\n            this.xHistory = this.xHistory.slice(0, MAX_COORD_HISTORY);\n        }\n    }\n\n    get y() {\n        return this.#y;\n    }\n\n    set y(value) {\n        this.#y = value;\n        this.yHistory.unshift(value);\n        if (this.yHistory.length > MAX_COORD_HISTORY) {\n            this.yHistory = this.yHistory.slice(0, MAX_COORD_HISTORY);\n        }\n    }\n\n    get vVector() {\n        return new Vector(this.velocityX, this.velocityY, 0);\n    }\n\n    set vVector({ x, y }) {\n        this.velocityX = x;\n        this.velocityY = y;\n    }\n\n    get aVector() {\n        return new Vector(this.accelerationX, this.accelerationY, 0);\n    }\n\n    set aVector({ x, y }) {\n        this.accelerationX = x;\n        this.accelerationY = y;\n    }\n\n    // Rotation angle to point in direction of velocity\n    get heading() {\n        return pointAngleFromVelocity(this);\n    }\n\n    reverseVelocityX() {\n        this.velocityX *= -1;\n    }\n\n    reverseVelocityY() {\n        this.velocityY *= -1;\n    }\n\n    draw() {\n        this.drawFn(this);\n    }\n\n    update() {\n        this.updateFn(this);\n        this.draw(this);\n    }\n}\n\n//----------------------------------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------------------------------\n\nexport const pixel = (x, y, color, radius) => new Particle({ x, y, color, radius });\n\nexport const psCanvasRandom = ({ width, height }) => ({\n    x: randomNumberBetween(0, width),\n    y: randomNumberBetween(0, height),\n});\n\nexport const createRandomParticleValues = ({ width, height }) => {\n    const vel = 2;\n    const radius = randomNumberBetween(5, 10);\n    const coords = psCanvasRandom({ width, height });\n    return {\n        radius,\n        x: coords.x,\n        y: coords.y,\n        mass: randomNumberBetween(1, 10),\n        velocityX: randomNumberBetween(-vel, vel),\n        velocityY: randomNumberBetween(-vel, vel),\n        accelerationX: 0,\n        accelerationY: 0,\n        rotation: randomNumberBetween(-180, 180),\n        // color: { r: randomNumberBetween(100, 255), g: randomNumberBetween(100, 255), b: randomNumberBetween(100, 255) },\n        color: {\n            r: lerp(0, 255, coords.x / width),\n            g: randomNumberBetween(100, 255),\n            b: lerp(0, 255, coords.y / height),\n        },\n    };\n};\n\n//----------------------------------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------------------------------\n\nexport const updatePosWithVelocity = (particle) => {\n    particle.x += particle.vVector.x;\n    particle.y += particle.vVector.y;\n};\n\n// https://www.youtube.com/watch?v=L7CECWLdTmo\nexport const applyForce = (fVect, particle) => {\n    const fV = fVect.div(particle.mass);\n    const aV = particle.aVector.add(fV);\n    const pV = particle.vVector.add(aV);\n    particle.aVector = aV;\n    particle.vVector = pV;\n};\n\n// https://www.youtube.com/watch?v=WBdhAuWS6X8\nexport const friction = (particle, mu = 0.1) => {\n    const normal = particle.mass;\n    const vfriction = particle.vVector\n        .normalize()\n        .mult(-1)\n        .setMag(mu * normal);\n    applyForce(vfriction, particle);\n};\n\n// https://www.youtube.com/watch?v=DxFDgOYEoy8\nexport const drag = (particle, coefficent = 0.1) => {\n    const area = 1; // particle.radius;\n    const velUnit = particle.vVector.normalize().mult(-1);\n    const speed = particle.vVector.magSq() * area * coefficent;\n    const vdrag = velUnit.setMag(speed);\n    applyForce(vdrag, particle);\n};\n\n// https://www.youtube.com/watch?v=EpgB3cNhKPM\n// mode 1 is attract, -1 is repel\n// const attractor = { x: canvas.width / 2, y: canvas.height / 2, mass: 50, g: 1 };\nexport const attract = ({ x, y, mass, g }, particle, mode = 1, affectDist = 1000) => {\n    if (pointDistance({ x, y }, { x: particle.x, y: particle.y }) < affectDist) {\n        g = g || 1;\n        const dir = new Vector(x, y).sub(new Vector(particle.x, particle.y));\n        const distanceSq = clamp(50, 5000, dir.magSq());\n        const strength = (mode * (g * (mass * particle.mass))) / distanceSq;\n        const force = dir.setMag(strength);\n        applyForce(force, particle);\n    }\n};\n\n//----------------------------------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------------------------------\n\nexport const edgeBounce = ({ width, height }, particle) => {\n    if (particle.x + particle.radius > width) {\n        particle.reverseVelocityX();\n        particle.x = width - particle.radius;\n    }\n    if (particle.x - particle.radius < 0) {\n        particle.reverseVelocityX();\n        particle.x = particle.radius;\n    }\n    if (particle.y + particle.radius > height) {\n        particle.reverseVelocityY();\n        particle.y = height - particle.radius;\n    }\n    if (particle.y - particle.radius < 0) {\n        particle.reverseVelocityY();\n        particle.y = particle.radius;\n    }\n};\n\nexport const edgeWrap = ({ width, height }, particle) => {\n    if (particle.x + particle.radius > width) {\n        particle.x = 0 + particle.radius;\n    } else if (particle.x - particle.radius < 0) {\n        particle.x = width - particle.radius;\n    }\n    if (particle.y + particle.radius > height) {\n        particle.y = 0 + particle.radius;\n    } else if (particle.y - particle.radius < 0) {\n        particle.y = height - particle.radius;\n    }\n};\n\n//----------------------------------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------------------------------\n\nexport const gravityPoint = (mult = 0.2, f = 1) => (x, y, radius, particle) => {\n    const distance = pointDistance({ x, y }, particle);\n    if (distance < radius) {\n        const dx = x - particle.x;\n        const dy = y - particle.y;\n        const forceDirectionX = dx / distance;\n        const forceDirectionY = dy / distance;\n        const force = normalizeInverse(0, radius, distance) * f * mult;\n        const tempX = forceDirectionX * force * particle.radius * 2;\n        const tempY = forceDirectionY * force * particle.radius * 2;\n        particle.x += tempX;\n        particle.y += tempY;\n    }\n};\n\n// for moving points, push away/around from point\nexport const avoidPoint = (point, particle, f = 1) => {\n    gravityPoint(1, (f *= -1))(point.x, point.y, point.radius, particle);\n};\n\n// for moving points, pull towards point\nexport const attractPoint = (point, particle, f = 1) => {\n    gravityPoint(1, f)(point.x, point.y, point.radius, particle);\n};\n\n// for moving static, push away/outward from point\nexport const pointPush = (point, particle, f = 1) => {\n    const dx = point.x - particle.x;\n    const dy = point.y - particle.y;\n    const distance = pointDistance(point, particle);\n    const forceDirectionX = dx / distance;\n    const forceDirectionY = dy / distance;\n    const force = normalizeInverse(0, point.radius, distance) * f;\n    particle.velocityX = forceDirectionX * force * particle.mass * 0.8;\n    particle.velocityY = forceDirectionY * force * particle.mass * 0.8;\n\n    if (distance < point.radius) {\n        particle.x -= particle.velocityX;\n        particle.y -= particle.velocityY;\n    } else {\n        // TODO if < 1 then snap to 0\n        if (particle.x !== particle.oX) {\n            particle.x -= (particle.x - particle.oX) * 0.1;\n        }\n        if (particle.y !== particle.oY) {\n            particle.y -= (particle.y - particle.oY) * 0.1;\n        }\n    }\n};\n","import {\n    attractPoint,\n    avoidPoint,\n    edgeBounce,\n    Particle,\n    updatePosWithVelocity,\n    createRandomParticleValues,\n} from '../lib/Particle';\nimport { clearCanvas, connectParticles, drawMouse, drawParticlePoint, drawPointTrail, fillCanvas } from '../lib/canvas';\n\n// Based on https://www.youtube.com/watch?v=d620nV6bp0A\nexport const variation1 = () => {\n    const numParticles = 100;\n    const particlesArray = [];\n\n    let canvasCenterX;\n    let canvasCenterY;\n    let centerRadius;\n\n    const setup = ({ canvas, context }) => {\n        canvasCenterX = canvas.width / 2;\n        canvasCenterY = canvas.height / 2;\n        centerRadius = canvas.height / 4;\n\n        for (let i = 0; i < numParticles; i++) {\n            const props = createRandomParticleValues(canvas);\n            props.radius = 5;\n            particlesArray.push(new Particle(props));\n        }\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        fillCanvas(canvas, context)();\n\n        for (let i = 0; i < numParticles; i++) {\n            updatePosWithVelocity(particlesArray[i]);\n            edgeBounce(canvas, particlesArray[i]);\n            avoidPoint({ radius: centerRadius, x: canvasCenterX, y: canvasCenterY }, particlesArray[i], 4);\n            attractPoint(mouse, particlesArray[i], mouse.isDown ? -1 : 1);\n            drawParticlePoint(context)(particlesArray[i]);\n            drawPointTrail(context)(particlesArray[i]);\n        }\n        connectParticles(context)(particlesArray, 200);\n        drawMouse(context)(mouse);\n    };\n\n    return {\n        setup,\n        draw,\n    };\n};\n","import { avoidPoint, Particle, createRandomParticleValues } from '../lib/Particle';\nimport { clearCanvas, connectParticles, drawMouse, drawParticlePoint } from '../lib/canvas';\nimport { randomNumberBetween } from '../lib/math';\n\n// Based on https://www.youtube.com/watch?v=j_BgnpMPxzM\nexport const variation2 = () => {\n    const config = {\n        friction: 0.8,\n        gravity: 1,\n        decay: 0.05,\n        tweenDamp: 0.1,\n        margin: 50,\n        intensity: 0,\n        numParticles: 200,\n    };\n\n    const particlesArray = [];\n\n    const setup = ({ canvas, context }) => {\n        for (let i = 0; i < config.numParticles; i++) {\n            particlesArray.push(new Particle(createRandomParticleValues(canvas)));\n        }\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        clearCanvas(canvas, context)();\n\n        for (let i = 0; i < config.numParticles; i++) {\n            particlesArray[i].radius -= config.decay;\n            if (particlesArray[i].radius <= 0) {\n                const newValues = createRandomParticleValues(canvas);\n                const newCoords = mouse;\n                newValues.x = newCoords.x + randomNumberBetween(-10, 10);\n                newValues.y = newCoords.y + randomNumberBetween(-10, 10);\n                particlesArray[i].initValues(newValues);\n            }\n            particlesArray[i].y += particlesArray[i].mass * (mouse.isDown ? 1 : 0.2);\n            particlesArray[i].mass += 0.2 * config.gravity;\n            if (\n                particlesArray[i].y + particlesArray[i].radius > canvas.height ||\n                particlesArray[i].y - particlesArray[i].radius < 0\n            ) {\n                particlesArray[i].mass *= -1;\n            }\n\n            avoidPoint(mouse, particlesArray[i]);\n            // attractPoint(psMouseCoords(), particlesArray[i]);\n            drawParticlePoint(context)(particlesArray[i]);\n            // drawPointTrail(context)(particlesArray[i]);\n        }\n        connectParticles(context)(particlesArray, 100);\n        drawMouse(context)(mouse);\n\n        return 1;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import domokunPng from '../../media/images/domokun.png';\nimport { clearCanvas, drawMouse, drawSquareFilled, background } from '../lib/canvas';\nimport { randomNumberBetween, scalePointToCanvas } from '../lib/math';\nimport { Particle, pointPush } from '../lib/Particle';\n\nconst getImageDataFromImage = (context) => (image) => {\n    context.drawImage(image, 0, 0);\n    return context.getImageData(0, 0, image.width, image.width);\n};\n\nconst getImageDataColor = (imageData, x, y) => ({\n    r: imageData.data[y * 4 * imageData.width + x * 4],\n    g: imageData.data[y * 4 * imageData.width + x * 4 + 1],\n    b: imageData.data[y * 4 * imageData.width + x * 4 + 2],\n    a: imageData.data[y * 4 * imageData.width + x * 4 + 3],\n});\n\n// Based on https://www.youtube.com/watch?v=afdHgwn1XCY\nexport const domokun = (_) => {\n    const config = {\n        width: 600,\n        height: 600,\n    };\n\n    let numParticles;\n    const imageSize = 100; // square\n    const png = new Image();\n    png.src = domokunPng;\n    const particlesArray = [];\n\n    const setup = ({ canvas, context }) => {\n        const imageData = getImageDataFromImage(context)(png);\n        clearCanvas(canvas, context)();\n\n        const imageZoomFactor = canvas.width / imageSize;\n        const cropColor = 255 / 2;\n\n        for (let y = 0, { height } = imageData; y < height; y++) {\n            for (let x = 0, { width } = imageData; x < width; x++) {\n                const pxColor = getImageDataColor(imageData, x, y);\n                if (pxColor.a > cropColor) {\n                    const points = scalePointToCanvas(\n                        canvas.width,\n                        canvas.height,\n                        imageData.width,\n                        imageData.height,\n                        imageZoomFactor,\n                        x,\n                        y\n                    );\n                    const pX = points.x;\n                    const pY = points.y;\n                    const mass = randomNumberBetween(2, 12);\n                    const color = pxColor;\n                    const radius = imageZoomFactor;\n                    particlesArray.push(new Particle({ x: pX, y: pY, mass, color, radius }));\n                }\n            }\n        }\n\n        numParticles = particlesArray.length;\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        background(canvas, context)('yellow');\n\n        for (let i = 0; i < numParticles; i++) {\n            pointPush(mouse, particlesArray[i], mouse.isDown ? -1 : 1);\n            drawSquareFilled(context)(\n                particlesArray[i].x,\n                particlesArray[i].y,\n                particlesArray[i].radius,\n                particlesArray[i].color\n            );\n        }\n        // drawMouse(context)(mouse);\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import { createRandomParticleValues, Particle, pointPush } from '../lib/Particle';\nimport { connectParticles, drawParticlePoint, fillCanvas } from '../lib/canvas';\n\nexport const variation4 = () => {\n    const config = {\n        numParticles: 0,\n    };\n\n    const particlesArray = [];\n    const circles = [];\n\n    const setup = ({ canvas, context }) => {\n        const centerX = canvas.width / 2;\n        const centerY = canvas.height / 2;\n        const diameter = canvas.height / 4;\n        const steps = 10;\n\n        for (let theta = 0; theta < 360; theta += steps) {\n            const rad = theta * (Math.PI / 180);\n            const x = Math.cos(rad) * diameter + centerX;\n            const y = Math.sin(rad) * diameter + centerY;\n            circles.push([x, y]);\n            const props = createRandomParticleValues(canvas);\n            props.x = x;\n            props.y = y;\n            props.radius = 1;\n            props.color = { r: 0, g: 0, b: 0 };\n            props.index = circles.length - 1;\n            particlesArray.push(new Particle(props));\n        }\n        config.numParticles = particlesArray.length;\n        fillCanvas(canvas, context)(1, '255,255,255');\n    };\n\n    // will run every frame\n    const draw = ({ canvas, context, mouse }) => {\n        fillCanvas(canvas, context)(0.005, '255,255,255');\n        for (let i = 0; i < config.numParticles; i++) {\n            pointPush(mouse, particlesArray[i], mouse.isDown ? -1 : 5);\n            drawParticlePoint(context)(particlesArray[i]);\n            // let index = particlesArray[i].index + 1;\n            // if(index === circles.length) {\n            //     index = 0;\n            // }\n            // particlesArray[i].x = circles[index][0];\n            // particlesArray[i].y = circles[index][1];\n            // particlesArray.index = index;\n        }\n        connectParticles(context)(particlesArray, 200);\n        return 1; // -1 to exit animation loop\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import {\n    attractPoint,\n    avoidPoint,\n    edgeBounce,\n    Particle,\n    updatePosWithVelocity,\n    createRandomParticleValues,\n} from '../lib/Particle';\nimport { clearCanvas, connectParticles, drawMouse, drawParticlePoint, drawPointTrail, fillCanvas } from '../lib/canvas';\nimport { randomNumberBetween } from '../lib/math';\n\nexport const variation5 = () => {\n    const config = {\n        numParticles: 50,\n    };\n\n    const particlesArray = [];\n    const circles = [];\n\n    const setup = ({ canvas, context }) => {\n        for (let i = 0; i < config.numParticles; i++) {\n            const props = createRandomParticleValues(canvas);\n            props.x = canvas.width / 2;\n            props.y = canvas.height / 2;\n            props.color = { r: 0, g: 0, b: 0 };\n            props.radius = 0.5;\n            particlesArray.push(new Particle(props));\n        }\n        const centerX = canvas.width / 2;\n        const centerY = canvas.height / 2;\n        const diameter = canvas.height / 4;\n        const steps = 30;\n        for (let theta = 0; theta < 360; theta += steps) {\n            const rad = theta * (Math.PI / 180);\n            const x = Math.cos(rad) * diameter + centerX;\n            const y = Math.sin(rad) * diameter + centerY;\n            circles.push([x, y, randomNumberBetween(20, 100)]);\n        }\n        fillCanvas(canvas, context)(1, '255,255,255');\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        // fillCanvas(canvas, context)(.005,'255,255,255');\n        for (let i = 0; i < config.numParticles; i++) {\n            updatePosWithVelocity(particlesArray[i]);\n            edgeBounce(canvas, particlesArray[i]);\n            for (let c = 0; c < circles.length; c++) {\n                avoidPoint({ radius: circles[c][2], x: circles[c][0], y: circles[c][1] }, particlesArray[i], 4);\n            }\n            drawParticlePoint(context)(particlesArray[i]);\n        }\n        connectParticles(context)(particlesArray, 50);\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import {\n    avoidPoint,\n    Particle,\n    createRandomParticleValues,\n    updatePosWithVelocity,\n    edgeBounce,\n    gravityPoint,\n} from '../lib/Particle';\nimport { fillCanvas, connectParticles, drawMouse, drawParticlePoint } from '../lib/canvas';\nimport { mapRange, randomNumberBetween } from '../lib/math';\n\n// Based on https://www.youtube.com/watch?v=j_BgnpMPxzM\nexport const variation6 = () => {\n    const numParticles = 200;\n    const particlesArray = [];\n    let hue = 0;\n\n    const setup = ({ canvas, context }) => {\n        for (let i = 0; i < numParticles; i++) {\n            const initValues = createRandomParticleValues(canvas);\n            initValues.color = { r: 255, g: 255, b: 255 };\n            particlesArray.push(new Particle(initValues));\n        }\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        fillCanvas(canvas, context)(0.08);\n        if (hue++ > 361) hue = 0;\n        for (let i = 0; i < numParticles; i++) {\n            particlesArray[i].radius -= 0.05;\n            if (particlesArray[i].radius <= 0) {\n                const initValues = createRandomParticleValues(canvas);\n                initValues.x = mouse.x ? mouse.x : canvas.width / 2;\n                initValues.y = mouse.y ? mouse.y : canvas.height / 2;\n                // let h = lerpRange(0,canvas.width,100,200,initValues.x);\n                const s = mapRange(0, 10, 0, 100, initValues.radius);\n                const l = mapRange(0, 10, 25, 75, initValues.radius);\n                initValues.color = `hsl(${hue},${s}%,${l}%)`;\n                particlesArray[i].initValues(initValues);\n            }\n            updatePosWithVelocity(particlesArray[i]);\n            edgeBounce(canvas, particlesArray[i]);\n\n            gravityPoint()(canvas.width / 2, canvas.height, 2000, particlesArray[i]);\n            // gravityPoint({x:canvas.width/2, y:canvas.height}, particlesArray[i])\n            drawParticlePoint(context)(particlesArray[i]);\n        }\n        // connectParticles(context)(particlesArray, 100);\n        return 1;\n    };\n\n    return {\n        setup,\n        draw,\n    };\n};\n","import { edgeBounce, Particle, updatePosWithVelocity, createRandomParticleValues, attract } from '../lib/Particle';\nimport { drawRotatedParticle, background, drawRake } from '../lib/canvas';\n\nexport const rainbowRakeOrbit = () => {\n    const config = {\n        // width: 700,\n        // height: 700,\n        // fps: 30,\n    };\n\n    const numParticles = 50;\n    const particlesArray = [];\n\n    const attractor = { x: canvas.width / 2, y: canvas.height / 2, mass: 100, g: 20 };\n\n    let canvasCenterX;\n    let canvasCenterY;\n    let centerRadius;\n\n    const setup = ({ canvas, context }) => {\n        canvasCenterX = canvas.width / 2;\n        canvasCenterY = canvas.height / 2;\n        centerRadius = canvas.height / 4;\n\n        for (let i = 0; i < numParticles; i++) {\n            const props = createRandomParticleValues(canvas);\n            props.radius = 1; // Math.sqrt(props.mass);\n            particlesArray.push(new Particle(props));\n        }\n    };\n\n    // const targetX = mouse.x ? mouse.x : canvas.width / 2;\n    // const targetY = mouse.y ? mouse.y : canvas.height / 2;\n    // accelerateToPoint(targetX, targetY, particlesArray[i]);\n    // https://www.youtube.com/watch?v=T84AWnntxZA\n    // const accelerateToPoint = (targetX, targetY, particle) => {\n    //     const magnitude = 0.001;\n    //     const vLimit = 5;\n    //     const accX = ((targetX - particle.x) * magnitude) / particle.mass;\n    //     const accY = ((targetY - particle.y) * magnitude) / particle.mass;\n    //     particle.velocityX += accX;\n    //     particle.velocityY += accY;\n    //     particle.velocityX = clamp(-vLimit, vLimit, particle.velocityX);\n    //     particle.velocityY = clamp(-vLimit, vLimit, particle.velocityY);\n    // };\n\n    const draw = ({ canvas, context, mouse }) => {\n        background(canvas, context)({ r: 0, g: 0, b: 50, a: 0.01 });\n\n        let mode = 1;\n\n        attractor.x = mouse.x ? mouse.x : canvasCenterX;\n        attractor.y = mouse.y ? mouse.y : canvasCenterY;\n\n        for (let i = 0; i < numParticles; i++) {\n            if (mouse.isDown) {\n                mode = -1;\n            } else {\n                mode = 1;\n            }\n            attract(attractor, particlesArray[i], mode, 2000);\n            particlesArray[i].vVector = particlesArray[i].vVector.limit(20);\n            updatePosWithVelocity(particlesArray[i]);\n            edgeBounce(canvas, particlesArray[i]);\n            drawRotatedParticle(context, drawRake, particlesArray[i]);\n            particlesArray[i].aVector = { x: 0, y: 0 };\n        }\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import { createRandomNumberArray, pointOnCircle, randomNumberBetween, createGridPointsXY, mapRange } from '../lib/math';\nimport {\n    attractPoint,\n    avoidPoint,\n    edgeBounce,\n    Particle,\n    updatePosWithVelocity,\n    createRandomParticleValues,\n    edgeWrap,\n    attract,\n} from '../lib/Particle';\nimport {\n    background,\n    clearCanvas,\n    connectParticles,\n    drawMouse,\n    drawLine,\n    drawParticlePoint,\n    drawPointTrail,\n    fillCanvas,\n    drawSpikeCircle,\n    drawAttractor,\n} from '../lib/canvas';\n\nexport const threeAttractors = () => {\n    const config = {\n        // width: 500,\n        // height: 500,\n        // fps: 24,\n    };\n\n    let numParticles;\n    const particlesArray = [];\n    let gridPoints = [];\n    const hue = 0;\n\n    let attractorDist;\n\n    let leftattractor;\n    let midattractor;\n    let rightattractor;\n\n    let canvasCenterX;\n    let canvasCenterY;\n    let centerRadius;\n\n    const setup = ({ canvas, context }) => {\n        canvasCenterX = canvas.width / 2;\n        canvasCenterY = canvas.height / 2;\n        centerRadius = canvas.height / 4;\n\n        attractorDist = canvas.width / 0.7;\n\n        leftattractor = { x: 0, y: canvas.height / 2, mass: 10, g: 3 };\n        midattractor = { x: canvas.width / 2, y: canvas.height / 2, mass: 50, g: 10 };\n        rightattractor = { x: canvas.width, y: canvas.height / 2, mass: 10, g: 3 };\n\n        gridPoints = createGridPointsXY(canvas.width, canvas.height, 100, 100, canvas.width / 50, canvas.height / 50)\n            .points;\n        numParticles = gridPoints.length;\n\n        for (let i = 0; i < numParticles; i++) {\n            const props = createRandomParticleValues(canvas);\n            props.x = gridPoints[i][0];\n            props.y = gridPoints[i][1];\n            props.velocityX = 0;\n            props.velocityY = 0;\n            props.mass = 1;\n            props.radius = 1; // randomNumberBetween(10, 30);\n            props.spikes = createRandomNumberArray(20, 0, 360);\n\n            const h = mapRange(0, canvas.width, 0, 90, props.x);\n            const s = 100; // lerpRange(0,10,0,100,prop.radius);\n            const l = 50; // lerpRange(0,10,25,75,prop.radius);\n            props.color = `hsla(${h},${s}%,${l}%,0.1)`;\n\n            // props.color = { r: 0, g: 0, b: 0, a: 0.1 };\n\n            particlesArray.push(new Particle(props));\n        }\n\n        background(canvas, context)('white');\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        // background(canvas, context)({ r: 255, g: 255, b: 255, a: 0.001 });\n        for (let i = 0; i < numParticles; i++) {\n            attract(leftattractor, particlesArray[i], -1, attractorDist);\n            attract(midattractor, particlesArray[i], 1, attractorDist);\n            attract(rightattractor, particlesArray[i], -1, attractorDist);\n\n            particlesArray[i].vVector = particlesArray[i].vVector.limit(10);\n\n            updatePosWithVelocity(particlesArray[i]);\n            // edgeBounce(canvas, particlesArray[i]);\n            drawParticlePoint(context)(particlesArray[i]);\n        }\n        connectParticles(context)(particlesArray, 50, false);\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import sourcePng from '../../media/images/hi1.png';\nimport { clearCanvas, drawSquareFilled, background, connectParticles, drawParticlePoint } from '../lib/canvas';\nimport { createRandomParticleValues, edgeWrap, Particle, drag, updatePosWithVelocity } from '../lib/Particle';\nimport { createGridPointsXY, createRandomNumberArray, mapRange, randomNumberBetween } from '../lib/math';\n\nconst getImageDataFromImage = (context) => (image) => {\n    context.drawImage(image, 0, 0);\n    return context.getImageData(0, 0, image.width, image.width);\n};\n\nconst getImageDataColor = (imageData, x, y) => ({\n    r: imageData.data[y * 4 * imageData.width + x * 4],\n    g: imageData.data[y * 4 * imageData.width + x * 4 + 1],\n    b: imageData.data[y * 4 * imageData.width + x * 4 + 2],\n    a: imageData.data[y * 4 * imageData.width + x * 4 + 3],\n});\n\nexport const hiImage01 = (_) => {\n    const config = {\n        width: 600,\n        height: 600,\n    };\n\n    let imageZoomFactor;\n    const png = new Image();\n    png.src = sourcePng;\n    let imageData;\n\n    const numParticles = 500;\n    const particlesArray = [];\n    const particleColor = { r: 252, g: 3, b: 152 };\n\n    const setup = ({ canvas, context }) => {\n        imageData = getImageDataFromImage(context)(png);\n        clearCanvas(canvas, context)();\n        imageZoomFactor = canvas.width / imageData.width;\n\n        for (let i = 0; i < numParticles; i++) {\n            const props = createRandomParticleValues(canvas);\n            props.radius = randomNumberBetween(1, 5);\n            props.color = particleColor;\n            if (i % 2) {\n                props.x = 0;\n            } else {\n                props.x = canvas.width;\n            }\n            particlesArray.push(new Particle(props));\n        }\n\n        background(canvas, context)({ r: 255, g: 255, b: 0 });\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        background(canvas, context)({ r: 255, g: 255, b: 0, a: 0.004 });\n\n        for (let i = 0; i < numParticles; i++) {\n            updatePosWithVelocity(particlesArray[i]);\n            edgeWrap(canvas, particlesArray[i]);\n\n            const pxColor = getImageDataColor(\n                imageData,\n                Math.round(particlesArray[i].x / imageZoomFactor),\n                Math.round(particlesArray[i].y / imageZoomFactor)\n            );\n\n            if (pxColor.r > 250) {\n                drag(particlesArray[i], 0.001);\n                particlesArray[i].color = { r: 3, g: 227, b: 252 };\n            } else {\n                particlesArray[i].color = particleColor;\n            }\n\n            drawParticlePoint(context)(particlesArray[i]);\n        }\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","module.exports=[[\"#69d2e7\",\"#a7dbd8\",\"#e0e4cc\",\"#f38630\",\"#fa6900\"],[\"#fe4365\",\"#fc9d9a\",\"#f9cdad\",\"#c8c8a9\",\"#83af9b\"],[\"#ecd078\",\"#d95b43\",\"#c02942\",\"#542437\",\"#53777a\"],[\"#556270\",\"#4ecdc4\",\"#c7f464\",\"#ff6b6b\",\"#c44d58\"],[\"#774f38\",\"#e08e79\",\"#f1d4af\",\"#ece5ce\",\"#c5e0dc\"],[\"#e8ddcb\",\"#cdb380\",\"#036564\",\"#033649\",\"#031634\"],[\"#490a3d\",\"#bd1550\",\"#e97f02\",\"#f8ca00\",\"#8a9b0f\"],[\"#594f4f\",\"#547980\",\"#45ada8\",\"#9de0ad\",\"#e5fcc2\"],[\"#00a0b0\",\"#6a4a3c\",\"#cc333f\",\"#eb6841\",\"#edc951\"],[\"#e94e77\",\"#d68189\",\"#c6a49a\",\"#c6e5d9\",\"#f4ead5\"],[\"#3fb8af\",\"#7fc7af\",\"#dad8a7\",\"#ff9e9d\",\"#ff3d7f\"],[\"#d9ceb2\",\"#948c75\",\"#d5ded9\",\"#7a6a53\",\"#99b2b7\"],[\"#ffffff\",\"#cbe86b\",\"#f2e9e1\",\"#1c140d\",\"#cbe86b\"],[\"#efffcd\",\"#dce9be\",\"#555152\",\"#2e2633\",\"#99173c\"],[\"#343838\",\"#005f6b\",\"#008c9e\",\"#00b4cc\",\"#00dffc\"],[\"#413e4a\",\"#73626e\",\"#b38184\",\"#f0b49e\",\"#f7e4be\"],[\"#ff4e50\",\"#fc913a\",\"#f9d423\",\"#ede574\",\"#e1f5c4\"],[\"#99b898\",\"#fecea8\",\"#ff847c\",\"#e84a5f\",\"#2a363b\"],[\"#655643\",\"#80bca3\",\"#f6f7bd\",\"#e6ac27\",\"#bf4d28\"],[\"#00a8c6\",\"#40c0cb\",\"#f9f2e7\",\"#aee239\",\"#8fbe00\"],[\"#351330\",\"#424254\",\"#64908a\",\"#e8caa4\",\"#cc2a41\"],[\"#554236\",\"#f77825\",\"#d3ce3d\",\"#f1efa5\",\"#60b99a\"],[\"#5d4157\",\"#838689\",\"#a8caba\",\"#cad7b2\",\"#ebe3aa\"],[\"#8c2318\",\"#5e8c6a\",\"#88a65e\",\"#bfb35a\",\"#f2c45a\"],[\"#fad089\",\"#ff9c5b\",\"#f5634a\",\"#ed303c\",\"#3b8183\"],[\"#ff4242\",\"#f4fad2\",\"#d4ee5e\",\"#e1edb9\",\"#f0f2eb\"],[\"#f8b195\",\"#f67280\",\"#c06c84\",\"#6c5b7b\",\"#355c7d\"],[\"#d1e751\",\"#ffffff\",\"#000000\",\"#4dbce9\",\"#26ade4\"],[\"#1b676b\",\"#519548\",\"#88c425\",\"#bef202\",\"#eafde6\"],[\"#5e412f\",\"#fcebb6\",\"#78c0a8\",\"#f07818\",\"#f0a830\"],[\"#bcbdac\",\"#cfbe27\",\"#f27435\",\"#f02475\",\"#3b2d38\"],[\"#452632\",\"#91204d\",\"#e4844a\",\"#e8bf56\",\"#e2f7ce\"],[\"#eee6ab\",\"#c5bc8e\",\"#696758\",\"#45484b\",\"#36393b\"],[\"#f0d8a8\",\"#3d1c00\",\"#86b8b1\",\"#f2d694\",\"#fa2a00\"],[\"#2a044a\",\"#0b2e59\",\"#0d6759\",\"#7ab317\",\"#a0c55f\"],[\"#f04155\",\"#ff823a\",\"#f2f26f\",\"#fff7bd\",\"#95cfb7\"],[\"#b9d7d9\",\"#668284\",\"#2a2829\",\"#493736\",\"#7b3b3b\"],[\"#bbbb88\",\"#ccc68d\",\"#eedd99\",\"#eec290\",\"#eeaa88\"],[\"#b3cc57\",\"#ecf081\",\"#ffbe40\",\"#ef746f\",\"#ab3e5b\"],[\"#a3a948\",\"#edb92e\",\"#f85931\",\"#ce1836\",\"#009989\"],[\"#300030\",\"#480048\",\"#601848\",\"#c04848\",\"#f07241\"],[\"#67917a\",\"#170409\",\"#b8af03\",\"#ccbf82\",\"#e33258\"],[\"#aab3ab\",\"#c4cbb7\",\"#ebefc9\",\"#eee0b7\",\"#e8caaf\"],[\"#e8d5b7\",\"#0e2430\",\"#fc3a51\",\"#f5b349\",\"#e8d5b9\"],[\"#ab526b\",\"#bca297\",\"#c5ceae\",\"#f0e2a4\",\"#f4ebc3\"],[\"#607848\",\"#789048\",\"#c0d860\",\"#f0f0d8\",\"#604848\"],[\"#b6d8c0\",\"#c8d9bf\",\"#dadabd\",\"#ecdbbc\",\"#fedcba\"],[\"#a8e6ce\",\"#dcedc2\",\"#ffd3b5\",\"#ffaaa6\",\"#ff8c94\"],[\"#3e4147\",\"#fffedf\",\"#dfba69\",\"#5a2e2e\",\"#2a2c31\"],[\"#fc354c\",\"#29221f\",\"#13747d\",\"#0abfbc\",\"#fcf7c5\"],[\"#cc0c39\",\"#e6781e\",\"#c8cf02\",\"#f8fcc1\",\"#1693a7\"],[\"#1c2130\",\"#028f76\",\"#b3e099\",\"#ffeaad\",\"#d14334\"],[\"#a7c5bd\",\"#e5ddcb\",\"#eb7b59\",\"#cf4647\",\"#524656\"],[\"#dad6ca\",\"#1bb0ce\",\"#4f8699\",\"#6a5e72\",\"#563444\"],[\"#5c323e\",\"#a82743\",\"#e15e32\",\"#c0d23e\",\"#e5f04c\"],[\"#edebe6\",\"#d6e1c7\",\"#94c7b6\",\"#403b33\",\"#d3643b\"],[\"#fdf1cc\",\"#c6d6b8\",\"#987f69\",\"#e3ad40\",\"#fcd036\"],[\"#230f2b\",\"#f21d41\",\"#ebebbc\",\"#bce3c5\",\"#82b3ae\"],[\"#b9d3b0\",\"#81bda4\",\"#b28774\",\"#f88f79\",\"#f6aa93\"],[\"#3a111c\",\"#574951\",\"#83988e\",\"#bcdea5\",\"#e6f9bc\"],[\"#5e3929\",\"#cd8c52\",\"#b7d1a3\",\"#dee8be\",\"#fcf7d3\"],[\"#1c0113\",\"#6b0103\",\"#a30006\",\"#c21a01\",\"#f03c02\"],[\"#000000\",\"#9f111b\",\"#b11623\",\"#292c37\",\"#cccccc\"],[\"#382f32\",\"#ffeaf2\",\"#fcd9e5\",\"#fbc5d8\",\"#f1396d\"],[\"#e3dfba\",\"#c8d6bf\",\"#93ccc6\",\"#6cbdb5\",\"#1a1f1e\"],[\"#f6f6f6\",\"#e8e8e8\",\"#333333\",\"#990100\",\"#b90504\"],[\"#1b325f\",\"#9cc4e4\",\"#e9f2f9\",\"#3a89c9\",\"#f26c4f\"],[\"#a1dbb2\",\"#fee5ad\",\"#faca66\",\"#f7a541\",\"#f45d4c\"],[\"#c1b398\",\"#605951\",\"#fbeec2\",\"#61a6ab\",\"#accec0\"],[\"#5e9fa3\",\"#dcd1b4\",\"#fab87f\",\"#f87e7b\",\"#b05574\"],[\"#951f2b\",\"#f5f4d7\",\"#e0dfb1\",\"#a5a36c\",\"#535233\"],[\"#8dccad\",\"#988864\",\"#fea6a2\",\"#f9d6ac\",\"#ffe9af\"],[\"#2d2d29\",\"#215a6d\",\"#3ca2a2\",\"#92c7a3\",\"#dfece6\"],[\"#413d3d\",\"#040004\",\"#c8ff00\",\"#fa023c\",\"#4b000f\"],[\"#eff3cd\",\"#b2d5ba\",\"#61ada0\",\"#248f8d\",\"#605063\"],[\"#ffefd3\",\"#fffee4\",\"#d0ecea\",\"#9fd6d2\",\"#8b7a5e\"],[\"#cfffdd\",\"#b4dec1\",\"#5c5863\",\"#a85163\",\"#ff1f4c\"],[\"#9dc9ac\",\"#fffec7\",\"#f56218\",\"#ff9d2e\",\"#919167\"],[\"#4e395d\",\"#827085\",\"#8ebe94\",\"#ccfc8e\",\"#dc5b3e\"],[\"#a8a7a7\",\"#cc527a\",\"#e8175d\",\"#474747\",\"#363636\"],[\"#f8edd1\",\"#d88a8a\",\"#474843\",\"#9d9d93\",\"#c5cfc6\"],[\"#046d8b\",\"#309292\",\"#2fb8ac\",\"#93a42a\",\"#ecbe13\"],[\"#f38a8a\",\"#55443d\",\"#a0cab5\",\"#cde9ca\",\"#f1edd0\"],[\"#a70267\",\"#f10c49\",\"#fb6b41\",\"#f6d86b\",\"#339194\"],[\"#ff003c\",\"#ff8a00\",\"#fabe28\",\"#88c100\",\"#00c176\"],[\"#ffedbf\",\"#f7803c\",\"#f54828\",\"#2e0d23\",\"#f8e4c1\"],[\"#4e4d4a\",\"#353432\",\"#94ba65\",\"#2790b0\",\"#2b4e72\"],[\"#0ca5b0\",\"#4e3f30\",\"#fefeeb\",\"#f8f4e4\",\"#a5b3aa\"],[\"#4d3b3b\",\"#de6262\",\"#ffb88c\",\"#ffd0b3\",\"#f5e0d3\"],[\"#fffbb7\",\"#a6f6af\",\"#66b6ab\",\"#5b7c8d\",\"#4f2958\"],[\"#edf6ee\",\"#d1c089\",\"#b3204d\",\"#412e28\",\"#151101\"],[\"#9d7e79\",\"#ccac95\",\"#9a947c\",\"#748b83\",\"#5b756c\"],[\"#fcfef5\",\"#e9ffe1\",\"#cdcfb7\",\"#d6e6c3\",\"#fafbe3\"],[\"#9cddc8\",\"#bfd8ad\",\"#ddd9ab\",\"#f7af63\",\"#633d2e\"],[\"#30261c\",\"#403831\",\"#36544f\",\"#1f5f61\",\"#0b8185\"],[\"#aaff00\",\"#ffaa00\",\"#ff00aa\",\"#aa00ff\",\"#00aaff\"],[\"#d1313d\",\"#e5625c\",\"#f9bf76\",\"#8eb2c5\",\"#615375\"],[\"#ffe181\",\"#eee9e5\",\"#fad3b2\",\"#ffba7f\",\"#ff9c97\"],[\"#73c8a9\",\"#dee1b6\",\"#e1b866\",\"#bd5532\",\"#373b44\"],[\"#805841\",\"#dcf7f3\",\"#fffcdd\",\"#ffd8d8\",\"#f5a2a2\"]];","import tinycolor from 'tinycolor2';\nimport * as nicepalettes from 'nice-color-palettes';\nimport { mapRange, oneOf, randomWholeBetween } from './math';\n\nexport const asTinyColor = (arry) => arry.map((c) => tinycolor(c));\n\nexport const brightest = (arry) => {\n    const colors = asTinyColor(arry);\n    return colors.reduce((acc, c) => {\n        if (c.getBrightness() > acc.getBrightness()) {\n            acc = c;\n        }\n        return acc;\n    }, colors[0]);\n};\n\nexport const darkest = (arry) => {\n    const colors = asTinyColor(arry);\n    return colors.reduce((acc, c) => {\n        if (c.getBrightness() < acc.getBrightness()) {\n            acc = c;\n        }\n        return acc;\n    }, colors[0]);\n};\n\nexport const bicPenBlue = tinycolor('hsl(250,79,29)').clone();\nexport const paperWhite = tinycolor('hsl(53,3,100)').clone();\n\nexport const warmWhite = tinycolor('hsl(42, 14%, 86%)').clone();\nexport const warmPink = tinycolor('hsl(29, 42%, 86%)').clone();\n\n// greys from https://uxdesign.cc/dark-mode-ui-design-the-definitive-guide-part-1-color-53dcfaea5129\nexport const coolGreyDark = tinycolor('#1f2933').clone();\nexport const warmGreyDark = tinycolor('#27241d').clone();\n\nexport const palettes = {\n    greyWarm: [\n        '#faf97f',\n        '#e8e6e1',\n        '#d3cec4',\n        '#b8b2a7',\n        '#a39e93',\n        '#857f72',\n        '#625d52',\n        '#504a40',\n        '#423d33',\n        '#27241d',\n    ],\n    greyCool: [\n        '#f5f7fa',\n        '#e4e7eb',\n        '#cbd2d9',\n        '#9aa5b1',\n        '#7b8794',\n        '#616e7c',\n        '#52606d',\n        '#3e4c59',\n        '#323f4b',\n        '#1f2933',\n    ],\n    pop: ['#ed3441', '#ffd630', '#329fe3', '#154296', '#303030'],\n    '60s_psyc': ['#ffeb00', '#fc0019', '#01ff4f', '#ff01d7', '#5600cc', '#00edf5'],\n    '70s': ['#73BFA3', '#F2DBAE', '#F29829', '#D9631E', '#593C2C'],\n    '80s_pastells': ['#FF3F3F', '#FF48C4', '#F3EA5F', '#C04DF9', '#2BD1FC', '#38CEF6'],\n    '80s_pop': ['#FF82E2', '#70BAFF', '#FED715', '#0037B3', '#FE0879'],\n    '90s': ['#42C8B0', '#4575F3', '#6933B0', '#D36F88', '#FC8D45'],\n    retro_sunset: ['#FFD319', '#FF2975', '#F222FF', '#8C1EFF', '#FF901F'],\n    vapor_wave: ['#F6A3EF', '#50D8EC', '#DD6DFB', '#EECD69', '#6FEAE6'],\n    // https://www.colourlovers.com/palette/694737/Thought_Provoking\n    thought_provoking: [\n        'hsl(46, 75%, 70%)',\n        'hsl(10, 66%, 56%)',\n        'hsl(350, 65%, 46%)',\n        'hsl(336, 40%, 24%)',\n        'hsl(185, 19%, 40%)',\n    ],\n};\n\nexport const nicePalette = (_) => nicepalettes[randomWholeBetween(0, 99)];\nexport const palette = (_) => palettes[oneOf(Object.keys(palettes))];\n\n// hslFromRange(50, 90,270, v);\nexport const hslFromRange = (y1, x2, y2, v) => {\n    const h = mapRange(0, y1, x2, y2, v);\n    const s = 100;\n    const l = 50;\n    return tinycolor(`hsl(${h},${s}%,${l}%)`);\n};\n\n/*\nColor between 2 defined and a hue spin in the middle to introduce a 3rd\n// Palette from https://www.colourlovers.com/palette/694737/Thought_Provoking\n\nconst colorTop = 'hsl(350, 65%, 46%)';\nconst colorBottom = 'hsl(185, 19%, 40%)';\nconst distFromCenter = Math.abs(mid - currentY);\nconst color = tinycolor.mix(colorTop, colorBottom, mapRange(startY, maxY, 0, 100, currentY));\ncolor.spin(mapRange(0, mid / 2, 60, 0, distFromCenter));\ncolor.brighten(mapRange(0, mid / 2, 50, 0, distFromCenter));\ncolor.darken(mapRange(0, mid, 0, 40, distFromCenter) + randomNumberBetween(0, 30));\n */\n","/*\nCanvas animation timeline based on Canvas Sketch time keeping methods\nhttps://github.com/mattdesl/canvas-sketch/blob/master/docs/animated-sketches.md\n */\n\nexport class Timeline {\n    constructor(fps, loop, duration) {\n        this.fps = fps || 30;\n        this.loop = loop || 0; // total loops\n        this.duration = duration || 1; // duration of each loop in seconds\n        this.totalLoopFrames = this.duration ? this.duration * this.fps : 1;\n        this.iterations = 0; // number of times drawn\n        this.time = 0; // elapsed time in seconds\n        this.playhead = 0; // current progress of the loop between 0 and 1\n        this.frame = 1; // frame of the loop\n        this.elapsedLoops = 0;\n        this.startTime = Date.now();\n    }\n\n    get elapsed() {\n        return Date.now() - this.startTime;\n    }\n\n    onFrame() {\n        this.iterations++;\n        // one frame\n        this.frame++;\n        this.playhead = this.frame / this.totalLoopFrames;\n        if (this.iterations % this.fps === 0) {\n            // a second elapsed\n            this.time++;\n            if (this.frame >= this.totalLoopFrames) {\n                // one loop duration passed\n                this.elapsedLoops++;\n                this.playhead = 0;\n                this.frame = 0;\n                if (this.loop && this.elapsedLoops >= this.loop) {\n                    console.log('End of loops');\n                    return -1;\n                }\n            }\n        }\n        return 1;\n    }\n}\n","import { background, drawLineAngle, setStokeColor } from '../lib/canvas';\nimport { nicePalette } from '../lib/palettes';\nimport { create3dNoiseAbs, createGridPointsUV, marginify, oneOf, toSinValue, uvFromAngle } from '../lib/math';\nimport { Timeline } from '../lib/Timeline';\n\nexport const windLines = () => {\n    const config = {\n        width: 600,\n        height: 600,\n        fps: 60,\n    };\n\n    let counter = 0;\n    let grid = createGridPointsUV(15, 15);\n\n    const timeline = new Timeline(config.fps, 0, 5);\n\n    const setup = ({ canvas, context }) => {\n        const colors = nicePalette();\n        grid = grid.map((g) => {\n            g.color = oneOf(colors);\n            return g;\n        });\n        background(canvas, context)('rgba(255,255,255,1');\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        background(canvas, context)('rgba(255,255,255,.1');\n\n        grid.forEach(({ position, rotation, color }) => {\n            const [u, v] = position;\n            const { x, y } = marginify({ margin: 100, u, v, width: canvas.width, height: canvas.height });\n            const t = toSinValue(timeline.playhead) * 0.1;\n            const wave = create3dNoiseAbs(u, v, counter, 3 * t) * 10;\n            const startvect = uvFromAngle((rotation + wave) * -1).setMag(25);\n            setStokeColor(context)(color);\n            drawLineAngle(context)(x + startvect.x, y + startvect.y, rotation + wave, 25, 4, 'round');\n        });\n\n        counter += 0.01;\n        return timeline.onFrame();\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport { background } from '../lib/canvas';\nimport { ratio, orientation } from '../lib/sketch';\nimport { create2dNoiseAbs, mapRange, randomNumberBetween, lowest, highest } from '../lib/math';\n\n/*\nOriginal inspiration\nChurn by Kenny Vaden\nhttps://www.reddit.com/r/generative/comments/lq8r11/churn_r_code/\n */\n\nconst createWave = (width, angle, frequency, amplitude, noise = 1) => {\n    const points = [];\n    const cfrequency = frequency * noise;\n    const camplitude = amplitude * noise;\n\n    for (let i = 0; i < width; i++) {\n        const s = Math.sin((angle + Math.PI * 2 + i) / frequency) * amplitude;\n        const c = Math.cos((angle + Math.PI * 2 + i) / cfrequency) * camplitude;\n        points.push(s + c);\n    }\n\n    return points;\n};\n\n// get the lowest of top and the highest of bottom, height+=that difference\nconst drawWaveLine = (context) => (startx, endx, yorigin, height, topWave, bottomWave, color, dots = true) => {\n    let currentX = startx;\n    let currentY = yorigin;\n\n    const waveColor = color.clone();\n\n    // const highestTop = lowest(topWave);\n    const lineheight = highest(bottomWave) - lowest(topWave) + height;\n\n    const gradient = context.createLinearGradient(0, yorigin, 0, yorigin + lineheight);\n    gradient.addColorStop(0, waveColor.toRgbString());\n    gradient.addColorStop(1, waveColor.darken(20).toRgbString());\n\n    context.strokeStyle = waveColor.darken(70).toRgbString();\n    context.lineWidth = 0.75;\n    context.beginPath();\n\n    context.moveTo(startx, currentY);\n\n    let xstep = (endx - startx) / topWave.length + 1;\n    topWave.forEach((w) => {\n        context.lineTo(currentX, w + currentY);\n        currentX += xstep;\n    });\n\n    currentY += lineheight;\n    context.lineTo(currentX, currentY);\n\n    xstep = (endx - startx) / bottomWave.length + 1;\n    bottomWave.forEach((w) => {\n        context.lineTo(currentX, w + currentY);\n        currentX -= xstep;\n    });\n\n    context.lineTo(startx, currentY);\n\n    if (dots) {\n        context.stroke();\n        context.fillStyle = gradient;\n    } else {\n        context.fillStyle = tinycolor(waveColor).toRgbString();\n    }\n\n    context.fill();\n\n    if (dots) {\n        currentX = startx;\n        currentY = yorigin;\n        xstep = (endx - startx) / topWave.length + 1;\n        const dotColor = color.clone();\n        topWave.forEach((w) => {\n            // if (w <= highestTop * 0.5) {\n            const rnd = randomNumberBetween(0, yorigin);\n            if (rnd < 2) {\n                // context.strokeStyle = tinycolor(waveColor).darken(20).toRgbString();\n                // context.lineWidth = 2;\n                const radius = rnd < 0.008 ? randomNumberBetween(50, 100) : randomNumberBetween(1, 3);\n\n                context.fillStyle = dotColor.lighten(5).toRgbString();\n                context.beginPath();\n                context.arc(\n                    currentX + randomNumberBetween(-50, 50),\n                    w + currentY - randomNumberBetween(5, 50),\n                    radius,\n                    0,\n                    Math.PI * 2,\n                    false\n                );\n                context.fill();\n                context.stroke();\n            }\n            // }\n            currentX += xstep;\n        });\n    }\n};\n\nexport const waves01 = () => {\n    const config = {\n        name: 'waves01',\n        // orientation: orientation.portrait,\n        ratio: ratio.square,\n    };\n\n    let canvasHeight;\n    let canvasMiddle;\n\n    // Palette from https://www.colourlovers.com/palette/694737/Thought_Provoking\n    const colorBackground = 'hsl(46, 75%, 70%)';\n    const colorTop = 'hsl(350, 65%, 46%)';\n    const colorBottom = 'hsl(185, 19%, 40%)';\n\n    const waves = [];\n\n    const waveResolution = 400;\n    let waveRows;\n\n    let incrementY = 1;\n    let startY = 0;\n    let currentY;\n    let maxY;\n\n    let angle = 90;\n    let frequency = 10;\n    let amplitude = 10;\n    let cosOffset = 0;\n\n    const createWavesRow = (idx) => {\n        const mid = waveRows / 2;\n        const distFromCenter = Math.abs(mid - idx);\n\n        angle = mapRange(0, waveRows, 0, 360, idx);\n\n        frequency = mapRange(0, mid, 8, 30, distFromCenter);\n        amplitude = mapRange(0, mid, 15, 20, distFromCenter) + randomNumberBetween(-5, 5);\n\n        const noise = create2dNoiseAbs(angle, idx, amplitude * 0.5, frequency * randomNumberBetween(0, 2));\n        cosOffset = noise / randomNumberBetween(2, 10);\n\n        return {\n            top: createWave(waveResolution, angle, frequency, amplitude, cosOffset),\n            bottom: createWave(waveResolution, angle, frequency, amplitude, cosOffset),\n        };\n    };\n\n    const setup = ({ canvas, context }) => {\n        canvasHeight = canvas.height;\n        canvasMiddle = canvas.height / 2;\n\n        waveRows = canvas.height;\n\n        const buffer = canvas.height / 5;\n        startY = buffer;\n\n        currentY = startY;\n\n        maxY = canvas.height - buffer * 1.5;\n        incrementY = (maxY - startY) / waveRows;\n\n        for (let i = 0; i < waveRows; i++) {\n            waves.push(createWavesRow(i));\n        }\n\n        background(canvas, context)(tinycolor(colorBackground).lighten(20));\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        const mid = canvasMiddle;\n\n        for (let i = 0; i < waves.length; i++) {\n            const distFromCenter = Math.abs(mid - currentY);\n            const color = tinycolor.mix(colorTop, colorBottom, mapRange(startY, maxY, 0, 100, currentY));\n\n            color.spin(mapRange(0, mid / 2, 60, 0, distFromCenter));\n            color.brighten(mapRange(0, mid / 2, 50, 0, distFromCenter));\n            color.darken(mapRange(0, mid, 0, 40, distFromCenter) + randomNumberBetween(0, 30));\n\n            const height = mapRange(startY, maxY, 50, 0, currentY);\n            drawWaveLine(context)(0, canvas.width, currentY, height, waves[i].top, waves[i].bottom, color, true);\n\n            currentY += incrementY;\n        }\n\n        // final white lines at top and bottom to clean up edges\n        // drawWaveLine(context)(0, canvas.width, currentY + rowHeight, 200, topwave, [0], 'white', false);\n        // drawWaveLine(context)(0, canvas.width, -100, 100, topwave, bottomwave, 'white', false);\n\n        return -1;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import { background, drawTextFilled, textStyles, pixel, drawRect, contextScale, textAlignLeftTop } from '../lib/canvas';\nimport {\n    create2dNoiseAbs,\n    mapRange,\n    oneOf,\n    pointDistance,\n    randomWholeBetween,\n    round2,\n    createGridCellsXY,\n} from '../lib/math';\nimport { brightest, darkest, nicePalette } from '../lib/palettes';\nimport { ratio, scale } from '../lib/sketch';\n\nclass Curve {\n    constructor(x, y, radius, angle, speed, noise) {\n        this.x = x;\n        this.y = y;\n        this.originX = x;\n        this.originY = y;\n        this.radius = radius;\n        this.speed = speed || 1;\n        this.angle = angle || 0;\n        this.noise = noise;\n\n        // Randomize some noise possibilities\n        this.xa = oneOf([randomWholeBetween(1, 5), round2(this.noise)]);\n        this.xb = oneOf([randomWholeBetween(1, 5), round2(this.noise)]);\n        this.ya = oneOf([randomWholeBetween(1, 5), round2(this.noise)]);\n        this.yb = oneOf([randomWholeBetween(1, 5), round2(this.noise)]);\n    }\n\n    get size() {\n        return this.radius * 2;\n    }\n\n    get centerX() {\n        return this.originX + this.radius;\n    }\n\n    get centerY() {\n        return this.originY + this.radius;\n    }\n\n    get distFromCenter() {\n        return pointDistance({ x: this.centerX, y: this.centerY }, { x: this.x, y: this.y });\n    }\n}\n\nexport const lissajous01 = () => {\n    const config = {\n        name: 'lissajous01',\n        ratio: ratio.square,\n        scale: scale.hidpi,\n    };\n\n    const renderBatch = 10;\n    const curves = [];\n    let canvasCenterX;\n    let canvasCenterY;\n    let centerRadius;\n    const columns = 3;\n    let margin;\n    const palette = nicePalette();\n    const colorBackground = brightest(palette).clone().lighten(10);\n    const colorCurve = darkest(palette).clone().darken(25);\n    const colorText = colorBackground.clone().darken(15).desaturate(20);\n    let tick = 0;\n    let grid;\n\n    const setup = ({ canvas, context }) => {\n        canvasCenterX = canvas.width / 2;\n        canvasCenterY = canvas.height / 2;\n        centerRadius = canvas.height / 4;\n        margin = 50 * contextScale;\n        if (columns === 1) {\n            curves.push(new Curve(canvasCenterX, canvasCenterY, centerRadius, 0, 0.05));\n        } else {\n            grid = createGridCellsXY(canvas.width, canvas.width, columns, columns, margin, margin / 2);\n            grid.points.forEach((point) => {\n                const x = point[0];\n                const y = point[1];\n                curves.push(new Curve(x, y, grid.columnWidth / 2, 0, 0.05, create2dNoiseAbs(x, y)));\n            });\n        }\n\n        background(canvas, context)(colorBackground);\n    };\n\n    const circleX = (curve, v = 1) => curve.radius * Math.cos(curve.angle * v);\n    const circleY = (curve, v = 1) => curve.radius * Math.sin(curve.angle * v);\n\n    // k is # of petals\n    // https://en.wikipedia.org/wiki/Rose_(mathematics)\n    // http://xahlee.info/SpecialPlaneCurves_dir/Rose_dir/rose.html\n    const roseX = (curve, k = 1, a = 1, b = 1) =>\n        curve.radius * Math.cos(k * curve.angle * a) * Math.cos(curve.angle * b);\n    const roseY = (curve, k = 1, a = 1, b = 1) =>\n        curve.radius * Math.cos(k * curve.angle * a) * Math.sin(curve.angle * b);\n\n    const linearYDown = (curve) => {\n        let { y } = curve;\n        if (++y > curve.size) y = 0;\n        return y;\n    };\n\n    const draw = ({ context }) => {\n        grid.points.forEach((point) => {\n            drawRect(context)(point[0], point[1], grid.columnWidth, grid.rowHeight, 1, colorText);\n        });\n        for (let b = 0; b < renderBatch; b++) {\n            for (let i = 0; i < curves.length; i++) {\n                // const idx = i + 1;\n                // const pointRad = 1;\n                const c = curves[i];\n\n                const k = round2(((i + 1) * 2) / 9);\n\n                const { xa } = c;\n                const { xb } = c;\n                const { ya } = c;\n                const { yb } = c;\n\n                // c.x = circleX(c);\n                // c.y = circleY(c);\n                c.x = roseX(c, k, xa, xb);\n                c.y = roseY(c, k, ya, yb);\n                // c.y = linearYDown(c);\n\n                // TODO, put a/b on the canvas so i can remember them!\n\n                c.angle += c.speed;\n\n                // const h = mapRange(0, c.radius, 180, 270, c.distFromCenter);\n                // const s = 100;\n                // const l = 30;\n                // const a = 0.75;\n                // const color = `hsla(${h},${s}%,${l}%,${a})`;\n\n                pixel(context)(c.x + c.centerX, c.y + c.centerY, colorCurve);\n\n                textAlignLeftTop(context);\n                drawTextFilled(context)(\n                    `k=${k}, ${xa}, ${xb}, ${ya}, ${yb}`,\n                    c.originX,\n                    c.originY + c.size + margin / 3,\n                    colorText,\n                    textStyles.size(10)\n                );\n            }\n            tick++;\n        }\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import { create2dNoise, create3dNoise, pointDistance, randomNumberBetween } from './math';\n\nconst TAU = Math.PI * 2;\n\nexport const simplexNoise2d = (x, y, f = 0.0005) => create2dNoise(x, y, 1, f) * TAU;\nexport const simplexNoise3d = (x, y, t, f = 0.002) => create3dNoise(x, y, t, 1, f) * TAU;\n\nexport const diagLines = (x, y) => (x + y) * 0.01 * TAU;\n\n// From https://medium.com/@bit101/flow-fields-part-i-3ebebc688fd8\nexport const sinField = (x, y) => (Math.sin(x * 0.01) + Math.sin(y * 0.01)) * TAU;\n\n// random attractor params\nconst a = randomNumberBetween(-2, 2);\nconst b = randomNumberBetween(-2, 2);\nconst c = randomNumberBetween(-2, 2);\nconst d = randomNumberBetween(-2, 2);\n\n// http://paulbourke.net/fractals/clifford/\nexport const cliffordAttractor = (width, height, x, y) => {\n    const scale = 0.01;\n    x = (x - width / 2) * scale;\n    y = (y - height / 2) * scale;\n    const x1 = Math.sin(a * y) + c * Math.cos(a * x);\n    const y1 = Math.sin(b * x) + d * Math.cos(b * y);\n    return Math.atan2(y1 - y, x1 - x);\n};\n\n// http://paulbourke.net/fractals/peterdejong/\nexport const jongAttractor = (width, height, x, y) => {\n    const scale = 0.01;\n    x = (x - width / 2) * scale;\n    y = (y - height / 2) * scale;\n    const x1 = Math.sin(a * y) - Math.cos(b * x);\n    const y1 = Math.sin(c * x) - Math.cos(d * y);\n    return Math.atan2(y1 - y, x1 - x);\n};\n\n// Misc formula\nconst flowAtPoint = (x, y) => {\n    const scale = 0.01;\n    const fromCenter = pointDistance({ x, y }, { x: canvasMidX, y: canvasMidY });\n    const simplex = simplexNoise2d(x, y, 0.01);\n    // const theta = simplex;\n    const theta = (fromCenter + simplex) / 2; // mostly radial around middle\n    // const r1 = (Math.sin(1.2 * x) + 0.2 * Math.atan(2 * y)) * 8 * Math.PI;\n    // const r2 = (Math.pow(x, 2) + 0.8 * Math.pow(y, 1 / 2)) * 8 * Math.PI * 4;\n    // const theta = ((r1 + r2 + simplex) / 3) * 0.001;\n    // const theta = ((Math.cos(x) + x + Math.sin(y)) * 24) % (Math.PI / 2); // wander dl like like\n    // const theta = Math.atan2(y, x); // cones out from top left\n    // const theta = x + y + Math.cos(x * scale) * Math.sin(x * scale); // bl to tr diag and cross perp lines\n    // const theta = Math.cos(x * scale) * Math.sin(x * scale); // vertical lines\n    // const theta = Math.cos(x) * Math.sin(x) * scale; // horizontal lines\n    // const theta = x * Math.sin(y) * scale; // scribble\n    // const theta = Math.sin(x * scale) + Math.sin(y * scale); // diamonds\n    return theta * TAU;\n};\n","import tinycolor from 'tinycolor2';\nimport { mapRange, randomWholeBetween, uvFromAngle, snapNumber, quantize } from '../lib/math';\nimport { edgeWrap, Particle, updatePosWithVelocity, createRandomParticleValues, applyForce } from '../lib/Particle';\nimport { background, drawCircleFilled } from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { Vector } from '../lib/Vector';\nimport { simplexNoise3d } from '../lib/attractors';\nimport { hslFromRange } from '../lib/palettes';\n\nexport const flowFieldParticles = () => {\n    const config = {\n        name: 'flowFieldParticles',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    const numParticles = 400;\n    const particlesArray = [];\n    const maxSize = 3;\n\n    let time = 0;\n\n    const createRandomParticle = (canvas) => {\n        const props = createRandomParticleValues(canvas);\n        props.x = randomWholeBetween(0, canvas.width);\n        props.y = randomWholeBetween(0, canvas.height);\n        props.velocityX = 0;\n        props.velocityY = 0;\n        return new Particle(props);\n    };\n\n    const setup = ({ canvas, context }) => {\n        for (let i = 0; i < numParticles; i++) {\n            particlesArray.push(createRandomParticle(canvas));\n        }\n\n        background(canvas, context)('rgba(50,50,50,1)');\n    };\n\n    const drawPixel = (canvas, context, force, particle, color, rad = 1) => {\n        applyForce(force, particle);\n        particle.vVector = particle.vVector.limit(1);\n        updatePosWithVelocity(particle);\n        edgeWrap(canvas, particle);\n        const pcolor = color || particle.color;\n        const x = snapNumber(maxSize * 2, particle.x);\n        const y = snapNumber(maxSize * 2, particle.y);\n        drawCircleFilled(context)(x, y, rad, pcolor);\n        return true;\n    };\n\n    const drawParticles = ({ canvas, context }) => {\n        for (let i = 0; i < numParticles; i++) {\n            const particle = particlesArray[i];\n            const sNoise3d = simplexNoise3d(particle.x, particle.y, time, 0.002);\n            const theta = quantize(3, sNoise3d);\n            const force = uvFromAngle(theta);\n            const clr = hslFromRange(5, 270, 360, Math.abs(theta)).setAlpha(0.25);\n            const size = mapRange(0, 5, 1, maxSize, Math.abs(theta));\n\n            drawPixel(canvas, context, force, particle, clr, size);\n\n            particle.aVector = new Vector(0, 0);\n        }\n    };\n\n    const drawFibers = ({ canvas, context }) => {\n        const particle = createRandomParticle(canvas);\n        const length = 200;\n        for (let i = 0; i < length; i++) {\n            const sNoise3d = simplexNoise3d(particle.x, particle.y, time, 0.002);\n            const theta = sNoise3d;\n            const force = uvFromAngle(theta);\n            const clr = 'rgba(0,0,0,.05)';\n\n            drawPixel(canvas, context, force, particle, clr, 1);\n\n            particle.aVector = new Vector(0, 0);\n        }\n    };\n\n    const draw = ({ canvas, context }) => {\n        drawFibers({ canvas, context });\n        drawParticles({ canvas, context });\n        time += 0.01;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\n\nimport { background, drawLineAngle } from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { nicePalette, hslFromRange } from '../lib/palettes';\nimport {\n    simplexNoise2d,\n    simplexNoise3d,\n    sinField,\n    cliffordAttractor,\n    jongAttractor,\n    diagLines,\n} from '../lib/attractors';\nimport { mapRange, snapNumber } from '../lib/math';\n\nconst TAU = Math.PI * 2;\n\nconst arc = (context, x, y, size, thick, color, theta) => {\n    const startR = snapNumber(Math.PI / 2, theta);\n    const endR = startR + Math.PI / 2;\n    const clockWise = true;\n\n    context.strokeStyle = tinycolor(color).toRgbString();\n    context.lineCap = 'round';\n    context.lineWidth = thick;\n    context.beginPath();\n    context.arc(x + size, y + size, size, startR, endR, clockWise);\n    context.stroke();\n};\n\nconst circle = (context, x, y, size, color, theta) => {\n    const startR = 0; // snapNumber(Math.PI / 2, theta);\n    const endR = TAU; // startR + Math.PI / 2;\n    const clockWise = true;\n    const rad = mapRange(0, 5, size * 0.2, size * 0.6, Math.abs(theta));\n\n    context.beginPath();\n    context.arc(x + size, y + size, rad, startR, endR, clockWise);\n    context.fillStyle = tinycolor(color).toRgbString();\n    context.fill();\n};\n\nconst line = (context, x, y, size, thick, color, theta) => {\n    const startR = snapNumber(Math.PI / 2, theta) + Math.PI / 2;\n    context.strokeStyle = tinycolor(color).toRgbString();\n    drawLineAngle(context)(x + size, y + size, startR, size * 2, thick, 'round');\n};\n\nexport const flowFieldArcs = () => {\n    const config = {\n        name: 'flowFieldArcs',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    let time = 0;\n    const palette = nicePalette();\n    const colorBackground = tinycolor('rgba(50,50,50,1)');\n\n    const setup = ({ canvas, context }) => {\n        background(canvas, context)(colorBackground);\n    };\n\n    const renderField = ({ width, height }, context, fn, cell) => {\n        const mid = cell / 2;\n        for (let x = 0; x < width; x += cell) {\n            for (let y = 0; y < height; y += cell) {\n                const theta = fn(x, y);\n                const arcColor = hslFromRange(5, 270, 360, Math.abs(theta));\n                const lineColor = hslFromRange(5, 180, 270, Math.abs(theta)).darken(10);\n                line(context, x, y, mid, mid * 0.5, lineColor, theta);\n                circle(context, x, y, mid, lineColor, theta);\n                arc(context, x, y, mid, mid * 0.5, arcColor, theta);\n                arc(context, x, y, mid, mid * 0.1, 'yellow', theta);\n            }\n        }\n    };\n\n    const draw = ({ canvas, context }) => {\n        background(canvas, context)(colorBackground.setAlpha(0.1));\n\n        // const clifford = (x, y) => cliffordAttractor(canvas.width, canvas.height, x, y);\n        // const jong = (x, y) => jongAttractor(canvas.width, canvas.height, x, y);\n        const noise = (x, y) => simplexNoise3d(x, y, time, 0.001);\n\n        renderField(canvas, context, noise, Math.round(canvas.width / 20));\n        time += 0.25;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport { clearCanvas, getImageDataColor } from './canvas';\nimport { mapRange } from './math';\n\nexport class Bitmap {\n    constructor(src) {\n        this.scaleX = 1;\n        this.scaleY = 1;\n\n        this.image = new Image();\n        this.image.src = src;\n        this.imageData = undefined;\n    }\n\n    get width() {\n        return this.imageData.width;\n    }\n\n    get height() {\n        return this.imageData.height;\n    }\n\n    get data() {\n        return this.imageData;\n    }\n\n    toCanvasX(x) {\n        return Math.round(x * this.scaleX);\n    }\n\n    toCanvasY(y) {\n        return Math.round(y * this.scaley);\n    }\n\n    init(canvas, context, clear = true) {\n        this.canvas = canvas;\n        this.context = context;\n        this.context.drawImage(this.image, 0, 0);\n        this.imageData = context.getImageData(0, 0, this.image.width, this.image.width);\n        this.scaleX = canvas.width / this.imageData.width;\n        this.scaleY = canvas.height / this.imageData.height;\n        if (clear) clearCanvas(canvas, context);\n    }\n\n    pixelColorRaw(x, y) {\n        if (x < 0) x = 0;\n        if (y < 0) y = 0;\n        if (x >= this.width) x = this.width - 1;\n        if (y >= this.height) y = this.height - 1;\n        return {\n            r: this.imageData.data[y * 4 * this.imageData.width + x * 4],\n            g: this.imageData.data[y * 4 * this.imageData.width + x * 4 + 1],\n            b: this.imageData.data[y * 4 * this.imageData.width + x * 4 + 2],\n            a: this.imageData.data[y * 4 * this.imageData.width + x * 4 + 3],\n        };\n    }\n\n    pixelColor(x, y) {\n        return tinycolor(this.pixelColorRaw(x, y));\n    }\n\n    /*\n    Gray = 0.21R + 0.72G + 0.07B // Luminosity\n    Gray = (R + G + B) Ã· 3 // Average Brightness\n    Gray = 0.299R + 0.587G + 0.114B // rec601 standard\n    Gray = 0.2126R + 0.7152G + 0.0722B // ITU-R BT.709 standard\n    Gray = 0.2627R + 0.6780G + 0.0593B // ITU-R BT.2100 standard\n     */\n    // https://sighack.com/post/averaging-rgb-colors-the-right-way\n    pixelAverageGrey(x, y) {\n        const color = this.pixelColorRaw(x, y);\n        return Math.sqrt((color.r * color.r + color.g * color.g + color.b * color.b) / 3);\n    }\n\n    pixelTheta(x, y) {\n        // return this.pixelColor(x, y).getBrightness() / 256;\n        return this.pixelAverageGrey(x, y) / 256;\n    }\n\n    pixelColorFromCanvas(x, y) {\n        return this.pixelColor(Math.round(x / this.scaleX), Math.round(y / this.scaleY));\n    }\n\n    pixelThetaFromCanvas(x, y) {\n        return this.pixelTheta(Math.round(x / this.scaleX), Math.round(y / this.scaleY));\n    }\n\n    sizeFromPixelBrightness(x, y, size = 5, low = 0, max = 255) {\n        const pixelColor = this.pixelColorFromCanvas(x, y);\n        const brightness = 256 - pixelColor.getBrightness();\n        return mapRange(low, max, 0, size, brightness);\n    }\n\n    // const createColorArrayFromImageData = (imageData) => {\n    //     const data = [];\n    //     for (let y = 0, { height } = imageData; y < height; y++) {\n    //         for (let x = 0, { width } = imageData; x < width; x++) {\n    //             data.push({ x, y, ...getImageColor(imageData, x, y) });\n    //         }\n    //     }\n    //     return data;\n    // };\n}\n\n/*\nconst renderImage = () => {\n        for (let x = startX; x < maxX; x++) {\n            for (let y = startY; y < maxY; y++) {\n                const color = image.pixelColorFromCanvas(x, y);\n                pixel(ctx)(x, y, color, 'square', 1);\n            }\n        }\n    };\n */\n","import tinycolor from 'tinycolor2';\nimport { mapRange, randomWholeBetween, uvFromAngle, snapNumber, quantize, pointDistance } from '../lib/math';\nimport { Particle, updatePosWithVelocity, createRandomParticleValues, applyForce } from '../lib/Particle';\nimport { background, drawCircleFilled, splatter, renderField } from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { Vector } from '../lib/Vector';\nimport { diagLines, simplexNoise2d, simplexNoise3d } from '../lib/attractors';\nimport { hslFromRange, warmWhite } from '../lib/palettes';\nimport { Bitmap } from '../lib/Bitmap';\nimport sourcePng from '../../media/images/kristijan-arsov-woman-400.png';\n\n/*\nhttps://marcteyssier.com/projects/flowfield/\nhttps://larrycarlson.com/collections/wavy-art-prints\n */\n\nconst TAU = Math.PI * 2;\n\nexport const flowFieldImage = () => {\n    const config = {\n        name: 'flowFieldImage',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    const maxSize = 5;\n    let time = 0;\n    const backgroundColor = warmWhite;\n    const image = new Bitmap(sourcePng);\n\n    const createRandomParticle = (canvas) => {\n        const props = createRandomParticleValues(canvas);\n        props.x = randomWholeBetween(0, canvas.width);\n        props.y = randomWholeBetween(0, canvas.height);\n        props.velocityX = 0;\n        props.velocityY = 0;\n        return new Particle(props);\n    };\n\n    const imageFlow = (x, y) => image.pixelThetaFromCanvas(x, y) * TAU;\n\n    const setup = ({ canvas, context }) => {\n        image.init(canvas, context);\n        background(canvas, context)(backgroundColor);\n        renderField(canvas, context, imageFlow, 'rgba(0,0,0,.15)', 50, 10);\n    };\n\n    const drawPixel = (canvas, context, particle, color, rad = 1) => {\n        const pcolor = color || particle.color;\n        const { x } = particle;\n        const { y } = particle;\n        drawCircleFilled(context)(x, y, rad, pcolor);\n        return true;\n    };\n\n    const drawParticle = ({ canvas, context }, particle) => {\n        const theta = imageFlow(particle.x, particle.y);\n        const force = uvFromAngle(theta);\n        applyForce(force, particle);\n        particle.vVector = particle.vVector.limit(3);\n        updatePosWithVelocity(particle);\n\n        const fromCenter = pointDistance(particle, { x: canvas.width / 2, y: canvas.height / 2 });\n\n        const imagePixelColor = image.pixelColorFromCanvas(particle.x, particle.y);\n        const imagePixelBrightness = 256 - imagePixelColor.getBrightness();\n        const hslColor = hslFromRange(canvas.width, 90, 270, particle.x).spin(time);\n        const particleColor = tinycolor.mix(hslColor, imagePixelColor, 90);\n        particleColor.desaturate(mapRange(canvas.width / 3, canvas.width / 2, 0, 10, fromCenter));\n\n        const size = mapRange(0, 255, 0, maxSize, imagePixelBrightness);\n        const sizeMult = mapRange(canvas.width / 3, canvas.width / 2, 1, 5, fromCenter);\n\n        drawPixel(canvas, context, particle, particleColor, size * sizeMult);\n\n        if (Math.abs(theta) >= 5.7) {\n            splatter(context)(particle.x, particle.y, particleColor.brighten(10), 1, 3, 100);\n        }\n\n        particle.aVector = new Vector(0, 0);\n    };\n\n    const drawFibers = ({ canvas, context }) => {\n        const particle = createRandomParticle(canvas);\n        const length = randomWholeBetween(50, 1000);\n        for (let i = 0; i < length; i++) {\n            drawParticle({ canvas, context }, particle);\n        }\n    };\n\n    const draw = ({ canvas, context }) => {\n        drawFibers({ canvas, context });\n        time += 0.05;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport { randomWholeBetween, degreesToRadians, randomPointAround } from '../lib/math';\nimport { background, drawCircleFilled } from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { brightest, darkest, hslFromRange, nicePalette } from '../lib/palettes';\nimport { simplexNoise2d, simplexNoise3d } from '../lib/attractors';\n\n/*\nStarted here but took a detour\nhttps://www.reddit.com/r/creativecoding/comments/lx9prx/audiovisual_sound_of_space_solar_system_david/\n */\n\nconst TAU = Math.PI * 2;\n\nexport const radialNoise = () => {\n    const config = {\n        name: 'radialNoise',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    let canvasMidX;\n    let canvasMidY;\n    let maxRadius;\n    let radiusScale;\n    let currentRadiusSize = 360;\n\n    let originX;\n    let originY;\n    let time = 0;\n    let angle = 0;\n\n    const history = {};\n\n    const palette = nicePalette();\n    const backgroundColor = brightest(palette).clone().lighten(10);\n    const imageColor = darkest(palette).clone();\n\n    // let imageZoomFactor;\n    // const png = new Image();\n    // png.src = sourcePng;\n    // let imageData;\n\n    const setup = ({ canvas, context }) => {\n        canvasMidX = canvas.width / 2;\n        canvasMidY = canvas.height / 2;\n        maxRadius = canvas.width * 0.4;\n        radiusScale = currentRadiusSize / maxRadius;\n\n        originX = canvasMidX;\n        originY = canvasMidY;\n\n        // imageData = getImageDataFromImage(context)(png);\n        // clearCanvas(canvas, context)();\n        // imageZoomFactor = 360 / imageData.width;\n\n        background(canvas, context)(backgroundColor);\n    };\n\n    const drawPixel = (context, x, y, color, size = 1, heading = 0) => {\n        drawCircleFilled(context)(x, y, size, color);\n    };\n\n    const drawLine = (context, x1, y1, x2, y2, color, strokeWidth = 1) => {\n        context.strokeStyle = tinycolor(color).toRgbString();\n        context.lineWidth = strokeWidth;\n        context.beginPath();\n        context.moveTo(x1, y1);\n        context.lineTo(x2, y2);\n        context.stroke();\n    };\n\n    const circleX = (r, a, v = 1) => r * Math.cos(a * v);\n    const circleY = (r, a, v = 1) => r * Math.sin(a * v);\n\n    const draw = ({ canvas, context }) => {\n        for (let radius = 0; radius < currentRadiusSize; radius++) {\n            let ox;\n            let oy;\n\n            if (history.hasOwnProperty(radius)) {\n                ox = history[radius].x;\n                oy = history[radius].y;\n            }\n\n            const radScaled = radius / radiusScale;\n            const a = 1;\n            const b = 1;\n            const radians = degreesToRadians(angle) - Math.PI / 8;\n            let x = originX + circleX(radScaled, radians, a);\n            let y = originY + circleY(radScaled, radians, b);\n\n            const noise = simplexNoise3d(x, y, time, 0.02);\n            x += noise;\n            y += noise;\n\n            const monoColor = imageColor.clone().spin(time * 0.1);\n\n            if (ox !== undefined && oy !== undefined) {\n                drawLine(context, ox, oy, x, y, monoColor, 0.5);\n            }\n\n            history[radius] = { x, y };\n\n            time += 0.01;\n        }\n\n        angle += 3;\n\n        if (angle > 360) {\n            angle = 0;\n\n            currentRadiusSize = randomWholeBetween(100, 360);\n            radiusScale = 1; // currentRadiusSize / maxRadius;\n\n            const offs = randomPointAround((canvas.width - maxRadius) * 0.75);\n            originX = canvasMidX + offs.x;\n            originY = canvasMidY + offs.y;\n            background(canvas, context)(backgroundColor.setAlpha(0.25));\n        }\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport random from 'canvas-sketch-util/random';\nimport { randomWholeBetween, uvFromAngle, oneOf, randomPointAround, randomBoolean } from '../lib/math';\nimport { Particle, updatePosWithVelocity, applyForce } from '../lib/Particle';\nimport { background, renderField } from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { palettes } from '../lib/palettes';\nimport { Vector } from '../lib/Vector';\nimport { simplexNoise2d, simplexNoise3d, cliffordAttractor, jongAttractor } from '../lib/attractors';\n\n/*\nBased on\nhttps://tylerxhobbs.com/essays/2020/flow-fields\n */\n\nconst drawRibbonPoint = (context, point, i, thickness = 0, height = 0) => {\n    const x = point[0];\n    const y = point[1];\n    const jitterX = 0; // Math.cos(i * 0.05) * height;\n    const jitterY = 0; // Math.sin(i * 0.05) * height;\n    context.lineTo(x + thickness + jitterX, y + thickness + jitterY);\n};\n\nconst drawRibbon = (context) => (sideA, sideB, color, stroke = false, thickness = 1) => {\n    const startx = sideA[0][0];\n    const starty = sideA[0][1];\n    const endx = sideB[0][0] + thickness;\n    const endy = sideB[0][1] + thickness;\n\n    const rColor = tinycolor(color).clone();\n    const gradient = context.createLinearGradient(0, starty - thickness, 0, endy + thickness);\n    gradient.addColorStop(0, rColor.toRgbString());\n    gradient.addColorStop(1, rColor.clone().darken(20).toRgbString());\n\n    context.beginPath();\n    context.moveTo(startx, starty);\n    sideA.forEach((w, i) => {\n        drawRibbonPoint(context, w, i, 0, thickness * 0.1);\n    });\n    sideB.forEach((w, i) => {\n        drawRibbonPoint(context, w, i, thickness, thickness * 0.1);\n    });\n    context.lineTo(startx, starty);\n\n    if (stroke) {\n        context.strokeStyle = rColor.darken(70).toRgbString();\n        context.lineWidth = 0.75;\n        context.stroke();\n    }\n\n    context.fillStyle = gradient;\n    context.fill();\n};\n\nexport const flowFieldRibbons = () => {\n    const config = {\n        name: 'flowFieldRibbons',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    let canvasMidX;\n    let canvasMidY;\n    const palette = palettes.pop;\n    const backgroundColor = tinycolor('white');\n\n    let time = 0;\n\n    const createRibbon = (fieldFn, startX, startY, length, vlimit = 1) => {\n        const props = {\n            x: startX,\n            y: startY,\n            velocityX: 0,\n            velocityY: 0,\n            mass: 1,\n        };\n        const particle = new Particle(props);\n        const coords = [];\n        for (let i = 0; i < length; i++) {\n            const theta = fieldFn(particle.x, particle.y);\n            // theta = quantize(4, theta);\n            const force = uvFromAngle(theta);\n            applyForce(force, particle);\n            particle.vVector = particle.vVector.limit(vlimit);\n            updatePosWithVelocity(particle);\n            coords.push([particle.x, particle.y]);\n            particle.aVector = new Vector(0, 0);\n        }\n        return coords;\n    };\n\n    const simplex2d = (x, y) => simplexNoise2d(x, y, 0.0005);\n    const simplex3d = (x, y) => simplexNoise3d(x, y, time, 0.0005);\n    const clifford = (x, y) => cliffordAttractor(canvas.width, canvas.height, x, y);\n    const jong = (x, y) => jongAttractor(canvas.width, canvas.height, x, y);\n    const noise = randomBoolean() ? clifford : jong;\n\n    let maxRadius;\n\n    const setup = ({ canvas, context }) => {\n        canvasMidX = canvas.width / 2;\n        canvasMidY = canvas.height / 2;\n        maxRadius = canvas.width * 0.4;\n\n        background(canvas, context)(backgroundColor);\n\n        renderField(canvas, context, noise, 'rgba(0,0,0,.15)', canvas.width / 10, 5);\n    };\n\n    const ribbonLen = randomWholeBetween(50, 1000);\n    const ribbonThickness = randomWholeBetween(3, 30);\n\n    const draw = ({ canvas, context }) => {\n        const color = oneOf(palette);\n        const len = maxRadius * 2; // ribbonLen;\n\n        const rpoint = random.onCircle(maxRadius); // randomPointAround(maxRadius * 0.4);\n\n        const x = rpoint[0] + canvasMidX;\n        const y = rpoint[1] + canvasMidY;\n        const x2 = x + 2;\n        const y2 = y;\n\n        const sideA = createRibbon(noise, x, y, len, 1);\n        const sideB = createRibbon(noise, x2, y2, len, 1).reverse();\n\n        drawRibbon(context)(sideA, sideB, color, false, ribbonThickness);\n\n        time += 0.01;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport random from 'canvas-sketch-util/random';\nimport { randomWholeBetween, uvFromAngle, oneOf, randomPointAround, randomBoolean } from '../lib/math';\nimport { Particle, updatePosWithVelocity, applyForce } from '../lib/Particle';\nimport { background, renderField } from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { palettes } from '../lib/palettes';\nimport { Vector } from '../lib/Vector';\nimport { simplexNoise2d, simplexNoise3d, cliffordAttractor, jongAttractor } from '../lib/attractors';\n\n/*\nBased on\nhttps://tylerxhobbs.com/essays/2020/flow-fields\n */\n\nconst drawRibbonPoint = (context, point, i, thickness = 0, height = 0) => {\n    const x = point[0];\n    const y = point[1];\n    const jitterX = 0; // Math.cos(i * 0.05) * height;\n    const jitterY = 0; // Math.sin(i * 0.05) * height;\n    context.lineTo(x + thickness + jitterX, y + thickness + jitterY);\n};\n\nconst drawRibbonSegment = (context, sideA, sideB, color, stroke = false, thickness = 1) => {\n    const segStartX = sideA[0][0];\n    const segStartY = sideA[0][1];\n    const segEndX = sideB[0][0] + thickness;\n    const segEndY = sideB[0][1] + thickness;\n\n    const rColor = tinycolor(color).clone();\n    const gradient = context.createLinearGradient(0, segStartY - thickness, 0, segEndY + thickness);\n    gradient.addColorStop(0, rColor.toRgbString());\n    gradient.addColorStop(0.5, rColor.toRgbString());\n    gradient.addColorStop(1, rColor.clone().darken(20).saturate(50).toRgbString());\n\n    context.beginPath();\n    context.moveTo(segStartX, segStartY);\n    sideA.forEach((w, i) => {\n        drawRibbonPoint(context, w, i, 0, thickness * 0.1);\n    });\n    sideB.forEach((w, i) => {\n        drawRibbonPoint(context, w, i, thickness, thickness * 0.1);\n    });\n    context.lineTo(segStartX, segStartY);\n\n    if (stroke) {\n        context.strokeStyle = rColor.darken(70).toRgbString();\n        context.lineWidth = 0.75;\n        context.stroke();\n    }\n\n    context.fillStyle = gradient;\n    context.fill();\n};\n\nconst drawRibbon = (context) => (sideA, sideB, color, stroke = false, thickness = 1) => {\n    const segmentGap = 1; // randomWholeBetween(1, 4);\n    const segments = randomWholeBetween(1, 3);\n    // const segmentsStep = Math.ceil((sideA.length - segmentGap * (segments - 1)) / segments);\n    const segmentData = [];\n\n    let left = sideA.length;\n    let start = 0;\n\n    for (let i = 0; i < segments; i++) {\n        const len = randomWholeBetween(1, left / 2);\n        // const start = i * segmentsStep + segmentGap * i;\n        // const len = segmentsStep;\n        segmentData.push({\n            sideA: sideA.slice(start, start + len),\n            sideB: sideB.slice(start, start + len).reverse(),\n        });\n        start += len + segmentGap;\n        left -= len + segmentGap;\n    }\n    segmentData.forEach((s) => {\n        drawRibbonSegment(context, s.sideA, s.sideB, color, stroke, thickness);\n    });\n\n    // drawRibbonSegment(context, segmentStart, segmentLen, sideA, sideB, color, stroke, thickness);\n};\n\nexport const flowFieldRibbons2 = () => {\n    const config = {\n        name: 'flowFieldRibbons',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    let canvasMidX;\n    let canvasMidY;\n    const palette = palettes['80s_pop'];\n    const backgroundColor = tinycolor('white');\n\n    let time = 0;\n\n    const createRibbon = (fieldFn, startX, startY, length, vlimit = 1) => {\n        const props = {\n            x: startX,\n            y: startY,\n            velocityX: 0,\n            velocityY: 0,\n            mass: 1,\n        };\n        const particle = new Particle(props);\n        const coords = [];\n        for (let i = 0; i < length; i++) {\n            const theta = fieldFn(particle.x, particle.y);\n            // theta = quantize(4, theta);\n            const force = uvFromAngle(theta);\n            applyForce(force, particle);\n            particle.vVector = particle.vVector.limit(vlimit);\n            updatePosWithVelocity(particle);\n            coords.push([particle.x, particle.y]);\n            particle.aVector = new Vector(0, 0);\n        }\n        return coords;\n    };\n\n    const simplex2d = (x, y) => simplexNoise2d(x, y, 0.0001);\n    const simplex3d = (x, y) => simplexNoise3d(x, y, time, 0.0005);\n    const clifford = (x, y) => cliffordAttractor(canvas.width, canvas.height, x, y);\n    const jong = (x, y) => jongAttractor(canvas.width, canvas.height, x, y);\n    const noise = randomBoolean() ? clifford : jong;\n\n    let maxRadius;\n\n    const setup = ({ canvas, context }) => {\n        canvasMidX = canvas.width / 2;\n        canvasMidY = canvas.height / 2;\n        maxRadius = canvas.width * 0.4;\n\n        background(canvas, context)(backgroundColor);\n\n        // renderField(\n        //     canvas,\n        //     context,\n        //     noise,\n        //     tinycolor(oneOf(palette)).lighten(30),\n        //     canvas.width / 10,\n        //     canvas.width / 20\n        // );\n    };\n\n    const ribbonLen = randomWholeBetween(200, 500);\n    const ribbonThickness = randomWholeBetween(100, 300);\n\n    const maxItterations = randomWholeBetween(10, 30);\n    let currentItteration = 0;\n\n    const draw = ({ canvas, context }) => {\n        const color = oneOf(palette);\n        const len = ribbonLen;\n\n        // const rpoint = random.onCircle(maxRadius); // randomPointAround(maxRadius * 0.4);\n        const rpoint = [randomWholeBetween(0, canvas.width), randomWholeBetween(0, canvas.height)];\n\n        const x = rpoint[0];\n        const y = rpoint[1];\n        const x2 = x + 2;\n        const y2 = y;\n\n        const sideA = createRibbon(noise, x, y, len, 1);\n        const sideB = createRibbon(noise, x2, y2, len, 1);\n\n        drawRibbon(context)(sideA, sideB, color, false, ribbonThickness);\n\n        time += 0.01;\n\n        if (++currentItteration > maxItterations) return -1;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","export class Point {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    get toArray() {\n        return [this.x, this.y, this.z];\n    }\n\n    get toObject() {\n        return {\n            x: this.x,\n            y: this.y,\n            z: this.z,\n        };\n    }\n\n    clone() {\n        return new Point(this.x, this.y, this.z);\n    }\n}\n","/*\nFlow field inside?\nParticle physics inside\nBorder\nClip to no overflow?\n */\n\nimport tinycolor from 'tinycolor2';\nimport { randomWholeBetween, randomNormalWholeBetween } from './math';\nimport { defaultValue } from './utils';\nimport { drawRect, drawRectFilled, resetStyles } from './canvas';\nimport { Point } from './Point';\n\nconst defaultMP = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n};\n\nconst defaultFlow = (x, y) => 0;\n\nlet boxIndex = 0;\n\nexport class Box {\n    #backgroundColor;\n\n    constructor(props, children = []) {\n        this.name = `box${boxIndex++}`;\n        this.canvas = props.canvas;\n        this.context = props.context;\n        this.x = props.x;\n        this.y = props.y;\n        this.width = props.width;\n        this.height = props.height;\n        this.rotation = defaultValue(props, 'rotation', 0);\n        this.#backgroundColor = tinycolor(defaultValue(props, 'backgroundColor', 'white'));\n        this.padding = defaultValue(props, 'padding', defaultMP);\n        this.clip = defaultValue(props, 'clip', true);\n        this.flowField = defaultValue(props, 'flowField', defaultFlow);\n        this.children = children;\n    }\n\n    get x2() {\n        return this.x + this.width;\n    }\n\n    get y2() {\n        return this.y + this.height;\n    }\n\n    get innerWidth() {\n        return this.width - this.padding.left - this.padding.right;\n    }\n\n    get innerHeight() {\n        return this.height - this.padding.top - this.padding.bottom;\n    }\n\n    get centerPoint() {\n        return new Point(this.x + Math.round(this.width / 2), this.y + Math.round(this.height / 2));\n    }\n\n    get backgroundColor() {\n        return this.#backgroundColor.clone();\n    }\n\n    set backgroundColor(c) {\n        this.#backgroundColor = tinycolor(c);\n    }\n\n    fill(color) {\n        color = color || this.backgroundColor;\n        drawRectFilled(this.context)(this.x, this.y, this.width, this.height, color);\n    }\n\n    erase() {\n        this.context.clearRect(this.x, this.y, this.width, this.height);\n    }\n\n    outline(thickness, color) {\n        this.context.strokeStyle = tinycolor(color).toRgbString();\n        this.context.lineWidth = thickness;\n        this.context.rect(this.x, this.y, this.width, this.height);\n        this.context.stroke();\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip\n    // https://dustinpfister.github.io/2019/08/14/canvas-save/\n    // https://dustinpfister.github.io/2019/10/08/canvas-clip/\n    createClip() {\n        this.context.save();\n        const region = new Path2D();\n        region.rect(this.x, this.y, this.width, this.height);\n        this.context.clip(region);\n    }\n\n    removeClip() {\n        this.context.restore();\n    }\n\n    translateX(x) {\n        return this.x + x;\n    }\n\n    translateY(y) {\n        return this.y + y;\n    }\n\n    translateInto(point) {\n        return new Point(this.translateX(point.x), this.translateY(point.y));\n    }\n\n    translateOut(point) {\n        return new Point(point.x - this.x, point.y - this.y);\n    }\n\n    randomPointInside(distribution = 'whole') {\n        const edgeBuffer = 10;\n        let point = new Point(\n            randomWholeBetween(edgeBuffer, this.width - edgeBuffer),\n            randomWholeBetween(edgeBuffer, this.height - edgeBuffer)\n        );\n        if (distribution === 'normal') {\n            point = new Point(\n                randomNormalWholeBetween(edgeBuffer, this.width - edgeBuffer),\n                randomNormalWholeBetween(edgeBuffer, this.height - edgeBuffer)\n            );\n        }\n        return point;\n    }\n\n    isInside(point) {\n        return point.x >= this.x && point.x <= this.x2 && point.y >= this.y && point.y <= this.y2;\n    }\n\n    isOutside(point) {\n        return !this.isInside(point);\n    }\n\n    clipPoint(point) {\n        const np = new Point(point.x, point.y);\n        if (point.x < this.x) np.x = this.x;\n        if (point.x > this.x2) np.x = this.x2;\n        if (point.y < this.y) np.y = this.y;\n        if (point.y > this.y2) np.y = this.y2;\n        return np;\n    }\n\n    wrapPoint(point) {\n        const np = new Point(point.x, point.y);\n        if (point.x < this.x) np.x = this.x2;\n        if (point.x > this.x2) np.x = this.x;\n        if (point.y < this.y) np.y = this.y2;\n        if (point.y > this.y2) np.y = this.y;\n        return np;\n    }\n\n    particleEdgeBounce = (particle) => {\n        const psize = particle.radius;\n        if (particle.x + psize > this.x2) {\n            particle.x = this.x2 - psize;\n            particle.reverseVelocityX();\n        }\n        if (particle.x - psize < this.x) {\n            particle.x = this.x + psize;\n            particle.reverseVelocityX();\n        }\n        if (particle.y + psize > this.y2) {\n            particle.y = this.y2 - psize;\n            particle.reverseVelocityY();\n        }\n        if (particle.y - psize < this.y) {\n            particle.y = this.y + psize;\n            particle.reverseVelocityY();\n        }\n    };\n\n    particleEdgeWrap = (particle) => {\n        const psize = particle.radius;\n        if (particle.x + psize > this.x2) {\n            particle.x = this.x + psize;\n        }\n        if (particle.x - psize < this.x) {\n            particle.x = this.x2 - psize;\n        }\n        if (particle.y + psize > this.y2) {\n            particle.y = this.y + psize;\n        }\n        if (particle.y - psize < this.y) {\n            particle.y = this.y2 - psize;\n        }\n    };\n}\n","import tinycolor from 'tinycolor2';\nimport { Particle, updatePosWithVelocity, createRandomParticleValues, applyForce } from '../lib/Particle';\nimport {\n    background,\n    connectParticles,\n    drawParticlePoint,\n    pixel,\n    resetStyles,\n    stippleRect,\n    texturizeRect,\n} from '../lib/canvas';\nimport { createGridCellsXY, mapRange, oneOf, uvFromAngle } from '../lib/math';\nimport { ratio, scale } from '../lib/sketch';\nimport { palettes, warmGreyDark, warmWhite, warmPink, paperWhite, bicPenBlue } from '../lib/palettes';\nimport { Box } from '../lib/Box';\nimport { simplexNoise3d } from '../lib/attractors';\nimport { Vector } from '../lib/Vector';\n\nexport const shadedBoxes = () => {\n    const config = {\n        name: 'shadedBoxes',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    const numParticles = 30;\n\n    let canvasCenterX;\n    let canvasCenterY;\n    let centerRadius;\n    let grid;\n    const boxes = [];\n    const palette = palettes.pop;\n    let time = 0;\n\n    const setup = ({ canvas, context }) => {\n        canvasCenterX = canvas.width / 2;\n        canvasCenterY = canvas.height / 2;\n        centerRadius = canvas.height / 4;\n\n        background(canvas, context)(paperWhite);\n\n        const boxwhite = paperWhite.clone().darken(10).saturate(10);\n        const boxbg = [boxwhite, bicPenBlue];\n        const boxfg = [bicPenBlue, boxwhite];\n\n        const gridMargin = Math.round(canvas.width / 10);\n        const gridGutter = Math.round(gridMargin / 4);\n\n        grid = createGridCellsXY(canvas.width, canvas.height, 1, 10, gridMargin, gridGutter);\n\n        grid.points.forEach((p, i) => {\n            boxes.push(\n                new Box({\n                    canvas,\n                    context,\n                    x: p[0],\n                    y: p[1],\n                    width: grid.columnWidth,\n                    height: grid.rowHeight,\n                })\n            );\n        });\n\n        let freq = 0.0001;\n\n        boxes.forEach((b, bidx) => {\n            const particles = [];\n            const clr = bidx % 2 === 0 ? 0 : 1;\n            b.backgroundColor = bicPenBlue.clone(); // boxbg[clr];\n            b.flowField = (x, y, t) => simplexNoise3d(x, y, t, freq);\n            freq += 0.0005;\n            for (let i = 0; i < numParticles; i++) {\n                const props = createRandomParticleValues(canvas);\n                const coords = b.translateInto(b.randomPointInside('normal'));\n                props.x = coords.x;\n                props.y = coords.y;\n                props.velocityX = 0;\n                props.velocityY = 0;\n                props.radius = 1;\n                props.color = bidx <= 4 ? bicPenBlue.clone() : paperWhite.clone(); // tinycolor(boxfg[clr]).clone().setAlpha(0.5);\n                particles.push(new Particle(props));\n            }\n            b.children = particles;\n\n            // texturizeRect(context)(b.x, b.y, b.width, b.height, b.backgroundColor, bidx * 3 + 1, 'circles2');\n            stippleRect(context)(b.x, b.y, b.width, b.height, b.backgroundColor, bidx + 1, 'circles2');\n        });\n\n        // boxes.forEach((b) => {\n        //     b.fill();\n        // });\n\n        return -1;\n    };\n\n    const draw = ({ canvas, context }) => {\n        boxes.forEach((box) => {\n            box.createClip();\n            box.children.forEach((particle) => {\n                const theta = box.flowField(particle.x, particle.y, time);\n                const force = uvFromAngle(theta);\n                applyForce(force, particle);\n                particle.vVector = particle.vVector.limit(1);\n                updatePosWithVelocity(particle);\n                particle.aVector = new Vector(0, 0);\n                box.particleEdgeWrap(particle);\n                pixel(context)(particle.x, particle.y, particle.color, 'circle', 0.5);\n            });\n            box.removeClip();\n        });\n        time += 0.1;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport { mapRange } from '../lib/math';\nimport { background, pixel } from '../lib/canvas';\nimport { ratio, scale, orientation } from '../lib/sketch';\nimport { paperWhite } from '../lib/palettes';\nimport { Bitmap } from '../lib/Bitmap';\nimport sourcePng from '../../media/images/rafaella-mendes-diniz-400.png';\n\n/*\nhttps://larrycarlson.com/collections/wavy-art-prints\n */\n\nexport const larrycarlson01 = () => {\n    const config = {\n        name: 'larrycarlson',\n        ratio: ratio.square,\n        // ratio: ratio.poster,\n        // orientation: orientation.portrait,\n        scale: scale.standard,\n    };\n\n    let ctx;\n    let canvasWidth;\n    let canvasHeight;\n    let canvasCenterX;\n    let canvasCenterY;\n    let centerRadius;\n    let imageWidth;\n    let imageHeight;\n    let startX;\n    let maxX;\n    let startY;\n    let maxY;\n    const margin = 50;\n\n    const backgroundColor = paperWhite.clone();\n    const image = new Bitmap(sourcePng);\n\n    const colorImageTop = tinycolor('#ffeb00');\n    const colorImageBottom = tinycolor('#01ff4f');\n\n    const colorLinesTop = tinycolor('#ff01d7');\n    const colorLinesBottom = tinycolor('#5600cc');\n\n    const setup = ({ canvas, context }) => {\n        image.init(canvas, context);\n\n        ctx = context;\n        canvasWidth = canvas.width;\n        canvasHeight = canvas.height;\n        canvasCenterX = canvas.width / 2;\n        canvasCenterY = canvas.height / 2;\n        centerRadius = canvas.height / 4;\n\n        imageWidth = canvas.width - margin * 2;\n        imageHeight = canvas.height - margin * 2;\n\n        startX = margin;\n        maxX = canvas.width - margin;\n        startY = margin;\n        maxY = canvas.height - margin;\n\n        background(canvas, context)(backgroundColor);\n    };\n\n    const circleX = (theta, amp, freq) => Math.cos(theta / freq) * amp;\n    const circleY = (theta, amp, freq) => Math.sin(theta / freq) * amp;\n\n    const horizontalSinWave = (yoffset) => {\n        const freq = 5;\n        const amp = 15;\n        const step = 2;\n        let theta = 0;\n        for (let x = startX; x < maxX; x += step) {\n            const y = circleY(theta, amp, freq) + yoffset;\n            pixel(ctx)(x, y, pixelColor, 'circle', 2);\n            theta++;\n        }\n    };\n\n    const verticalSinWave = (xoffset) => {\n        const freq = 5;\n        const amp = 15;\n        const step = 2;\n        let theta = 0;\n        for (let y = startY; y < maxY; y += step) {\n            const x = circleY(theta, amp, freq) + xoffset;\n            pixel(ctx)(x, y, pixelColor, 'circle', 2);\n            theta++;\n        }\n    };\n\n    const fullScreenSin = (xoffset, yoffset) => {\n        const freq = 30;\n        const amp = 5;\n        const step = 5;\n        let theta = 0;\n        for (let sx = startX; sx < maxX; sx += step) {\n            for (let sy = startY; sy < maxY; sy += step) {\n                const x = circleX(theta, amp, freq) + xoffset + sx;\n                const y = circleY(theta, amp, freq) + yoffset + sy;\n                plot(x + xoffset, y + yoffset);\n                theta++;\n            }\n        }\n    };\n\n    const renderImage = () => {\n        const resolution = 10;\n        const border = margin / -2;\n        const freq = 15;\n        const amp = 3;\n        let theta = 0;\n        for (let x = startX + border; x < maxX - border; x += resolution) {\n            for (let y = startY + border; y < maxY - border; y += resolution) {\n                const pxcolor = image.pixelColorFromCanvas(x, y);\n                const pxbrightness = pxcolor.getBrightness();\n                const color = tinycolor.mix(colorImageTop, colorImageBottom, mapRange(startY, maxY, 0, 100, y));\n\n                const size = resolution;\n\n                if (pxbrightness >= 70 && pxbrightness <= 100) {\n                    color.spin(30);\n                }\n\n                if (pxbrightness >= 120 && pxbrightness <= 220) {\n                    color.spin(-30);\n                }\n\n                const ox = circleX(theta, amp, freq) + x;\n                const oy = circleY(theta, amp, freq) + y;\n\n                pixel(ctx)(ox, oy, color, 'circle', size);\n\n                theta += 0.25;\n            }\n        }\n    };\n\n    const plot = (x, y) => {\n        if (x > startX && x < maxX && y > startY && y < maxY) {\n            const size = image.sizeFromPixelBrightness(x, y, 3, 128, 256);\n            const color = tinycolor.mix(colorLinesTop, colorLinesBottom, mapRange(startY, maxY, 0, 100, y));\n            pixel(ctx)(x + 1, y, color.clone().darken(20), 'circle', size);\n            pixel(ctx)(x, y, color, 'circle', size);\n        }\n    };\n\n    const drawRibbonPoint = (point, sideB) => {\n        const x = point[0];\n        const y = point[1];\n\n        const size = image.sizeFromPixelBrightness(x, y, 10, 128, 255);\n        let jitterX = size;\n        let jitterY = 0;\n\n        if (false && sideB) {\n            jitterX = size * -1;\n            jitterY = size * -0.5;\n        }\n\n        ctx.lineTo(x + jitterX, y + jitterY);\n    };\n\n    const drawRibbon = (sideA, color, stroke = false, thickness = 1) => {\n        const sideB = sideA.slice(); // .reverse();\n\n        const startx = sideA[0][0];\n        const starty = sideA[0][1];\n        const endx = sideB[0][0];\n        const endy = sideB[0][1];\n\n        const rColor = tinycolor(color).clone();\n        const gradient = ctx.createLinearGradient(0, startY, 0, maxY);\n        gradient.addColorStop(0, colorLinesTop.toRgbString());\n        gradient.addColorStop(1, colorLinesBottom.toRgbString());\n\n        ctx.beginPath();\n        ctx.moveTo(startx, starty);\n        sideA.forEach((w, i) => {\n            drawRibbonPoint(w, false);\n        });\n        sideB.forEach((w, i) => {\n            drawRibbonPoint(w, true);\n        });\n        ctx.lineTo(startx, starty);\n\n        if (stroke) {\n            ctx.strokeStyle = rColor.darken(70).toRgbString();\n            ctx.lineWidth = 0.75;\n            ctx.stroke();\n        }\n\n        ctx.fillStyle = gradient;\n        ctx.fill();\n    };\n\n    const renderPoints = (points) => {\n        points.forEach((line) => {\n            if (line.length) {\n                drawRibbon(line, 'red', false, 0);\n            }\n        });\n    };\n\n    /*\n    https://www.desmos.com/calculator/rzwar3xxpy\n    y-x = amp * Math.sin((y+x)/freq)\n     */\n    const plotDiagSinWave = (xoffset, yoffset) => {\n        const freq = 30; // 30\n        const amp = 5; // 5\n        let y = 0;\n        const a = Math.PI / 3; // angle of the wave, 1 is 45\n        for (let x = 0; x < canvasWidth + 10; x++) {\n            const b = Math.sin(x / Math.PI) * 5;\n            // x = y - Math.sin(y+x)\n            y = amp * Math.sin((y + b) / freq) + x * a;\n            plot(x + xoffset, y + yoffset);\n        }\n    };\n\n    const getPointsDiagSinWave = (xoffset, yoffset) => {\n        const freq = 30; // 30\n        const amp = 5; // 5\n        let y = 0;\n        const a = Math.PI / 3; // angle of the wave, 1 is 45\n        const points = [];\n        for (let x = 0; x < canvasWidth + 10; x++) {\n            const b = x / Math.PI;\n            y = amp * Math.sin((y + b) / freq) + x * a;\n            const px = x + xoffset;\n            const py = y + yoffset;\n            if (px > startX && px < maxX && py > startY && py < maxY) {\n                points.push([px, py]);\n            }\n        }\n        return points;\n    };\n\n    const draw = ({ canvas, context }) => {\n        // horizontalSinWave(startY);\n        // verticalSinWave(startX);\n        // fullScreenSin(0, 0);\n\n        const points = [];\n\n        renderImage();\n\n        for (let x = (imageWidth + 100) * -1; x < imageWidth * 2; x += 15) {\n            plotDiagSinWave(x, 0);\n            // points.push(getPointsDiagSinWave(x, 0));\n        }\n\n        // renderPoints(points);\n\n        return -1;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import { variation1 } from './released/variation1';\nimport { variation2 } from './released/variation2';\nimport { domokun } from './released/domokun';\nimport { variation4 } from './released/variation4';\nimport { variation5 } from './released/variation5';\nimport { variation6 } from './released/variation6';\nimport { rainbowRakeOrbit } from './released/rainbow-rake-orbit-mouse';\nimport { threeAttractors } from './released/threeAttractors';\nimport { hiImage01 } from './released/hiImage01';\nimport { windLines } from './released/windLines';\nimport { waves01 } from './released/waves01';\nimport { lissajous01 } from './released/lissajous01';\nimport { flowFieldParticles } from './released/flow-field-particles';\nimport { flowFieldArcs } from './released/flow-field-arcs';\nimport { flowFieldImage } from './released/flow-field-image';\nimport { radialNoise } from './released/radial-noise';\nimport { flowFieldRibbons } from './released/flow-field-ribbons';\nimport { flowFieldRibbons2 } from './released/flow-field-ribbons-2';\nimport { shadedBoxes } from './released/shaded-boxes';\nimport { larrycarlson01 } from './released/larrycarlson01';\n\nexport const variationsIndex = {\n    1: {\n        note: 'Particles are attracted to the pointer. Press to repel.',\n        sketch: variation1,\n    },\n    2: {\n        note: 'Press to increase speed.',\n        sketch: variation2,\n    },\n    3: {\n        note: 'Particles are repelled from the pointer. Press to attract.',\n        sketch: domokun,\n    },\n    4: {\n        note: 'Particles are repelled from the pointer. Press to attract.',\n        sketch: variation4,\n    },\n    5: {\n        note: 'Sit back and watch.',\n        sketch: variation5,\n    },\n    6: {\n        note: 'Move the mouse',\n        sketch: variation6,\n    },\n    7: {\n        note: 'Rakes orbit center and the mouse. Click to repel.',\n        sketch: rainbowRakeOrbit,\n    },\n    8: {\n        note: 'One attractor in the center, two on the sides.',\n        sketch: threeAttractors,\n    },\n    9: {\n        note: 'Say Hi',\n        sketch: hiImage01,\n    },\n    10: {\n        note: 'In the breeze',\n        sketch: windLines,\n    },\n    11: {\n        note: 'Inspired by Churn, Kenny Vaden https://www.reddit.com/r/generative/comments/lq8r11/churn_r_code/',\n        sketch: waves01,\n    },\n    12: {\n        note: 'Experimenting with rose shapes. Refresh for new randomized set.',\n        sketch: lissajous01,\n    },\n    13: {\n        note: 'Particles and fibers flowing with 3d simplex noise.',\n        sketch: flowFieldParticles,\n    },\n    14: {\n        note: 'Arcs flowing with 3d simplex noise.',\n        sketch: flowFieldArcs,\n    },\n    15: {\n        note: 'Rendering an image with flow fields. Photo by Francesca Zama https://unsplash.com/photos/OFjnQOf1pPA',\n        sketch: flowFieldImage,\n    },\n    16: {\n        note: 'Simplex noise going around ...',\n        sketch: radialNoise,\n    },\n    17: {\n        note: 'Ribbons attracted to an attractor',\n        sketch: flowFieldRibbons,\n    },\n    18: {\n        note: 'Ribbons attracted to an attractor',\n        sketch: flowFieldRibbons2,\n    },\n    19: {\n        note: 'Shaded boxes with flow field particles.',\n        sketch: shadedBoxes,\n    },\n    20: {\n        note: 'Render an image in the wavy art style of Larry Carlson',\n        sketch: larrycarlson01,\n    },\n};\n","/*\nExplorations with generative code\n*/\n\nimport normalize from 'normalize.css';\nimport { sketch } from './lib/sketch';\nimport { variationsIndex } from './variationsIndex';\n\nimport { shadedBoxes } from './released/shaded-boxes';\nimport { larrycarlson01 } from './released/larrycarlson01';\n\nconst experimentalVariation = undefined;\n// const experimentalVariation = larrycarlson01;\n\nconst s = sketch();\n\nconst saveCanvasCapture = (_) => {\n    console.log('Saving capture');\n    const imageURI = s.canvas().toDataURL('image/png');\n    document.getElementById('download').setAttribute('download', `${s.variationName()}.png`);\n    document.getElementById('download').href = imageURI;\n};\n\ndocument.getElementById('download').addEventListener('click', saveCanvasCapture);\nwindow.addEventListener('keydown', (e) => {\n    if (e.key === 's') {\n        document.getElementById('download').click();\n    }\n});\n\nconst setNote = (note) => (document.getElementById('note').innerText = note);\n\nconst getQueryVariable = (variable) => {\n    const query = window.location.search.substring(1);\n    const vars = query.split('&');\n    for (let i = 0; i < vars.length; i++) {\n        const pair = vars[i].split('=');\n        if (pair[0] === variable) {\n            return pair[1];\n        }\n    }\n    return false;\n};\n\nlet variationKey = getQueryVariable('variation');\nconst variationKeys = Object.keys(variationsIndex);\nvariationKey = variationKey || variationKeys[variationKeys.length - 1];\n\nif (variationsIndex.hasOwnProperty(variationKey) && experimentalVariation === undefined) {\n    const vToRun = variationsIndex[variationKey];\n    setNote(vToRun.note);\n    s.run(vToRun.sketch);\n} else {\n    setNote('Not a valid variation!');\n}\n\nif (experimentalVariation) {\n    s.run(experimentalVariation);\n}\n"]}