{"version":3,"sources":["node_modules/tinycolor2/tinycolor.js","node_modules/seed-random/index.js","node_modules/simplex-noise/simplex-noise.js","node_modules/defined/index.js","node_modules/canvas-sketch-util/random.js","scripts/lib/Vector.js","scripts/lib/math.js","scripts/lib/canvas.js","scripts/lib/utils.js","scripts/lib/sketch.js","scripts/lib/Particle.js","scripts/lib/canvas-particles.js","scripts/released/variation1.js","scripts/released/variation2.js","scripts/released/domokun.js","scripts/released/variation4.js","scripts/released/variation5.js","scripts/released/variation6.js","scripts/released/rainbow-rake-orbit-mouse.js","scripts/lib/grids.js","scripts/released/threeAttractors.js","scripts/released/hiImage01.js","node_modules/nice-color-palettes/100.json","scripts/lib/palettes.js","scripts/lib/Timeline.js","scripts/released/windLines.js","scripts/released/waves01.js","scripts/lib/canvas-text.js","scripts/released/lissajous01.js","scripts/lib/canvas-linespoints.js","scripts/lib/attractors.js","scripts/released/flow-field-particles.js","scripts/released/flow-field-arcs.js","scripts/lib/Bitmap.js","scripts/lib/canvas-paint.js","scripts/released/flow-field-image.js","scripts/released/radial-noise.js","scripts/released/flow-field-ribbons.js","scripts/released/flow-field-ribbons-2.js","scripts/lib/Point.js","scripts/lib/Box.js","scripts/lib/canvas-textures.js","scripts/released/shaded-boxes.js","scripts/released/larrycarlson02.js","scripts/lib/curve-calc.js","scripts/lib/lineSegments.js","scripts/lib/MeanderingRiver.js","scripts/released/meandering-river-02.js","scripts/released/meandering-river-01.js","scripts/variationsIndex.js","scripts/index.js"],"names":["fromAngles","theta","phi","Vector","Math","cos","sin","randomDirection","random","PI","asin","min","a","b","x","y","z","max","lerp","fraction","sub","mult","add","fromArray","angleBetween","angleTo","v","sqrt","dot","length","m","c","r","mag","div","cm","setMag","atan2","acos","n","slice","negative","subtract","multiply","divide","cross","unit","Ï€","TAU","abs","tan","pow","round","floor","setSeed","getRandomSeed","console","log","getSeed","golden","checkBoundsLeft","checkBoundsRight","snapNumber","snap","percentage","total","num","houghQuantize","numAngles","quantize","round2","Number","EPSILON","setRandomSeed","s","randomNormalBM","u","value","randomNormalBM2","skew","randomNormalNumberBetween","randomNormalWholeBetween","randomNumberBetween","valueNonZero","randomWholeBetween","randomNumberBetweenMid","randomSign","randomBoolean","randomChance","chance","averageNumArray","arry","reduce","oneOf","lowest","acc","highest","createRandomNumberArray","len","Array","from","map","loopingValue","t","pingPontValue","pointOnCircle","normalize","val","normalizeInverse","clamp","invlerp","mapRange","x1","y1","x2","y2","toSinValue","mapToTau","start","end","logInterval","total_intervals","startInterVal","endInterval","minLog","scale","result","i","push","exp","marginify","margin","width","height","pointDistance","pointA","pointB","dx","dy","pointRotateCoord","point","angle","pointAngleFromVelocity","velocityX","velocityY","aFromVector","uvFromAngle","radiansToDegrees","rad","degreesToRadians","deg","scalePointToCanvas","canvasWidth","canvasHeight","zoomFactor","create2dNoise","amplitude","frequency","noise2D","create2dNoiseAbs","create3dNoise","noise3D","create3dNoiseAbs","randomPointAround","range","radius","chaikin","input","itr","output","p0","p1","p0x","p0y","p1x","p1y","Q","R","intersect","x3","y3","x4","y4","denominator","ua","ub","isHiDPI","contextScale","resizeCanvas","canvas","context","window","devicePixelRatio","style","clearCanvas","_","clearRect","fillCanvas","opacity","color","fillStyle","fillRect","background","toRgbString","resetStyles","strokeStyle","lineWidth","setLineDash","lineCap","sharpLines","translate","blendMode","mode","globalCompositeOperation","filter","f","pixel","size","beginPath","arc","fill","setStokeColor","drawLine","strokeWidth","linecap","moveTo","lineTo","stroke","drawLineAngle","drawCircle","drawCircleFilled","drawRect","w","h","rect","drawRectFilled","drawSquareFilled","drawTriangleFilled","half","drawQuadRectFilled","mx","my","quadraticCurveTo","drawRoundRectFilled","corner","drawTestPoint","defaultValue","obj","key","hasOwnProperty","first","middle","last","limitArrayLen","arr","arrLength","MAX_COORD_HISTORY","splice","getArrayValuesFromStart","values","index","getArrayValuesFromEnd","orientation","portrait","landscape","ratio","letter","poster","square","auto","standard","hidpi","sketch","mouse","currentVariationFn","currentVariationRes","animationId","undefined","isDown","hasStarted","fps","drawRuns","document","getElementById","getContext","mouseDown","evt","mouseMove","canvasFrame","getBoundingClientRect","mouseUp","mouseOut","addEventListener","applyCanvasSize","run","variation","currentDrawLimit","config","innerWidth","innerHeight","newWidth","newHeight","cfgOrientation","cfgRatio","cfgScale","aSide","bSide","drawLimit","rendering","lastAnimationFrameTime","targetFpsInterval","startSketch","removeEventListener","setup","Date","now","requestAnimationFrame","renderAtFps","elapsed","draw","render","stop","cancelAnimationFrame","variationName","seed","name","Particle","initValues","accelerationX","accelerationY","mass","rotation","alpha","lifetime","colorFn","drawFn","updateFn","rest","props","xHistory","yHistory","oX","oY","g","velocity","fVect","fV","aV","acceleration","pV","mu","normal","vfriction","applyForce","coefficent","velUnit","speed","magSq","vdrag","affectDist","dir","distanceSq","strength","force","res","warn","unshift","createRandomParticleValues","edgeBounce","particle","reverseVelocityX","reverseVelocityY","edgeWrap","drawParticlePoint","drawRotatedParticle","ctx","pSaveX","pSaveY","save","rotate","heading","args","restore","connectParticles","pArray","proximity","useAlpha","pA","pB","distance","pColor","setAlpha","toHslString","drawPointTrail","trailLen","aFade","sFade","startX","startY","drawParticleVectors","vmult","vel","drawMouse","drawAttractor","gravityPoint","forceDirectionX","forceDirectionY","tempX","tempY","avoidPoint","attractPoint","variation1","numParticles","canvasCenterX","canvasCenterY","centerRadius","particlesArray","updatePosWithVelocity","variation2","friction","gravity","decay","tweenDamp","intensity","pointPush","getImageDataFromImage","image","drawImage","getImageData","getImageDataColor","imageData","data","domokun","png","Image","src","domokunPng","imageZoomFactor","pxColor","points","pX","pY","variation4","circles","centerX","centerY","diameter","variation5","variation6","hue","l","drawRake","spacing","rainbowRakeOrbit","attractor","attract","limit","createCirclePoints","offsetX","offsetY","steps","close","createGridPointsXY","xMargin","yMargin","columns","rows","gridPoints","colStep","rowStep","col","row","columnWidth","rowHeight","createGridCellsXY","gutter","ceil","createGridPointsUV","position","threeAttractors","attractorDist","leftattractor","midattractor","rightattractor","spikes","hiImage01","sourcePng","particleColor","drag","asTinyColor","brightest","colors","getBrightness","darkest","bicPenBlue","clone","paperWhite","warmWhite","warmPink","coolGreyDark","warmGreyDark","palettes","greyWarm","greyCool","pop","retro_sunset","vapor_wave","thought_provoking","nicePalette","nicepalettes","palette","Object","keys","hslFromRange","Timeline","loop","duration","totalLoopFrames","iterations","time","playhead","frame","elapsedLoops","startTime","windLines","counter","grid","timeline","forEach","wave","startvect","onFrame","createWave","noise","cfrequency","camplitude","drawWaveLine","startx","endx","yorigin","topWave","bottomWave","dots","currentX","currentY","waveColor","lineheight","gradient","createLinearGradient","addColorStop","darken","xstep","dotColor","rnd","lighten","waves01","canvasMiddle","waveRows","maxY","waves","incrementY","cosOffset","createWavesRow","idx","mid","distFromCenter","top","bottom","buffer","colorBackground","tinycolor","mix","spin","brighten","textStyles","sansHelvetica","monoCourier","monoLucidia","serifGeorgia","default","small","drawTextFilled","text","font","fillText","measureText","setTextAlignLeftTop","textAlign","textBaseline","setTextAlignAllCenter","Curve","originX","originY","xa","xb","ya","yb","lissajous01","curves","colorCurve","colorText","desaturate","roseX","curve","k","roseY","tick","lineJoin","turtleLineMode","plotLines","coords","drawPoints","drawConnectedPoints","drawPoint","drawPointsTaper","dist","circleAtPoint","variableCircleAtPoint","freq","amp","drawSegment","segments","weight","seg","drawSegmentTaper","maxWeight","minWeight","simplexNoise2d","simplexNoise3d","diagLines","sinField","d","cliffordAttractor","jongAttractor","flowAtPoint","canvasMidX","canvasMidY","renderField","fn","resolution","xStep","yStep","xMid","yMid","vect","renderFieldColor","lowColor","highColor","noiseMax","colorMix","fillColor","valueCloseTo","testVal","renderFieldContour","varience","nsteps","lowPoints","highPoints","px","py","nheight","renderNoiseContour","borderVal","lookRad","nextX","nextY","lastDistance","lastX","lastY","createFFParticleCoords","fieldFn","fMag","vlimit","flowFieldParticles","createRandomParticle","drawPixel","pcolor","maxSize","sNoise3d","drawFibers","clr","drawParticles","thick","startR","endR","circle","line","flowFieldArcs","cell","arcColor","lineColor","Bitmap","scaleX","scaleY","scaley","clear","pixelColorRaw","pixelAverageGrey","pixelColor","pixelTheta","low","brightness","pixelColorFromCanvas","splatter","amount","xoff","yoff","flowFieldImage","backgroundColor","imageFlow","pixelThetaFromCanvas","drawParticle","fromCenter","imagePixelColor","imagePixelBrightness","hslColor","init","radialNoise","maxRadius","radiusScale","currentRadiusSize","history","imageColor","circleX","circleY","ox","oy","radScaled","radians","monoColor","offs","drawRibbonPoint","thickness","drawRibbon","sideA","sideB","starty","endy","rColor","flowFieldRibbons","createRibbon","clifford","ribbonThickness","rpoint","onCircle","reverse","drawRibbonSegment","segStartX","segStartY","segEndY","saturate","segmentData","left","flowFieldRibbons2","ribbonLen","maxItterations","currentItteration","Point","defaultMP","right","defaultFlow","boxIndex","Box","children","psize","padding","clip","flowField","region","Path2D","translateX","translateY","distribution","edgeBuffer","isInside","np","intervals","clipping","setTextureClippingMask","getRotatedXYCoords","getRotatedYCoords","texturizeRect","quarter","strokeColor","endValue","numIttr","tx","ty","tx2","ty2","spiralRect","maxDim","radIncr","thetaIncr","spirals","stippleRect","j","linesRect","yIncrement","yincr","loops","yOff","connectSide","shadedBoxes","boxes","boxwhite","gridMargin","gridGutter","p","bidx","particles","translateInto","randomPointInside","box","createClip","particleEdgeWrap","removeClip","larrycarlson02","imageWidth","maxX","colorImageTop","colorImageBottom","colorLinesTop","colorLinesBottom","isOtherSide","sizeFromPixelBrightness","jitterX","renderPoints","closePath","getPointsDiagSinWave","xoffset","yoffset","pxcolor","pxbrightness","bright","renderImage","getCurvePoints","tension","numOfSeg","pts","rPos","rLen","Float32Array","cache","cachePtr","st","st2","st3","st23","st32","parse","pt1","pt2","pt3","pt4","t1x","t1y","t2x","t2y","c1","c2","c3","c4","triangleArea2","mCurvature","p2","p3","t4","lineSlope","linesIntersect","q","det","lambda","gamma","segmentsIntersect","segment","connectSegments","segs","next","trimSegments","skip","startPointsOnly","getSegPointsMid","e","midX","midY","trimPoints","pointsOrientation","segmentOrientation","segmentFromPoints","pointsFromSegment","a2p","a2V","v2a","a2pA","pa2VA","va2pA","flattenPointArray","unflattenPointArray","createSplinePoints","fpoints","reduceLineFromStart","reduceLineFromEnd","reduceLineEqually","r2","MeanderingRiver","initPoints","startingPoints","pointVectors","oxbows","handleOxbows","wrapEnd","fixedEndPoints","measureCurveAdjacent","segCurveMultiplier","mixTangentRatio","mixMagnitude","influenceLimit","pushFlowVectorFn","curveSize","insertionFactor","pointRemoveProx","oxbowProx","oxbowPointIndexProx","noiseMode","noiseFn","noiseStrengthAffect","mixNoiseRatio","maxHistory","storeHistoryEvery","running","channel","sum","diffs","prev","allPoints","curvature","averageMCurvature","getPointsToMeasure","curveDirection","nextPoint","tangent","biangle","bitangent","mVector","nscale","fixedPointsPct","startIndex","startIndexPoints","endIndex","endIndexPoints","influencedPoints","mixVector","curvatureInfluence","infPoint","pushVector","concat","fixed","numInsertPoints","nx","ny","canRemovePoint","newPoints","oxpoints","startLength","oxbowArr","oxacc","oxbow","ptacc","cp","nop","meanderWrapped","meanderLinear","adjustPointsSpacing","checkForOxbows","shrinkOxbows","addToHistory","flowRight","flowRightToMiddle","createHorizontalPath","incr","midx","midDist","createVerticalPath","midy","meanderingRiver02","rivers","horizontal","vertical","cs","r0","riverColor","closed","step","meanderingRiver01","riverWeight","oxbowColor","tintingColor","flatColor","horizpoints","circlepoints","oColor","o","oSize","variationsIndex","note","experimentalVariation","saveCanvasCapture","imageURI","toDataURL","setAttribute","href","click","setNote","innerText","getQueryVariable","variable","query","vars","location","search","substring","split","pair","variationKey","variationKeys","vToRun"],"mappings":";;;;AA2qCA,IAAA,GAvqCA,SAAA,GAEA,IAAA,EAAA,OACA,EAAA,OACA,EAAA,EACA,EAAA,EAAA,MACA,EAAA,EAAA,IACA,EAAA,EAAA,IACA,EAAA,EAAA,OAEA,SAAA,EAAA,EAAA,GAMA,GAHA,EAAA,GAAA,IADA,EAAA,GAAA,cAIA,EACA,OAAA,EAGA,KAAA,gBAAA,GACA,OAAA,IAAA,EAAA,EAAA,GAGA,IAAA,EAoRA,SAAA,GAEA,IAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,EACA,EAAA,KACA,EAAA,KACA,EAAA,KACA,GAAA,EACA,GAAA,EAEA,iBAAA,IACA,EAywBA,SAAA,GAEA,EAAA,EAAA,QAAA,EAAA,IAAA,QAAA,EAAA,IAAA,cACA,IAaA,EAbA,GAAA,EACA,GAAA,EAAA,GACA,EAAA,EAAA,GACA,GAAA,OAEA,GAAA,eAAA,EACA,MAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,QAQA,GAAA,EAAA,EAAA,IAAA,KAAA,GACA,MAAA,CAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAEA,GAAA,EAAA,EAAA,KAAA,KAAA,GACA,MAAA,CAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAEA,GAAA,EAAA,EAAA,IAAA,KAAA,GACA,MAAA,CAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAEA,GAAA,EAAA,EAAA,KAAA,KAAA,GACA,MAAA,CAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAEA,GAAA,EAAA,EAAA,IAAA,KAAA,GACA,MAAA,CAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAEA,GAAA,EAAA,EAAA,KAAA,KAAA,GACA,MAAA,CAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IAEA,GAAA,EAAA,EAAA,KAAA,KAAA,GACA,MAAA,CACA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,IACA,OAAA,EAAA,OAAA,QAGA,GAAA,EAAA,EAAA,KAAA,KAAA,GACA,MAAA,CACA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,IACA,OAAA,EAAA,OAAA,OAGA,GAAA,EAAA,EAAA,KAAA,KAAA,GACA,MAAA,CACA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IACA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IACA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IACA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IACA,OAAA,EAAA,OAAA,QAGA,GAAA,EAAA,EAAA,KAAA,KAAA,GACA,MAAA,CACA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IACA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IACA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,IACA,OAAA,EAAA,OAAA,OAIA,OAAA,EA/0BA,CAAA,IAGA,iBAAA,IACA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAiDA,EAhDA,EAAA,EAgDA,EAhDA,EAAA,EAgDA,EAhDA,EAAA,EAAA,EAiDA,CACA,EAAA,IAAA,EAAA,EAAA,KACA,EAAA,IAAA,EAAA,EAAA,KACA,EAAA,IAAA,EAAA,EAAA,MAnDA,GAAA,EACA,EAAA,MAAA,OAAA,EAAA,GAAA,QAAA,GAAA,OAAA,OAEA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,GACA,EAoJA,SAAA,EAAA,EAAA,GAEA,EAAA,EAAA,EAAA,EAAA,KACA,EAAA,EAAA,EAAA,KACA,EAAA,EAAA,EAAA,KAEA,IAAA,EAAA,EAAA,MAAA,GACA,EAAA,EAAA,EACA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,EAAA,GACA,EAAA,GAAA,GAAA,EAAA,GAAA,GACA,EAAA,EAAA,EAKA,MAAA,CAAA,EAAA,IAJA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAIA,EAAA,IAHA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAGA,EAAA,IAFA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAlKA,CAAA,EAAA,EAAA,EAAA,GACA,GAAA,EACA,EAAA,OAEA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,KACA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,GACA,EA6EA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAMA,SAAA,EAAA,EAAA,EAAA,GAGA,OAFA,EAAA,IAAA,GAAA,GACA,EAAA,IAAA,GAAA,GACA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EACA,EAAA,GAAA,EACA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EACA,EAGA,GAbA,EAAA,EAAA,EAAA,KACA,EAAA,EAAA,EAAA,KACA,EAAA,EAAA,EAAA,KAWA,IAAA,EACA,EAAA,EAAA,EAAA,MAEA,CACA,IAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAGA,MAAA,CAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,GAxGA,CAAA,EAAA,EAAA,EAAA,GACA,GAAA,EACA,EAAA,OAGA,EAAA,eAAA,OACA,EAAA,EAAA,IA4BA,IAAA,EAAA,EAAA,EAtBA,OAFA,EAAA,EAAA,GAEA,CACA,GAAA,EACA,OAAA,EAAA,QAAA,EACA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IACA,EAAA,GApUA,CAAA,GACA,KAAA,eAAA,EACA,KAAA,GAAA,EAAA,EACA,KAAA,GAAA,EAAA,EACA,KAAA,GAAA,EAAA,EACA,KAAA,GAAA,EAAA,EACA,KAAA,QAAA,EAAA,IAAA,KAAA,IAAA,IACA,KAAA,QAAA,EAAA,QAAA,EAAA,OACA,KAAA,cAAA,EAAA,aAMA,KAAA,GAAA,IAAA,KAAA,GAAA,EAAA,KAAA,KACA,KAAA,GAAA,IAAA,KAAA,GAAA,EAAA,KAAA,KACA,KAAA,GAAA,IAAA,KAAA,GAAA,EAAA,KAAA,KAEA,KAAA,IAAA,EAAA,GACA,KAAA,OAAA,IA6UA,SAAA,EAAA,EAAA,EAAA,GAEA,EAAA,EAAA,EAAA,KACA,EAAA,EAAA,EAAA,KACA,EAAA,EAAA,EAAA,KAEA,IACA,EAAA,EADA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GACA,GAAA,EAAA,GAAA,EAEA,GAAA,GAAA,EACA,EAAA,EAAA,MAEA,CACA,IAAA,EAAA,EAAA,EAEA,OADA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,GACA,GACA,KAAA,EAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,GAAA,MACA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,MACA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAGA,GAAA,EAGA,MAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAyCA,SAAA,EAAA,EAAA,EAAA,GAEA,EAAA,EAAA,EAAA,KACA,EAAA,EAAA,EAAA,KACA,EAAA,EAAA,EAAA,KAEA,IACA,EAAA,EADA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,EAEA,EAAA,EAAA,EAGA,GAFA,EAAA,IAAA,EAAA,EAAA,EAAA,EAEA,GAAA,EACA,EAAA,MAEA,CACA,OAAA,GACA,KAAA,EAAA,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,EAAA,GAAA,MACA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,MACA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAEA,GAAA,EAEA,MAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GA8BA,SAAA,EAAA,EAAA,EAAA,EAAA,GAEA,IAAA,EAAA,CACA,EAAA,EAAA,GAAA,SAAA,KACA,EAAA,EAAA,GAAA,SAAA,KACA,EAAA,EAAA,GAAA,SAAA,MAIA,OAAA,GAAA,EAAA,GAAA,OAAA,IAAA,EAAA,GAAA,OAAA,IAAA,EAAA,GAAA,OAAA,IAAA,EAAA,GAAA,OAAA,IAAA,EAAA,GAAA,OAAA,IAAA,EAAA,GAAA,OAAA,GACA,EAAA,GAAA,OAAA,GAAA,EAAA,GAAA,OAAA,GAAA,EAAA,GAAA,OAAA,GAGA,EAAA,KAAA,IA2BA,SAAA,EAAA,EAAA,EAAA,EAAA,GASA,MAPA,CACA,EAAA,EAAA,IACA,EAAA,EAAA,GAAA,SAAA,KACA,EAAA,EAAA,GAAA,SAAA,KACA,EAAA,EAAA,GAAA,SAAA,MAGA,KAAA,IAwBA,SAAA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,GAAA,GACA,IAAA,EAAA,EAAA,GAAA,QAGA,OAFA,EAAA,GAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,GAGA,SAAA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,GAAA,GACA,IAAA,EAAA,EAAA,GAAA,QAGA,OAFA,EAAA,GAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,GAGA,SAAA,EAAA,GACA,OAAA,EAAA,GAAA,WAAA,KAGA,SAAA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,GAAA,GACA,IAAA,EAAA,EAAA,GAAA,QAGA,OAFA,EAAA,GAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,GAGA,SAAA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,GAAA,GACA,IAAA,EAAA,EAAA,GAAA,QAIA,OAHA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,IAAA,OACA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,IAAA,OACA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,IAAA,OACA,EAAA,GAGA,SAAA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,GAAA,GACA,IAAA,EAAA,EAAA,GAAA,QAGA,OAFA,EAAA,GAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,GAKA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,QACA,GAAA,EAAA,EAAA,GAAA,IAEA,OADA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EACA,EAAA,GAQA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,QAEA,OADA,EAAA,GAAA,EAAA,EAAA,KAAA,IACA,EAAA,GAGA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,QACA,EAAA,EAAA,EACA,MAAA,CACA,EAAA,GACA,EAAA,CAAA,GAAA,EAAA,KAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,CAAA,GAAA,EAAA,KAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAIA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,QACA,EAAA,EAAA,EACA,MAAA,CACA,EAAA,GACA,EAAA,CAAA,GAAA,EAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,CAAA,GAAA,EAAA,KAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,CAAA,GAAA,EAAA,KAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAIA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,GAAA,QACA,EAAA,EAAA,EACA,MAAA,CACA,EAAA,GACA,EAAA,CAAA,GAAA,EAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,CAAA,GAAA,EAAA,KAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAIA,SAAA,EAAA,EAAA,EAAA,GACA,EAAA,GAAA,EACA,EAAA,GAAA,GAEA,IAAA,EAAA,EAAA,GAAA,QACA,EAAA,IAAA,EACA,EAAA,CAAA,EAAA,IAEA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GAAA,KAAA,MAAA,GACA,EAAA,GAAA,EAAA,EAAA,GAAA,IACA,EAAA,KAAA,EAAA,IAEA,OAAA,EAGA,SAAA,EAAA,EAAA,GACA,EAAA,GAAA,EAMA,IALA,IAAA,EAAA,EAAA,GAAA,QACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,GACA,EAAA,EAAA,EAEA,KACA,EAAA,KAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KACA,GAAA,EAAA,GAAA,EAGA,OAAA,EApoBA,EAAA,UAAA,CACA,OAAA,WACA,OAAA,KAAA,gBAAA,KAEA,QAAA,WACA,OAAA,KAAA,UAEA,QAAA,WACA,OAAA,KAAA,KAEA,iBAAA,WACA,OAAA,KAAA,gBAEA,UAAA,WACA,OAAA,KAAA,SAEA,SAAA,WACA,OAAA,KAAA,IAEA,cAAA,WAEA,IAAA,EAAA,KAAA,QACA,OAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,GAAA,KAEA,aAAA,WAEA,IACA,EAAA,EAAA,EADA,EAAA,KAAA,QASA,OAPA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,IAKA,OAHA,GAAA,OAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,MAAA,MAGA,OAFA,GAAA,OAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,MAAA,MAEA,OADA,GAAA,OAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,MAAA,OAGA,SAAA,SAAA,GAGA,OAFA,KAAA,GAAA,EAAA,GACA,KAAA,QAAA,EAAA,IAAA,KAAA,IAAA,IACA,MAEA,MAAA,WACA,IAAA,EAAA,EAAA,KAAA,GAAA,KAAA,GAAA,KAAA,IACA,MAAA,CAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAAA,KAEA,YAAA,WACA,IAAA,EAAA,EAAA,KAAA,GAAA,KAAA,GAAA,KAAA,IACA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GACA,OAAA,GAAA,KAAA,GACA,OAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KACA,QAAA,EAAA,KAAA,EAAA,MAAA,EAAA,MAAA,KAAA,QAAA,KAEA,MAAA,WACA,IAAA,EAAA,EAAA,KAAA,GAAA,KAAA,GAAA,KAAA,IACA,MAAA,CAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAAA,KAEA,YAAA,WACA,IAAA,EAAA,EAAA,KAAA,GAAA,KAAA,GAAA,KAAA,IACA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GACA,OAAA,GAAA,KAAA,GACA,OAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KACA,QAAA,EAAA,KAAA,EAAA,MAAA,EAAA,MAAA,KAAA,QAAA,KAEA,MAAA,SAAA,GACA,OAAA,EAAA,KAAA,GAAA,KAAA,GAAA,KAAA,GAAA,IAEA,YAAA,SAAA,GACA,MAAA,IAAA,KAAA,MAAA,IAEA,OAAA,SAAA,GACA,OA6YA,SAAA,EAAA,EAAA,EAAA,EAAA,GAEA,IAAA,EAAA,CACA,EAAA,EAAA,GAAA,SAAA,KACA,EAAA,EAAA,GAAA,SAAA,KACA,EAAA,EAAA,GAAA,SAAA,KACA,EAAA,EAAA,KAIA,GAAA,GAAA,EAAA,GAAA,OAAA,IAAA,EAAA,GAAA,OAAA,IAAA,EAAA,GAAA,OAAA,IAAA,EAAA,GAAA,OAAA,IAAA,EAAA,GAAA,OAAA,IAAA,EAAA,GAAA,OAAA,IAAA,EAAA,GAAA,OAAA,IAAA,EAAA,GAAA,OAAA,GACA,OAAA,EAAA,GAAA,OAAA,GAAA,EAAA,GAAA,OAAA,GAAA,EAAA,GAAA,OAAA,GAAA,EAAA,GAAA,OAAA,GAGA,OAAA,EAAA,KAAA,IA3ZA,CAAA,KAAA,GAAA,KAAA,GAAA,KAAA,GAAA,KAAA,GAAA,IAEA,aAAA,SAAA,GACA,MAAA,IAAA,KAAA,OAAA,IAEA,MAAA,WACA,MAAA,CAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,KAAA,IAAA,EAAA,EAAA,KAAA,IAAA,EAAA,KAAA,KAEA,YAAA,WACA,OAAA,GAAA,KAAA,GACA,OAAA,EAAA,KAAA,IAAA,KAAA,EAAA,KAAA,IAAA,KAAA,EAAA,KAAA,IAAA,IACA,QAAA,EAAA,KAAA,IAAA,KAAA,EAAA,KAAA,IAAA,KAAA,EAAA,KAAA,IAAA,KAAA,KAAA,QAAA,KAEA,gBAAA,WACA,MAAA,CAAA,EAAA,EAAA,IAAA,EAAA,KAAA,GAAA,MAAA,IAAA,EAAA,EAAA,IAAA,EAAA,KAAA,GAAA,MAAA,IAAA,EAAA,EAAA,IAAA,EAAA,KAAA,GAAA,MAAA,IAAA,EAAA,KAAA,KAEA,sBAAA,WACA,OAAA,GAAA,KAAA,GACA,OAAA,EAAA,IAAA,EAAA,KAAA,GAAA,MAAA,MAAA,EAAA,IAAA,EAAA,KAAA,GAAA,MAAA,MAAA,EAAA,IAAA,EAAA,KAAA,GAAA,MAAA,KACA,QAAA,EAAA,IAAA,EAAA,KAAA,GAAA,MAAA,MAAA,EAAA,IAAA,EAAA,KAAA,GAAA,MAAA,MAAA,EAAA,IAAA,EAAA,KAAA,GAAA,MAAA,MAAA,KAAA,QAAA,KAEA,OAAA,WACA,OAAA,IAAA,KAAA,GACA,gBAGA,KAAA,GAAA,KAIA,EAAA,EAAA,KAAA,GAAA,KAAA,GAAA,KAAA,IAAA,MAAA,IAEA,SAAA,SAAA,GACA,IAAA,EAAA,IAAA,EAAA,KAAA,GAAA,KAAA,GAAA,KAAA,GAAA,KAAA,IACA,EAAA,EACA,EAAA,KAAA,cAAA,qBAAA,GAEA,GAAA,EAAA,CACA,IAAA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAGA,MAAA,8CAAA,EAAA,iBAAA,EAAA,gBAAA,EAAA,KAEA,SAAA,SAAA,GACA,IAAA,IAAA,EACA,EAAA,GAAA,KAAA,QAEA,IAAA,GAAA,EACA,EAAA,KAAA,GAAA,GAAA,KAAA,IAAA,EAGA,OAFA,IAAA,GAAA,QAAA,GAAA,SAAA,GAAA,SAAA,GAAA,SAAA,GAAA,SAAA,GAAA,SAAA,GAUA,QAAA,IACA,EAAA,KAAA,eAEA,SAAA,IACA,EAAA,KAAA,yBAEA,QAAA,GAAA,SAAA,IACA,EAAA,KAAA,eAEA,SAAA,IACA,EAAA,KAAA,aAAA,IAEA,SAAA,IACA,EAAA,KAAA,cAAA,IAEA,SAAA,IACA,EAAA,KAAA,gBAEA,SAAA,IACA,EAAA,KAAA,UAEA,QAAA,IACA,EAAA,KAAA,eAEA,QAAA,IACA,EAAA,KAAA,eAGA,GAAA,KAAA,eAjCA,SAAA,GAAA,IAAA,KAAA,GACA,KAAA,SAEA,KAAA,eAgCA,MAAA,WACA,OAAA,EAAA,KAAA,aAGA,mBAAA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,MAAA,KAAA,CAAA,MAAA,OAAA,GAAA,MAAA,KAAA,KAKA,OAJA,KAAA,GAAA,EAAA,GACA,KAAA,GAAA,EAAA,GACA,KAAA,GAAA,EAAA,GACA,KAAA,SAAA,EAAA,IACA,MAEA,QAAA,WACA,OAAA,KAAA,mBAAA,EAAA,YAEA,SAAA,WACA,OAAA,KAAA,mBAAA,EAAA,YAEA,OAAA,WACA,OAAA,KAAA,mBAAA,EAAA,YAEA,WAAA,WACA,OAAA,KAAA,mBAAA,EAAA,YAEA,SAAA,WACA,OAAA,KAAA,mBAAA,EAAA,YAEA,UAAA,WACA,OAAA,KAAA,mBAAA,EAAA,YAEA,KAAA,WACA,OAAA,KAAA,mBAAA,EAAA,YAGA,kBAAA,SAAA,EAAA,GACA,OAAA,EAAA,MAAA,KAAA,CAAA,MAAA,OAAA,GAAA,MAAA,KAAA,MAEA,UAAA,WACA,OAAA,KAAA,kBAAA,EAAA,YAEA,WAAA,WACA,OAAA,KAAA,kBAAA,EAAA,YAEA,cAAA,WACA,OAAA,KAAA,kBAAA,EAAA,YAEA,gBAAA,WACA,OAAA,KAAA,kBAAA,EAAA,YAEA,MAAA,WACA,OAAA,KAAA,kBAAA,EAAA,YAEA,OAAA,WACA,OAAA,KAAA,kBAAA,EAAA,aAMA,EAAA,UAAA,SAAA,EAAA,GACA,GAAA,iBAAA,EAAA,CACA,IAAA,EAAA,GACA,IAAA,IAAA,KAAA,EACA,EAAA,eAAA,KAEA,EAAA,GADA,MAAA,EACA,EAAA,GAGA,EAAA,EAAA,KAIA,EAAA,EAGA,OAAA,EAAA,EAAA,IA0QA,EAAA,OAAA,SAAA,EAAA,GACA,SAAA,IAAA,IACA,EAAA,GAAA,eAAA,EAAA,GAAA,eAGA,EAAA,OAAA,WACA,OAAA,EAAA,UAAA,CACA,EAAA,IACA,EAAA,IACA,EAAA,OA2IA,EAAA,IAAA,SAAA,EAAA,EAAA,GACA,EAAA,IAAA,EAAA,EAAA,GAAA,GAEA,IAAA,EAAA,EAAA,GAAA,QACA,EAAA,EAAA,GAAA,QAEA,EAAA,EAAA,IASA,OAAA,EAPA,CACA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EACA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EACA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EACA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,KAaA,EAAA,YAAA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,OAAA,EAAA,IAAA,EAAA,eAAA,EAAA,gBAAA,MAAA,EAAA,IAAA,EAAA,eAAA,EAAA,gBAAA,MAaA,EAAA,WAAA,SAAA,EAAA,EAAA,GACA,IACA,EAAA,EADA,EAAA,EAAA,YAAA,EAAA,GAMA,OAHA,GAAA,GAEA,EAkaA,SAAA,GAGA,IAAA,EAAA,EAEA,IADA,EAAA,GAAA,CAAA,MAAA,KAAA,KAAA,UACA,OAAA,MAAA,cACA,GAAA,EAAA,MAAA,SAAA,cACA,OAAA,GAAA,QAAA,IACA,EAAA,MAEA,UAAA,GAAA,UAAA,IACA,EAAA,SAEA,MAAA,CAAA,MAAA,EAAA,KAAA,GA/aA,CAAA,IACA,MAAA,EAAA,MACA,IAAA,UACA,IAAA,WACA,EAAA,GAAA,IACA,MACA,IAAA,UACA,EAAA,GAAA,EACA,MACA,IAAA,WACA,EAAA,GAAA,EAGA,OAAA,GAaA,EAAA,aAAA,SAAA,EAAA,EAAA,GACA,IAEA,EACA,EAAA,EAAA,EAHA,EAAA,KACA,EAAA,EAIA,GADA,EAAA,GAAA,IACA,sBACA,EAAA,EAAA,MACA,EAAA,EAAA,KAEA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,KACA,EAAA,EAAA,YAAA,EAAA,EAAA,KACA,IACA,EAAA,EACA,EAAA,EAAA,EAAA,KAIA,OAAA,EAAA,WAAA,EAAA,EAAA,CAAA,MAAA,EAAA,KAAA,MAAA,EACA,GAGA,EAAA,uBAAA,EACA,EAAA,aAAA,EAAA,CAAA,OAAA,QAAA,KAQA,IAAA,EAAA,EAAA,MAAA,CACA,UAAA,SACA,aAAA,SACA,KAAA,MACA,WAAA,SACA,MAAA,SACA,MAAA,SACA,OAAA,SACA,MAAA,MACA,eAAA,SACA,KAAA,MACA,WAAA,SACA,MAAA,SACA,UAAA,SACA,YAAA,SACA,UAAA,SACA,WAAA,SACA,UAAA,SACA,MAAA,SACA,eAAA,SACA,SAAA,SACA,QAAA,SACA,KAAA,MACA,SAAA,SACA,SAAA,SACA,cAAA,SACA,SAAA,SACA,UAAA,SACA,SAAA,SACA,UAAA,SACA,YAAA,SACA,eAAA,SACA,WAAA,SACA,WAAA,SACA,QAAA,SACA,WAAA,SACA,aAAA,SACA,cAAA,SACA,cAAA,SACA,cAAA,SACA,cAAA,SACA,WAAA,SACA,SAAA,SACA,YAAA,SACA,QAAA,SACA,QAAA,SACA,WAAA,SACA,UAAA,SACA,YAAA,SACA,YAAA,SACA,QAAA,MACA,UAAA,SACA,WAAA,SACA,KAAA,SACA,UAAA,SACA,KAAA,SACA,MAAA,SACA,YAAA,SACA,KAAA,SACA,SAAA,SACA,QAAA,SACA,UAAA,SACA,OAAA,SACA,MAAA,SACA,MAAA,SACA,SAAA,SACA,cAAA,SACA,UAAA,SACA,aAAA,SACA,UAAA,SACA,WAAA,SACA,UAAA,SACA,qBAAA,SACA,UAAA,SACA,WAAA,SACA,UAAA,SACA,UAAA,SACA,YAAA,SACA,cAAA,SACA,aAAA,SACA,eAAA,MACA,eAAA,MACA,eAAA,SACA,YAAA,SACA,KAAA,MACA,UAAA,SACA,MAAA,SACA,QAAA,MACA,OAAA,SACA,iBAAA,SACA,WAAA,SACA,aAAA,SACA,aAAA,SACA,eAAA,SACA,gBAAA,SACA,kBAAA,SACA,gBAAA,SACA,gBAAA,SACA,aAAA,SACA,UAAA,SACA,UAAA,SACA,SAAA,SACA,YAAA,SACA,KAAA,SACA,QAAA,SACA,MAAA,SACA,UAAA,SACA,OAAA,SACA,UAAA,SACA,OAAA,SACA,cAAA,SACA,UAAA,SACA,cAAA,SACA,cAAA,SACA,WAAA,SACA,UAAA,SACA,KAAA,SACA,KAAA,SACA,KAAA,SACA,WAAA,SACA,OAAA,SACA,cAAA,SACA,IAAA,MACA,UAAA,SACA,UAAA,SACA,YAAA,SACA,OAAA,SACA,WAAA,SACA,SAAA,SACA,SAAA,SACA,OAAA,SACA,OAAA,SACA,QAAA,SACA,UAAA,SACA,UAAA,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","file":"scripts.475b0f2c.js","sourceRoot":"..","sourcesContent":["// TinyColor v1.4.2\n// https://github.com/bgrins/TinyColor\n// Brian Grinstead, MIT License\n\n(function(Math) {\n\nvar trimLeft = /^\\s+/,\n    trimRight = /\\s+$/,\n    tinyCounter = 0,\n    mathRound = Math.round,\n    mathMin = Math.min,\n    mathMax = Math.max,\n    mathRandom = Math.random;\n\nfunction tinycolor (color, opts) {\n\n    color = (color) ? color : '';\n    opts = opts || { };\n\n    // If input is already a tinycolor, return itself\n    if (color instanceof tinycolor) {\n       return color;\n    }\n    // If we are called as a function, call using new instead\n    if (!(this instanceof tinycolor)) {\n        return new tinycolor(color, opts);\n    }\n\n    var rgb = inputToRGB(color);\n    this._originalInput = color,\n    this._r = rgb.r,\n    this._g = rgb.g,\n    this._b = rgb.b,\n    this._a = rgb.a,\n    this._roundA = mathRound(100*this._a) / 100,\n    this._format = opts.format || rgb.format;\n    this._gradientType = opts.gradientType;\n\n    // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n    if (this._r < 1) { this._r = mathRound(this._r); }\n    if (this._g < 1) { this._g = mathRound(this._g); }\n    if (this._b < 1) { this._b = mathRound(this._b); }\n\n    this._ok = rgb.ok;\n    this._tc_id = tinyCounter++;\n}\n\ntinycolor.prototype = {\n    isDark: function() {\n        return this.getBrightness() < 128;\n    },\n    isLight: function() {\n        return !this.isDark();\n    },\n    isValid: function() {\n        return this._ok;\n    },\n    getOriginalInput: function() {\n      return this._originalInput;\n    },\n    getFormat: function() {\n        return this._format;\n    },\n    getAlpha: function() {\n        return this._a;\n    },\n    getBrightness: function() {\n        //http://www.w3.org/TR/AERT#color-contrast\n        var rgb = this.toRgb();\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    getLuminance: function() {\n        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        var rgb = this.toRgb();\n        var RsRGB, GsRGB, BsRGB, R, G, B;\n        RsRGB = rgb.r/255;\n        GsRGB = rgb.g/255;\n        BsRGB = rgb.b/255;\n\n        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}\n        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}\n        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}\n        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);\n    },\n    setAlpha: function(value) {\n        this._a = boundAlpha(value);\n        this._roundA = mathRound(100*this._a) / 100;\n        return this;\n    },\n    toHsv: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\n    },\n    toHsvString: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\n        return (this._a == 1) ?\n          \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\n          \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\n    },\n    toHsl: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\n    },\n    toHslString: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\n        return (this._a == 1) ?\n          \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\n          \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\n    },\n    toHex: function(allow3Char) {\n        return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function(allow3Char) {\n        return '#' + this.toHex(allow3Char);\n    },\n    toHex8: function(allow4Char) {\n        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n    },\n    toHex8String: function(allow4Char) {\n        return '#' + this.toHex8(allow4Char);\n    },\n    toRgb: function() {\n        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\n    },\n    toRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\n          \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\n    },\n    toPercentageRgb: function() {\n        return { r: mathRound(bound01(this._r, 255) * 100) + \"%\", g: mathRound(bound01(this._g, 255) * 100) + \"%\", b: mathRound(bound01(this._b, 255) * 100) + \"%\", a: this._a };\n    },\n    toPercentageRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" :\n          \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n    },\n    toName: function() {\n        if (this._a === 0) {\n            return \"transparent\";\n        }\n\n        if (this._a < 1) {\n            return false;\n        }\n\n        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function(secondColor) {\n        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n        var secondHex8String = hex8String;\n        var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n\n        if (secondColor) {\n            var s = tinycolor(secondColor);\n            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n        }\n\n        return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\n    },\n    toString: function(format) {\n        var formatSet = !!format;\n        format = format || this._format;\n\n        var formattedString = false;\n        var hasAlpha = this._a < 1 && this._a >= 0;\n        var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n\n        if (needsAlphaFormat) {\n            // Special case for \"transparent\", all other non-alpha formats\n            // will return rgba when there is transparency.\n            if (format === \"name\" && this._a === 0) {\n                return this.toName();\n            }\n            return this.toRgbString();\n        }\n        if (format === \"rgb\") {\n            formattedString = this.toRgbString();\n        }\n        if (format === \"prgb\") {\n            formattedString = this.toPercentageRgbString();\n        }\n        if (format === \"hex\" || format === \"hex6\") {\n            formattedString = this.toHexString();\n        }\n        if (format === \"hex3\") {\n            formattedString = this.toHexString(true);\n        }\n        if (format === \"hex4\") {\n            formattedString = this.toHex8String(true);\n        }\n        if (format === \"hex8\") {\n            formattedString = this.toHex8String();\n        }\n        if (format === \"name\") {\n            formattedString = this.toName();\n        }\n        if (format === \"hsl\") {\n            formattedString = this.toHslString();\n        }\n        if (format === \"hsv\") {\n            formattedString = this.toHsvString();\n        }\n\n        return formattedString || this.toHexString();\n    },\n    clone: function() {\n        return tinycolor(this.toString());\n    },\n\n    _applyModification: function(fn, args) {\n        var color = fn.apply(null, [this].concat([].slice.call(args)));\n        this._r = color._r;\n        this._g = color._g;\n        this._b = color._b;\n        this.setAlpha(color._a);\n        return this;\n    },\n    lighten: function() {\n        return this._applyModification(lighten, arguments);\n    },\n    brighten: function() {\n        return this._applyModification(brighten, arguments);\n    },\n    darken: function() {\n        return this._applyModification(darken, arguments);\n    },\n    desaturate: function() {\n        return this._applyModification(desaturate, arguments);\n    },\n    saturate: function() {\n        return this._applyModification(saturate, arguments);\n    },\n    greyscale: function() {\n        return this._applyModification(greyscale, arguments);\n    },\n    spin: function() {\n        return this._applyModification(spin, arguments);\n    },\n\n    _applyCombination: function(fn, args) {\n        return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function() {\n        return this._applyCombination(analogous, arguments);\n    },\n    complement: function() {\n        return this._applyCombination(complement, arguments);\n    },\n    monochromatic: function() {\n        return this._applyCombination(monochromatic, arguments);\n    },\n    splitcomplement: function() {\n        return this._applyCombination(splitcomplement, arguments);\n    },\n    triad: function() {\n        return this._applyCombination(triad, arguments);\n    },\n    tetrad: function() {\n        return this._applyCombination(tetrad, arguments);\n    }\n};\n\n// If input is an object, force 1 into \"1.0\" to handle ratios properly\n// String input requires \"1.0\" as input, so 1 will be treated as 1\ntinycolor.fromRatio = function(color, opts) {\n    if (typeof color == \"object\") {\n        var newColor = {};\n        for (var i in color) {\n            if (color.hasOwnProperty(i)) {\n                if (i === \"a\") {\n                    newColor[i] = color[i];\n                }\n                else {\n                    newColor[i] = convertToPercentage(color[i]);\n                }\n            }\n        }\n        color = newColor;\n    }\n\n    return tinycolor(color, opts);\n};\n\n// Given a string or object, convert that input to RGB\n// Possible string inputs:\n//\n//     \"red\"\n//     \"#f00\" or \"f00\"\n//     \"#ff0000\" or \"ff0000\"\n//     \"#ff000000\" or \"ff000000\"\n//     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n//     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n//     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n//     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n//     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n//     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n//     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n//\nfunction inputToRGB(color) {\n\n    var rgb = { r: 0, g: 0, b: 0 };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n\n    if (typeof color == \"string\") {\n        color = stringInputToObject(color);\n    }\n\n    if (typeof color == \"object\") {\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n            rgb = rgbToRgb(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n            s = convertToPercentage(color.s);\n            v = convertToPercentage(color.v);\n            rgb = hsvToRgb(color.h, s, v);\n            ok = true;\n            format = \"hsv\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n            s = convertToPercentage(color.s);\n            l = convertToPercentage(color.l);\n            rgb = hslToRgb(color.h, s, l);\n            ok = true;\n            format = \"hsl\";\n        }\n\n        if (color.hasOwnProperty(\"a\")) {\n            a = color.a;\n        }\n    }\n\n    a = boundAlpha(a);\n\n    return {\n        ok: ok,\n        format: color.format || format,\n        r: mathMin(255, mathMax(rgb.r, 0)),\n        g: mathMin(255, mathMax(rgb.g, 0)),\n        b: mathMin(255, mathMax(rgb.b, 0)),\n        a: a\n    };\n}\n\n\n// Conversion Functions\n// --------------------\n\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n// `rgbToRgb`\n// Handle bounds / percentage checking to conform to CSS color spec\n// <http://www.w3.org/TR/css3-color/>\n// *Assumes:* r, g, b in [0, 255] or [0, 1]\n// *Returns:* { r, g, b } in [0, 255]\nfunction rgbToRgb(r, g, b){\n    return {\n        r: bound01(r, 255) * 255,\n        g: bound01(g, 255) * 255,\n        b: bound01(b, 255) * 255\n    };\n}\n\n// `rgbToHsl`\n// Converts an RGB color value to HSL.\n// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n// *Returns:* { h, s, l } in [0,1]\nfunction rgbToHsl(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, l = (max + min) / 2;\n\n    if(max == min) {\n        h = s = 0; // achromatic\n    }\n    else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n\n        h /= 6;\n    }\n\n    return { h: h, s: s, l: l };\n}\n\n// `hslToRgb`\n// Converts an HSL color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nfunction hslToRgb(h, s, l) {\n    var r, g, b;\n\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n\n    function hue2rgb(p, q, t) {\n        if(t < 0) t += 1;\n        if(t > 1) t -= 1;\n        if(t < 1/6) return p + (q - p) * 6 * t;\n        if(t < 1/2) return q;\n        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n        return p;\n    }\n\n    if(s === 0) {\n        r = g = b = l; // achromatic\n    }\n    else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1/3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1/3);\n    }\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHsv`\n// Converts an RGB color value to HSV\n// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n// *Returns:* { h, s, v } in [0,1]\nfunction rgbToHsv(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, v = max;\n\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n\n    if(max == min) {\n        h = 0; // achromatic\n    }\n    else {\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, v: v };\n}\n\n// `hsvToRgb`\n// Converts an HSV color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\n function hsvToRgb(h, s, v) {\n\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n\n    var i = Math.floor(h),\n        f = h - i,\n        p = v * (1 - s),\n        q = v * (1 - f * s),\n        t = v * (1 - (1 - f) * s),\n        mod = i % 6,\n        r = [v, q, p, p, t, v][mod],\n        g = [t, v, v, q, p, p][mod],\n        b = [p, p, t, v, v, q][mod];\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHex`\n// Converts an RGB color to hex\n// Assumes r, g, and b are contained in the set [0, 255]\n// Returns a 3 or 6 character hex\nfunction rgbToHex(r, g, b, allow3Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    // Return a 3 character hex if possible\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToHex`\n// Converts an RGBA color plus alpha transparency to hex\n// Assumes r, g, b are contained in the set [0, 255] and\n// a in [0, 1]. Returns a 4 or 8 character rgba hex\nfunction rgbaToHex(r, g, b, a, allow4Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16)),\n        pad2(convertDecimalToHex(a))\n    ];\n\n    // Return a 4 character hex if possible\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToArgbHex`\n// Converts an RGBA color to an ARGB Hex8 string\n// Rarely used, but required for \"toFilter()\"\nfunction rgbaToArgbHex(r, g, b, a) {\n\n    var hex = [\n        pad2(convertDecimalToHex(a)),\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    return hex.join(\"\");\n}\n\n// `equals`\n// Can be called with any tinycolor input\ntinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) { return false; }\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n};\n\ntinycolor.random = function() {\n    return tinycolor.fromRatio({\n        r: mathRandom(),\n        g: mathRandom(),\n        b: mathRandom()\n    });\n};\n\n\n// Modification Functions\n// ----------------------\n// Thanks to less.js for some of the basics here\n// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\nfunction desaturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction saturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction greyscale(color) {\n    return tinycolor(color).desaturate(100);\n}\n\nfunction lighten (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\nfunction brighten(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\n    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\n    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\n    return tinycolor(rgb);\n}\n\nfunction darken (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\n// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n// Values outside of this range will be wrapped into this range.\nfunction spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n}\n\n// Combination Functions\n// ---------------------\n// Thanks to jQuery xColor for some of the ideas behind these\n// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\nfunction complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n}\n\nfunction triad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction tetrad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\n        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\n    ];\n}\n\nfunction analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n\n    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\n        hsl.h = (hsl.h + part) % 360;\n        ret.push(tinycolor(hsl));\n    }\n    return ret;\n}\n\nfunction monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h, s = hsv.s, v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n\n    while (results--) {\n        ret.push(tinycolor({ h: h, s: s, v: v}));\n        v = (v + modification) % 1;\n    }\n\n    return ret;\n}\n\n// Utility Functions\n// ---------------------\n\ntinycolor.mix = function(color1, color2, amount) {\n    amount = (amount === 0) ? 0 : (amount || 50);\n\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n\n    var p = amount / 100;\n\n    var rgba = {\n        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,\n        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,\n        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,\n        a: ((rgb2.a - rgb1.a) * p) + rgb1.a\n    };\n\n    return tinycolor(rgba);\n};\n\n\n// Readability Functions\n// ---------------------\n// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\n// `contrast`\n// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\ntinycolor.readability = function(color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);\n};\n\n// `isReadable`\n// Ensure that foreground and background color combinations meet WCAG2 guidelines.\n// The third argument is an optional Object.\n//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n// If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\n// *Example*\n//    tinycolor.isReadable(\"#000\", \"#111\") => false\n//    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\ntinycolor.isReadable = function(color1, color2, wcag2) {\n    var readability = tinycolor.readability(color1, color2);\n    var wcag2Parms, out;\n\n    out = false;\n\n    wcag2Parms = validateWCAG2Parms(wcag2);\n    switch (wcag2Parms.level + wcag2Parms.size) {\n        case \"AAsmall\":\n        case \"AAAlarge\":\n            out = readability >= 4.5;\n            break;\n        case \"AAlarge\":\n            out = readability >= 3;\n            break;\n        case \"AAAsmall\":\n            out = readability >= 7;\n            break;\n    }\n    return out;\n\n};\n\n// `mostReadable`\n// Given a base color and a list of possible foreground or background\n// colors for that base, returns the most readable color.\n// Optionally returns Black or White if the most readable color is unreadable.\n// *Example*\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\ntinycolor.mostReadable = function(baseColor, colorList, args) {\n    var bestColor = null;\n    var bestScore = 0;\n    var readability;\n    var includeFallbackColors, level, size ;\n    args = args || {};\n    includeFallbackColors = args.includeFallbackColors ;\n    level = args.level;\n    size = args.size;\n\n    for (var i= 0; i < colorList.length ; i++) {\n        readability = tinycolor.readability(baseColor, colorList[i]);\n        if (readability > bestScore) {\n            bestScore = readability;\n            bestColor = tinycolor(colorList[i]);\n        }\n    }\n\n    if (tinycolor.isReadable(baseColor, bestColor, {\"level\":level,\"size\":size}) || !includeFallbackColors) {\n        return bestColor;\n    }\n    else {\n        args.includeFallbackColors=false;\n        return tinycolor.mostReadable(baseColor,[\"#fff\", \"#000\"],args);\n    }\n};\n\n\n// Big List of Colors\n// ------------------\n// <http://www.w3.org/TR/css3-color/#svg-color>\nvar names = tinycolor.names = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    burntsienna: \"ea7e5d\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    grey: \"808080\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    rebeccapurple: \"663399\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\"\n};\n\n// Make it easy to access colors via `hexNames[hex]`\nvar hexNames = tinycolor.hexNames = flip(names);\n\n\n// Utilities\n// ---------\n\n// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\nfunction flip(o) {\n    var flipped = { };\n    for (var i in o) {\n        if (o.hasOwnProperty(i)) {\n            flipped[o[i]] = i;\n        }\n    }\n    return flipped;\n}\n\n// Return a valid alpha value [0,1] with all invalid values being set to 1\nfunction boundAlpha(a) {\n    a = parseFloat(a);\n\n    if (isNaN(a) || a < 0 || a > 1) {\n        a = 1;\n    }\n\n    return a;\n}\n\n// Take input from [0, n] and return it as [0, 1]\nfunction bound01(n, max) {\n    if (isOnePointZero(n)) { n = \"100%\"; }\n\n    var processPercent = isPercentage(n);\n    n = mathMin(max, mathMax(0, parseFloat(n)));\n\n    // Automatically convert percentage into number\n    if (processPercent) {\n        n = parseInt(n * max, 10) / 100;\n    }\n\n    // Handle floating point rounding errors\n    if ((Math.abs(n - max) < 0.000001)) {\n        return 1;\n    }\n\n    // Convert into [0, 1] range if it isn't already\n    return (n % max) / parseFloat(max);\n}\n\n// Force a number between 0 and 1\nfunction clamp01(val) {\n    return mathMin(1, mathMax(0, val));\n}\n\n// Parse a base-16 hex value into a base-10 integer\nfunction parseIntFromHex(val) {\n    return parseInt(val, 16);\n}\n\n// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\nfunction isOnePointZero(n) {\n    return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\n}\n\n// Check to see if string passed in is a percentage\nfunction isPercentage(n) {\n    return typeof n === \"string\" && n.indexOf('%') != -1;\n}\n\n// Force a hex value to have 2 characters\nfunction pad2(c) {\n    return c.length == 1 ? '0' + c : '' + c;\n}\n\n// Replace a decimal with it's percentage value\nfunction convertToPercentage(n) {\n    if (n <= 1) {\n        n = (n * 100) + \"%\";\n    }\n\n    return n;\n}\n\n// Converts a decimal to a hex value\nfunction convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n}\n// Converts a hex value to a decimal\nfunction convertHexToDecimal(h) {\n    return (parseIntFromHex(h) / 255);\n}\n\nvar matchers = (function() {\n\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n    // <http://www.w3.org/TR/css3-values/#number-value>\n    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n    // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n\n    return {\n        CSS_UNIT: new RegExp(CSS_UNIT),\n        rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n        rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n        hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n        hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n        hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n        hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n    };\n})();\n\n// `isValidCSSUnit`\n// Take in a single string / number and check to see if it looks like a CSS unit\n// (see `matchers` above for definition).\nfunction isValidCSSUnit(color) {\n    return !!matchers.CSS_UNIT.exec(color);\n}\n\n// `stringInputToObject`\n// Permissive string parsing.  Take in a number of formats, and output an object\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\nfunction stringInputToObject(color) {\n\n    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\n    var named = false;\n    if (names[color]) {\n        color = names[color];\n        named = true;\n    }\n    else if (color == 'transparent') {\n        return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\n    }\n\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match;\n    if ((match = matchers.rgb.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3] };\n    }\n    if ((match = matchers.rgba.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsl.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3] };\n    }\n    if ((match = matchers.hsla.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsv.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3] };\n    }\n    if ((match = matchers.hsva.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n    }\n    if ((match = matchers.hex8.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            a: convertHexToDecimal(match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex6.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n    if ((match = matchers.hex4.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            a: convertHexToDecimal(match[4] + '' + match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex3.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n\n    return false;\n}\n\nfunction validateWCAG2Parms(parms) {\n    // return valid WCAG2 parms for isReadable.\n    // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n    var level, size;\n    parms = parms || {\"level\":\"AA\", \"size\":\"small\"};\n    level = (parms.level || \"AA\").toUpperCase();\n    size = (parms.size || \"small\").toLowerCase();\n    if (level !== \"AA\" && level !== \"AAA\") {\n        level = \"AA\";\n    }\n    if (size !== \"small\" && size !== \"large\") {\n        size = \"small\";\n    }\n    return {\"level\":level, \"size\":size};\n}\n\n// Node: Export function\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = tinycolor;\n}\n// AMD/requirejs: Define the module\nelse if (typeof define === 'function' && define.amd) {\n    define(function () {return tinycolor;});\n}\n// Browser: Expose to window\nelse {\n    window.tinycolor = tinycolor;\n}\n\n})(Math);\n","'use strict';\r\n\r\nvar width = 256;// each RC4 output is 0 <= x < 256\r\nvar chunks = 6;// at least six RC4 outputs for each double\r\nvar digits = 52;// there are 52 significant digits in a double\r\nvar pool = [];// pool: entropy pool starts empty\r\nvar GLOBAL = typeof global === 'undefined' ? window : global;\r\n\r\n//\r\n// The following constants are related to IEEE 754 limits.\r\n//\r\nvar startdenom = Math.pow(width, chunks),\r\n    significance = Math.pow(2, digits),\r\n    overflow = significance * 2,\r\n    mask = width - 1;\r\n\r\n\r\nvar oldRandom = Math.random;\r\n\r\n//\r\n// seedrandom()\r\n// This is the seedrandom function described above.\r\n//\r\nmodule.exports = function(seed, options) {\r\n  if (options && options.global === true) {\r\n    options.global = false;\r\n    Math.random = module.exports(seed, options);\r\n    options.global = true;\r\n    return Math.random;\r\n  }\r\n  var use_entropy = (options && options.entropy) || false;\r\n  var key = [];\r\n\r\n  // Flatten the seed string or build one from local entropy if needed.\r\n  var shortseed = mixkey(flatten(\r\n    use_entropy ? [seed, tostring(pool)] :\r\n    0 in arguments ? seed : autoseed(), 3), key);\r\n\r\n  // Use the seed to initialize an ARC4 generator.\r\n  var arc4 = new ARC4(key);\r\n\r\n  // Mix the randomness into accumulated entropy.\r\n  mixkey(tostring(arc4.S), pool);\r\n\r\n  // Override Math.random\r\n\r\n  // This function returns a random double in [0, 1) that contains\r\n  // randomness in every bit of the mantissa of the IEEE 754 value.\r\n\r\n  return function() {         // Closure to return a random double:\r\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\r\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\r\n        x = 0;                          //   and no 'extra last byte'.\r\n    while (n < significance) {          // Fill up all significant digits by\r\n      n = (n + x) * width;              //   shifting numerator and\r\n      d *= width;                       //   denominator and generating a\r\n      x = arc4.g(1);                    //   new least-significant-byte.\r\n    }\r\n    while (n >= overflow) {             // To avoid rounding up, before adding\r\n      n /= 2;                           //   last byte, shift everything\r\n      d /= 2;                           //   right using integer Math until\r\n      x >>>= 1;                         //   we have exactly the desired bits.\r\n    }\r\n    return (n + x) / d;                 // Form the number within [0, 1).\r\n  };\r\n};\r\n\r\nmodule.exports.resetGlobal = function () {\r\n  Math.random = oldRandom;\r\n};\r\n\r\n//\r\n// ARC4\r\n//\r\n// An ARC4 implementation.  The constructor takes a key in the form of\r\n// an array of at most (width) integers that should be 0 <= x < (width).\r\n//\r\n// The g(count) method returns a pseudorandom integer that concatenates\r\n// the next (count) outputs from ARC4.  Its return value is a number x\r\n// that is in the range 0 <= x < (width ^ count).\r\n//\r\n/** @constructor */\r\nfunction ARC4(key) {\r\n  var t, keylen = key.length,\r\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\r\n\r\n  // The empty key [] is treated as [0].\r\n  if (!keylen) { key = [keylen++]; }\r\n\r\n  // Set up S using the standard key scheduling algorithm.\r\n  while (i < width) {\r\n    s[i] = i++;\r\n  }\r\n  for (i = 0; i < width; i++) {\r\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\r\n    s[j] = t;\r\n  }\r\n\r\n  // The \"g\" method returns the next (count) outputs as one number.\r\n  (me.g = function(count) {\r\n    // Using instance members instead of closure state nearly doubles speed.\r\n    var t, r = 0,\r\n        i = me.i, j = me.j, s = me.S;\r\n    while (count--) {\r\n      t = s[i = mask & (i + 1)];\r\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\r\n    }\r\n    me.i = i; me.j = j;\r\n    return r;\r\n    // For robust unpredictability discard an initial batch of values.\r\n    // See http://www.rsa.com/rsalabs/node.asp?id=2009\r\n  })(width);\r\n}\r\n\r\n//\r\n// flatten()\r\n// Converts an object tree to nested arrays of strings.\r\n//\r\nfunction flatten(obj, depth) {\r\n  var result = [], typ = (typeof obj)[0], prop;\r\n  if (depth && typ == 'o') {\r\n    for (prop in obj) {\r\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\r\n    }\r\n  }\r\n  return (result.length ? result : typ == 's' ? obj : obj + '\\0');\r\n}\r\n\r\n//\r\n// mixkey()\r\n// Mixes a string seed into a key that is an array of integers, and\r\n// returns a shortened string seed that is equivalent to the result key.\r\n//\r\nfunction mixkey(seed, key) {\r\n  var stringseed = seed + '', smear, j = 0;\r\n  while (j < stringseed.length) {\r\n    key[mask & j] =\r\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\r\n  }\r\n  return tostring(key);\r\n}\r\n\r\n//\r\n// autoseed()\r\n// Returns an object for autoseeding, using window.crypto if available.\r\n//\r\n/** @param {Uint8Array=} seed */\r\nfunction autoseed(seed) {\r\n  try {\r\n    GLOBAL.crypto.getRandomValues(seed = new Uint8Array(width));\r\n    return tostring(seed);\r\n  } catch (e) {\r\n    return [+new Date, GLOBAL, GLOBAL.navigator && GLOBAL.navigator.plugins,\r\n            GLOBAL.screen, tostring(pool)];\r\n  }\r\n}\r\n\r\n//\r\n// tostring()\r\n// Converts an array of charcodes to a string\r\n//\r\nfunction tostring(a) {\r\n  return String.fromCharCode.apply(0, a);\r\n}\r\n\r\n//\r\n// When seedrandom.js is loaded, we immediately mix a few bits\r\n// from the built-in RNG into the entropy pool.  Because we do\r\n// not want to intefere with determinstic PRNG state later,\r\n// seedrandom will not call Math.random on its own again after\r\n// initialization.\r\n//\r\nmixkey(Math.random(), pool);\r\n","/*\n * A fast javascript implementation of simplex noise by Jonas Wagner\n\nBased on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\nWhich is based on example code by Stefan Gustavson (stegu@itn.liu.se).\nWith Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\nBetter rank ordering method by Stefan Gustavson in 2012.\n\n\n Copyright (c) 2018 Jonas Wagner\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n(function() {\n  'use strict';\n\n  var F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\n  var G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\n  var F3 = 1.0 / 3.0;\n  var G3 = 1.0 / 6.0;\n  var F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n  var G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n\n  function SimplexNoise(randomOrSeed) {\n    var random;\n    if (typeof randomOrSeed == 'function') {\n      random = randomOrSeed;\n    }\n    else if (randomOrSeed) {\n      random = alea(randomOrSeed);\n    } else {\n      random = Math.random;\n    }\n    this.p = buildPermutationTable(random);\n    this.perm = new Uint8Array(512);\n    this.permMod12 = new Uint8Array(512);\n    for (var i = 0; i < 512; i++) {\n      this.perm[i] = this.p[i & 255];\n      this.permMod12[i] = this.perm[i] % 12;\n    }\n\n  }\n  SimplexNoise.prototype = {\n    grad3: new Float32Array([1, 1, 0,\n      -1, 1, 0,\n      1, -1, 0,\n\n      -1, -1, 0,\n      1, 0, 1,\n      -1, 0, 1,\n\n      1, 0, -1,\n      -1, 0, -1,\n      0, 1, 1,\n\n      0, -1, 1,\n      0, 1, -1,\n      0, -1, -1]),\n    grad4: new Float32Array([0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1,\n      0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1,\n      1, 0, 1, 1, 1, 0, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1,\n      -1, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, -1, 0, -1, -1,\n      1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1,\n      -1, 1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, -1,\n      1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0,\n      -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 0]),\n    noise2D: function(xin, yin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0 = 0; // Noise contributions from the three corners\n      var n1 = 0;\n      var n2 = 0;\n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin) * F2; // Hairy factor for 2D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var t = (i + j) * G2;\n      var X0 = i - t; // Unskew the cell origin back to (x,y) space\n      var Y0 = j - t;\n      var x0 = xin - X0; // The x,y distances from the cell origin\n      var y0 = yin - Y0;\n      // For the 2D case, the simplex shape is an equilateral triangle.\n      // Determine which simplex we are in.\n      var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n      if (x0 > y0) {\n        i1 = 1;\n        j1 = 0;\n      } // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      else {\n        i1 = 0;\n        j1 = 1;\n      } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n      // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n      // c = (3-sqrt(3))/6\n      var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n      var y1 = y0 - j1 + G2;\n      var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n      var y2 = y0 - 1.0 + 2.0 * G2;\n      // Work out the hashed gradient indices of the three simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      // Calculate the contribution from the three corners\n      var t0 = 0.5 - x0 * x0 - y0 * y0;\n      if (t0 >= 0) {\n        var gi0 = permMod12[ii + perm[jj]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient\n      }\n      var t1 = 0.5 - x1 * x1 - y1 * y1;\n      if (t1 >= 0) {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1);\n      }\n      var t2 = 0.5 - x2 * x2 - y2 * y2;\n      if (t2 >= 0) {\n        var gi2 = permMod12[ii + 1 + perm[jj + 1]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to return values in the interval [-1,1].\n      return 70.0 * (n0 + n1 + n2);\n    },\n    // 3D simplex noise\n    noise3D: function(xin, yin, zin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0, n1, n2, n3; // Noise contributions from the four corners\n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var k = Math.floor(zin + s);\n      var t = (i + j + k) * G3;\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var x0 = xin - X0; // The x,y,z distances from the cell origin\n      var y0 = yin - Y0;\n      var z0 = zin - Z0;\n      // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n      // Determine which simplex we are in.\n      var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n      var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n      if (x0 >= y0) {\n        if (y0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // X Y Z order\n        else if (x0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // X Z Y order\n        else {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // Z X Y order\n      }\n      else { // x0<y0\n        if (y0 < z0) {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Z Y X order\n        else if (x0 < z0) {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Y Z X order\n        else {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // Y X Z order\n      }\n      // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n      // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n      // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n      // c = 1/6.\n      var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n      var y1 = y0 - j1 + G3;\n      var z1 = z0 - k1 + G3;\n      var x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n      var y2 = y0 - j2 + 2.0 * G3;\n      var z2 = z0 - k2 + 2.0 * G3;\n      var x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n      var y3 = y0 - 1.0 + 3.0 * G3;\n      var z3 = z0 - 1.0 + 3.0 * G3;\n      // Work out the hashed gradient indices of the four simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255;\n      // Calculate the contribution from the four corners\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n      if (t0 < 0) n0 = 0.0;\n      else {\n        var gi0 = permMod12[ii + perm[jj + perm[kk]]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0 + grad3[gi0 + 2] * z0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n      if (t1 < 0) n1 = 0.0;\n      else {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1 + grad3[gi1 + 2] * z1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n      if (t2 < 0) n2 = 0.0;\n      else {\n        var gi2 = permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2 + grad3[gi2 + 2] * z2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n      if (t3 < 0) n3 = 0.0;\n      else {\n        var gi3 = permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]] * 3;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad3[gi3] * x3 + grad3[gi3 + 1] * y3 + grad3[gi3 + 2] * z3);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to stay just inside [-1,1]\n      return 32.0 * (n0 + n1 + n2 + n3);\n    },\n    // 4D simplex noise, better simplex rank ordering method 2012-03-09\n    noise4D: function(x, y, z, w) {\n      var perm = this.perm;\n      var grad4 = this.grad4;\n\n      var n0, n1, n2, n3, n4; // Noise contributions from the five corners\n      // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n      var s = (x + y + z + w) * F4; // Factor for 4D skewing\n      var i = Math.floor(x + s);\n      var j = Math.floor(y + s);\n      var k = Math.floor(z + s);\n      var l = Math.floor(w + s);\n      var t = (i + j + k + l) * G4; // Factor for 4D unskewing\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var W0 = l - t;\n      var x0 = x - X0; // The x,y,z,w distances from the cell origin\n      var y0 = y - Y0;\n      var z0 = z - Z0;\n      var w0 = w - W0;\n      // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n      // To find out which of the 24 possible simplices we're in, we need to\n      // determine the magnitude ordering of x0, y0, z0 and w0.\n      // Six pair-wise comparisons are performed between each possible pair\n      // of the four coordinates, and the results are used to rank the numbers.\n      var rankx = 0;\n      var ranky = 0;\n      var rankz = 0;\n      var rankw = 0;\n      if (x0 > y0) rankx++;\n      else ranky++;\n      if (x0 > z0) rankx++;\n      else rankz++;\n      if (x0 > w0) rankx++;\n      else rankw++;\n      if (y0 > z0) ranky++;\n      else rankz++;\n      if (y0 > w0) ranky++;\n      else rankw++;\n      if (z0 > w0) rankz++;\n      else rankw++;\n      var i1, j1, k1, l1; // The integer offsets for the second simplex corner\n      var i2, j2, k2, l2; // The integer offsets for the third simplex corner\n      var i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n      // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n      // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n      // impossible. Only the 24 indices which have non-zero entries make any sense.\n      // We use a thresholding to set the coordinates in turn from the largest magnitude.\n      // Rank 3 denotes the largest coordinate.\n      i1 = rankx >= 3 ? 1 : 0;\n      j1 = ranky >= 3 ? 1 : 0;\n      k1 = rankz >= 3 ? 1 : 0;\n      l1 = rankw >= 3 ? 1 : 0;\n      // Rank 2 denotes the second largest coordinate.\n      i2 = rankx >= 2 ? 1 : 0;\n      j2 = ranky >= 2 ? 1 : 0;\n      k2 = rankz >= 2 ? 1 : 0;\n      l2 = rankw >= 2 ? 1 : 0;\n      // Rank 1 denotes the second smallest coordinate.\n      i3 = rankx >= 1 ? 1 : 0;\n      j3 = ranky >= 1 ? 1 : 0;\n      k3 = rankz >= 1 ? 1 : 0;\n      l3 = rankw >= 1 ? 1 : 0;\n      // The fifth corner has all coordinate offsets = 1, so no need to compute that.\n      var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n      var y1 = y0 - j1 + G4;\n      var z1 = z0 - k1 + G4;\n      var w1 = w0 - l1 + G4;\n      var x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n      var y2 = y0 - j2 + 2.0 * G4;\n      var z2 = z0 - k2 + 2.0 * G4;\n      var w2 = w0 - l2 + 2.0 * G4;\n      var x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n      var y3 = y0 - j3 + 3.0 * G4;\n      var z3 = z0 - k3 + 3.0 * G4;\n      var w3 = w0 - l3 + 3.0 * G4;\n      var x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n      var y4 = y0 - 1.0 + 4.0 * G4;\n      var z4 = z0 - 1.0 + 4.0 * G4;\n      var w4 = w0 - 1.0 + 4.0 * G4;\n      // Work out the hashed gradient indices of the five simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255;\n      var ll = l & 255;\n      // Calculate the contribution from the five corners\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n      if (t0 < 0) n0 = 0.0;\n      else {\n        var gi0 = (perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32) * 4;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad4[gi0] * x0 + grad4[gi0 + 1] * y0 + grad4[gi0 + 2] * z0 + grad4[gi0 + 3] * w0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n      if (t1 < 0) n1 = 0.0;\n      else {\n        var gi1 = (perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32) * 4;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad4[gi1] * x1 + grad4[gi1 + 1] * y1 + grad4[gi1 + 2] * z1 + grad4[gi1 + 3] * w1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n      if (t2 < 0) n2 = 0.0;\n      else {\n        var gi2 = (perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32) * 4;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad4[gi2] * x2 + grad4[gi2 + 1] * y2 + grad4[gi2 + 2] * z2 + grad4[gi2 + 3] * w2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n      if (t3 < 0) n3 = 0.0;\n      else {\n        var gi3 = (perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32) * 4;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad4[gi3] * x3 + grad4[gi3 + 1] * y3 + grad4[gi3 + 2] * z3 + grad4[gi3 + 3] * w3);\n      }\n      var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n      if (t4 < 0) n4 = 0.0;\n      else {\n        var gi4 = (perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32) * 4;\n        t4 *= t4;\n        n4 = t4 * t4 * (grad4[gi4] * x4 + grad4[gi4 + 1] * y4 + grad4[gi4 + 2] * z4 + grad4[gi4 + 3] * w4);\n      }\n      // Sum up and scale the result to cover the range [-1,1]\n      return 27.0 * (n0 + n1 + n2 + n3 + n4);\n    }\n  };\n\n  function buildPermutationTable(random) {\n    var i;\n    var p = new Uint8Array(256);\n    for (i = 0; i < 256; i++) {\n      p[i] = i;\n    }\n    for (i = 0; i < 255; i++) {\n      var r = i + ~~(random() * (256 - i));\n      var aux = p[i];\n      p[i] = p[r];\n      p[r] = aux;\n    }\n    return p;\n  }\n  SimplexNoise._buildPermutationTable = buildPermutationTable;\n\n  function alea() {\n    // Johannes BaagÃ¸e <baagoe@baagoe.com>, 2010\n    var s0 = 0;\n    var s1 = 0;\n    var s2 = 0;\n    var c = 1;\n\n    var mash = masher();\n    s0 = mash(' ');\n    s1 = mash(' ');\n    s2 = mash(' ');\n\n    for (var i = 0; i < arguments.length; i++) {\n      s0 -= mash(arguments[i]);\n      if (s0 < 0) {\n        s0 += 1;\n      }\n      s1 -= mash(arguments[i]);\n      if (s1 < 0) {\n        s1 += 1;\n      }\n      s2 -= mash(arguments[i]);\n      if (s2 < 0) {\n        s2 += 1;\n      }\n    }\n    mash = null;\n    return function() {\n      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n      s0 = s1;\n      s1 = s2;\n      return s2 = t - (c = t | 0);\n    };\n  }\n  function masher() {\n    var n = 0xefc8249d;\n    return function(data) {\n      data = data.toString();\n      for (var i = 0; i < data.length; i++) {\n        n += data.charCodeAt(i);\n        var h = 0.02519603282416938 * n;\n        n = h >>> 0;\n        h -= n;\n        h *= n;\n        n = h >>> 0;\n        h -= n;\n        n += h * 0x100000000; // 2^32\n      }\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n    };\n  }\n\n  // amd\n  if (typeof define !== 'undefined' && define.amd) define(function() {return SimplexNoise;});\n  // common js\n  if (typeof exports !== 'undefined') exports.SimplexNoise = SimplexNoise;\n  // browser\n  else if (typeof window !== 'undefined') window.SimplexNoise = SimplexNoise;\n  // nodejs\n  if (typeof module !== 'undefined') {\n    module.exports = SimplexNoise;\n  }\n\n})();\n","module.exports = function () {\n    for (var i = 0; i < arguments.length; i++) {\n        if (arguments[i] !== undefined) return arguments[i];\n    }\n};\n","var seedRandom = require('seed-random');\nvar SimplexNoise = require('simplex-noise');\nvar defined = require('defined');\n\nfunction createRandom (defaultSeed) {\n  defaultSeed = defined(defaultSeed, null);\n  var defaultRandom = Math.random;\n  var currentSeed;\n  var currentRandom;\n  var noiseGenerator;\n  var _nextGaussian = null;\n  var _hasNextGaussian = false;\n\n  setSeed(defaultSeed);\n\n  return {\n    value: value,\n    createRandom: function (defaultSeed) {\n      return createRandom(defaultSeed);\n    },\n    setSeed: setSeed,\n    getSeed: getSeed,\n    getRandomSeed: getRandomSeed,\n    valueNonZero: valueNonZero,\n    permuteNoise: permuteNoise,\n    noise1D: noise1D,\n    noise2D: noise2D,\n    noise3D: noise3D,\n    noise4D: noise4D,\n    sign: sign,\n    boolean: boolean,\n    chance: chance,\n    range: range,\n    rangeFloor: rangeFloor,\n    pick: pick,\n    shuffle: shuffle,\n    onCircle: onCircle,\n    insideCircle: insideCircle,\n    onSphere: onSphere,\n    insideSphere: insideSphere,\n    quaternion: quaternion,\n    weighted: weighted,\n    weightedSet: weightedSet,\n    weightedSetIndex: weightedSetIndex,\n    gaussian: gaussian\n  };\n\n  function setSeed (seed, opt) {\n    if (typeof seed === 'number' || typeof seed === 'string') {\n      currentSeed = seed;\n      currentRandom = seedRandom(currentSeed, opt);\n    } else {\n      currentSeed = undefined;\n      currentRandom = defaultRandom;\n    }\n    noiseGenerator = createNoise();\n    _nextGaussian = null;\n    _hasNextGaussian = false;\n  }\n\n  function value () {\n    return currentRandom();\n  }\n\n  function valueNonZero () {\n    var u = 0;\n    while (u === 0) u = value();\n    return u;\n  }\n\n  function getSeed () {\n    return currentSeed;\n  }\n\n  function getRandomSeed () {\n    var seed = String(Math.floor(Math.random() * 1000000));\n    return seed;\n  }\n\n  function createNoise () {\n    return new SimplexNoise(currentRandom);\n  }\n\n  function permuteNoise () {\n    noiseGenerator = createNoise();\n  }\n\n  function noise1D (x, frequency, amplitude) {\n    if (!isFinite(x)) throw new TypeError('x component for noise() must be finite');\n    frequency = defined(frequency, 1);\n    amplitude = defined(amplitude, 1);\n    return amplitude * noiseGenerator.noise2D(x * frequency, 0);\n  }\n\n  function noise2D (x, y, frequency, amplitude) {\n    if (!isFinite(x)) throw new TypeError('x component for noise() must be finite');\n    if (!isFinite(y)) throw new TypeError('y component for noise() must be finite');\n    frequency = defined(frequency, 1);\n    amplitude = defined(amplitude, 1);\n    return amplitude * noiseGenerator.noise2D(x * frequency, y * frequency);\n  }\n\n  function noise3D (x, y, z, frequency, amplitude) {\n    if (!isFinite(x)) throw new TypeError('x component for noise() must be finite');\n    if (!isFinite(y)) throw new TypeError('y component for noise() must be finite');\n    if (!isFinite(z)) throw new TypeError('z component for noise() must be finite');\n    frequency = defined(frequency, 1);\n    amplitude = defined(amplitude, 1);\n    return amplitude * noiseGenerator.noise3D(\n      x * frequency,\n      y * frequency,\n      z * frequency\n    );\n  }\n\n  function noise4D (x, y, z, w, frequency, amplitude) {\n    if (!isFinite(x)) throw new TypeError('x component for noise() must be finite');\n    if (!isFinite(y)) throw new TypeError('y component for noise() must be finite');\n    if (!isFinite(z)) throw new TypeError('z component for noise() must be finite');\n    if (!isFinite(w)) throw new TypeError('w component for noise() must be finite');\n    frequency = defined(frequency, 1);\n    amplitude = defined(amplitude, 1);\n    return amplitude * noiseGenerator.noise4D(\n      x * frequency,\n      y * frequency,\n      z * frequency,\n      w * frequency\n    );\n  }\n\n  function sign () {\n    return boolean() ? 1 : -1;\n  }\n\n  function boolean () {\n    return value() > 0.5;\n  }\n\n  function chance (n) {\n    n = defined(n, 0.5);\n    if (typeof n !== 'number') throw new TypeError('expected n to be a number');\n    return value() < n;\n  }\n\n  function range (min, max) {\n    if (max === undefined) {\n      max = min;\n      min = 0;\n    }\n\n    if (typeof min !== 'number' || typeof max !== 'number') {\n      throw new TypeError('Expected all arguments to be numbers');\n    }\n\n    return value() * (max - min) + min;\n  }\n\n  function rangeFloor (min, max) {\n    if (max === undefined) {\n      max = min;\n      min = 0;\n    }\n\n    if (typeof min !== 'number' || typeof max !== 'number') {\n      throw new TypeError('Expected all arguments to be numbers');\n    }\n\n    return Math.floor(range(min, max));\n  }\n\n  function pick (array) {\n    if (array.length === 0) return undefined;\n    return array[rangeFloor(0, array.length)];\n  }\n\n  function shuffle (arr) {\n    if (!Array.isArray(arr)) {\n      throw new TypeError('Expected Array, got ' + typeof arr);\n    }\n\n    var rand;\n    var tmp;\n    var len = arr.length;\n    var ret = arr.slice();\n    while (len) {\n      rand = Math.floor(value() * len--);\n      tmp = ret[len];\n      ret[len] = ret[rand];\n      ret[rand] = tmp;\n    }\n    return ret;\n  }\n\n  function onCircle (radius, out) {\n    radius = defined(radius, 1);\n    out = out || [];\n    var theta = value() * 2.0 * Math.PI;\n    out[0] = radius * Math.cos(theta);\n    out[1] = radius * Math.sin(theta);\n    return out;\n  }\n\n  function insideCircle (radius, out) {\n    radius = defined(radius, 1);\n    out = out || [];\n    onCircle(1, out);\n    var r = radius * Math.sqrt(value());\n    out[0] *= r;\n    out[1] *= r;\n    return out;\n  }\n\n  function onSphere (radius, out) {\n    radius = defined(radius, 1);\n    out = out || [];\n    var u = value() * Math.PI * 2;\n    var v = value() * 2 - 1;\n    var phi = u;\n    var theta = Math.acos(v);\n    out[0] = radius * Math.sin(theta) * Math.cos(phi);\n    out[1] = radius * Math.sin(theta) * Math.sin(phi);\n    out[2] = radius * Math.cos(theta);\n    return out;\n  }\n\n  function insideSphere (radius, out) {\n    radius = defined(radius, 1);\n    out = out || [];\n    var u = value() * Math.PI * 2;\n    var v = value() * 2 - 1;\n    var k = value();\n\n    var phi = u;\n    var theta = Math.acos(v);\n    var r = radius * Math.cbrt(k);\n    out[0] = r * Math.sin(theta) * Math.cos(phi);\n    out[1] = r * Math.sin(theta) * Math.sin(phi);\n    out[2] = r * Math.cos(theta);\n    return out;\n  }\n\n  function quaternion (out) {\n    out = out || [];\n    var u1 = value();\n    var u2 = value();\n    var u3 = value();\n\n    var sq1 = Math.sqrt(1 - u1);\n    var sq2 = Math.sqrt(u1);\n\n    var theta1 = Math.PI * 2 * u2;\n    var theta2 = Math.PI * 2 * u3;\n\n    var x = Math.sin(theta1) * sq1;\n    var y = Math.cos(theta1) * sq1;\n    var z = Math.sin(theta2) * sq2;\n    var w = Math.cos(theta2) * sq2;\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n  }\n\n  function weightedSet (set) {\n    set = set || [];\n    if (set.length === 0) return null;\n    return set[weightedSetIndex(set)].value;\n  }\n\n  function weightedSetIndex (set) {\n    set = set || [];\n    if (set.length === 0) return -1;\n    return weighted(set.map(function (s) {\n      return s.weight;\n    }));\n  }\n\n  function weighted (weights) {\n    weights = weights || [];\n    if (weights.length === 0) return -1;\n    var totalWeight = 0;\n    var i;\n\n    for (i = 0; i < weights.length; i++) {\n      totalWeight += weights[i];\n    }\n\n    if (totalWeight <= 0) throw new Error('Weights must sum to > 0');\n\n    var random = value() * totalWeight;\n    for (i = 0; i < weights.length; i++) {\n      if (random < weights[i]) {\n        return i;\n      }\n      random -= weights[i];\n    }\n    return 0;\n  }\n\n  function gaussian (mean, standardDerivation) {\n    mean = defined(mean, 0);\n    standardDerivation = defined(standardDerivation, 1);\n\n    // https://github.com/openjdk-mirror/jdk7u-jdk/blob/f4d80957e89a19a29bb9f9807d2a28351ed7f7df/src/share/classes/java/util/Random.java#L496\n    if (_hasNextGaussian) {\n      _hasNextGaussian = false;\n      var result = _nextGaussian;\n      _nextGaussian = null;\n      return mean + standardDerivation * result;\n    } else {\n      var v1 = 0;\n      var v2 = 0;\n      var s = 0;\n      do {\n        v1 = value() * 2 - 1; // between -1 and 1\n        v2 = value() * 2 - 1; // between -1 and 1\n        s = v1 * v1 + v2 * v2;\n      } while (s >= 1 || s === 0);\n      var multiplier = Math.sqrt(-2 * Math.log(s) / s);\n      _nextGaussian = (v2 * multiplier);\n      _hasNextGaussian = true;\n      return mean + standardDerivation * (v1 * multiplier);\n    }\n  }\n}\n\nmodule.exports = createRandom();\n","// Vector class originally from https://evanw.github.io/lightgl.js/docs/vector.html\n// Edited and expanded to match p5's vectors\n// ref - p5 vector https://p5js.org/reference/#/p5.Vector\n// https://www.khanacademy.org/computing/computer-programming/programming-natural-simulations/programming-vectors/a/more-vector-math\n\nconst fromAngles = (theta, phi) =>\n    new Vector(Math.cos(theta) * Math.cos(phi), Math.sin(phi), Math.sin(theta) * Math.cos(phi));\nconst randomDirection = () => fromAngles(Math.random() * Math.PI * 2, Math.asin(Math.random() * 2 - 1));\nconst min = (a, b) => new Vector(Math.min(a.x, b.x), Math.min(a.y, b.y), Math.min(a.z, b.z));\nconst max = (a, b) => new Vector(Math.max(a.x, b.x), Math.max(a.y, b.y), Math.max(a.z, b.z));\nconst lerp = (a, b, fraction) => b.sub(a).mult(fraction).add(a);\nconst fromArray = (a) => new Vector(a[0], a[1], a[2]);\nconst angleBetween = (a, b) => a.angleTo(b);\n\nexport class Vector {\n    constructor(x, y, z) {\n        this.x = x || 0;\n        this.y = y || 0;\n        this.z = z || 0;\n    }\n\n    negative() {\n        return new Vector(-this.x, -this.y, -this.z);\n    }\n\n    add(v) {\n        if (v instanceof Vector) return new Vector(this.x + v.x, this.y + v.y, this.z + v.z);\n        return new Vector(this.x + v, this.y + v, this.z + v);\n    }\n\n    sub(v) {\n        if (v instanceof Vector) return new Vector(this.x - v.x, this.y - v.y, this.z - v.z);\n        return new Vector(this.x - v, this.y - v, this.z - v);\n    }\n\n    mult(v) {\n        if (v instanceof Vector) return new Vector(this.x * v.x, this.y * v.y, this.z * v.z);\n        return new Vector(this.x * v, this.y * v, this.z * v);\n    }\n\n    // https://github.com/openrndr/openrndr/blob/master/openrndr-math/src/main/kotlin/org/openrndr/math/Vector2.kt\n    mix(b, fraction) {\n        // return this.mult(1 - mix).add(o.mult(mix));\n        return lerp(this, b, fraction);\n    }\n\n    div(v) {\n        if (v instanceof Vector) return new Vector(this.x / v.x, this.y / v.y, this.z / v.z);\n        return new Vector(this.x / v, this.y / v, this.z / v);\n    }\n\n    equals(v) {\n        return this.x === v.x && this.y === v.y && this.z === v.z;\n    }\n\n    dot(v) {\n        return this.x * v.x + this.y * v.y + this.z * v.z;\n    }\n\n    cross(v) {\n        return new Vector(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x);\n    }\n\n    length() {\n        return Math.sqrt(this.dot(this));\n    }\n\n    mag() {\n        return this.length();\n    }\n\n    magSq() {\n        const m = this.length();\n        return m * m;\n    }\n\n    setMag(m) {\n        const c = this.mag();\n        const r = m / c;\n        return this.mult(r);\n    }\n\n    normalize() {\n        let mag = this.mag();\n        mag = mag || 1;\n        return this.div(mag);\n    }\n\n    unit() {\n        return this.div(this.length());\n    }\n\n    min() {\n        return Math.min(Math.min(this.x, this.y), this.z);\n    }\n\n    max() {\n        return Math.max(Math.max(this.x, this.y), this.z);\n    }\n\n    limit(v) {\n        const cm = this.mag();\n        if (cm > v) {\n            return this.setMag(v);\n        }\n        return this;\n    }\n\n    angle() {\n        return Math.atan2(this.y, this.x);\n    }\n\n    toAngles() {\n        return {\n            theta: Math.atan2(this.z, this.x),\n            phi: Math.asin(this.y / this.length()),\n        };\n    }\n\n    angleTo(a) {\n        return Math.acos(this.dot(a) / (this.length() * a.length()));\n    }\n\n    toArray(n) {\n        return [this.x, this.y, this.z].slice(0, n || 3);\n    }\n\n    clone() {\n        return new Vector(this.x, this.y, this.z);\n    }\n}\n\nconst negative = (a, b) => {\n    b.x = -a.x;\n    b.y = -a.y;\n    b.z = -a.z;\n    return b;\n};\nconst add = (a, b, c) => {\n    if (b instanceof Vector) {\n        c.x = a.x + b.x;\n        c.y = a.y + b.y;\n        c.z = a.z + b.z;\n    } else {\n        c.x = a.x + b;\n        c.y = a.y + b;\n        c.z = a.z + b;\n    }\n    return c;\n};\nconst subtract = (a, b, c) => {\n    if (b instanceof Vector) {\n        c.x = a.x - b.x;\n        c.y = a.y - b.y;\n        c.z = a.z - b.z;\n    } else {\n        c.x = a.x - b;\n        c.y = a.y - b;\n        c.z = a.z - b;\n    }\n    return c;\n};\nconst multiply = (a, b, c) => {\n    if (b instanceof Vector) {\n        c.x = a.x * b.x;\n        c.y = a.y * b.y;\n        c.z = a.z * b.z;\n    } else {\n        c.x = a.x * b;\n        c.y = a.y * b;\n        c.z = a.z * b;\n    }\n    return c;\n};\nconst divide = (a, b, c) => {\n    if (b instanceof Vector) {\n        c.x = a.x / b.x;\n        c.y = a.y / b.y;\n        c.z = a.z / b.z;\n    } else {\n        c.x = a.x / b;\n        c.y = a.y / b;\n        c.z = a.z / b;\n    }\n    return c;\n};\nconst cross = (a, b, c) => {\n    c.x = a.y * b.z - a.z * b.y;\n    c.y = a.z * b.x - a.x * b.z;\n    c.z = a.x * b.y - a.y * b.x;\n    return c;\n};\nconst unit = (a, b) => {\n    const length = a.length();\n    b.x = a.x / length;\n    b.y = a.y / length;\n    b.z = a.z / length;\n    return b;\n};\n","/*\n  Math Snippets\n  https://github.com/terkelg/math\n*/\n\nimport random from 'canvas-sketch-util/random';\nimport { Vector } from './Vector';\n\n// Math aliases\nconst Ï€ = Math.PI;\nconst { PI } = Math;\nconst TAU = Math.PI * 2;\nconst { abs } = Math;\nconst { sin } = Math;\nconst { cos } = Math;\nconst { tan } = Math;\nconst { pow } = Math;\nconst { round } = Math;\nconst { floor } = Math;\n\nrandom.setSeed(random.getRandomSeed());\nconsole.log(`Using seed ${random.getSeed()}`);\n\n// Ï† phi\nexport const golden = 1.6180339887498948482;\n// g angles: 222.5, 137.5\n\nexport const checkBoundsLeft = (b, v) => (v < b ? b : v);\nexport const checkBoundsRight = (b, v) => (v > b ? b : v);\n\nexport const snapNumber = (snap, n) => Math.floor(n / snap) * snap;\n\nexport const percentage = (total, num) => Math.round(num * (total / 100));\n\n// Hough transform\n// https://stackoverflow.com/questions/24372921/how-to-calculate-quantized-angle\nexport const houghQuantize = (numAngles, theta) => Math.floor((numAngles * theta) / TAU + 0.5);\n// https://stackoverflow.com/questions/47047691/how-to-quantize-directions-in-canny-edge-detector-in-python\nexport const quantize = (numAngles, theta) => (Math.round(theta * (numAngles / Math.PI)) + numAngles) % numAngles;\n\nexport const round2 = (num) => Math.round((num + Number.EPSILON) * 100) / 100;\n\nexport const getRandomSeed = () => random.getSeed();\nexport const setRandomSeed = (s) => random.setRandomSeed(s);\n\n// Box-Muller Transform\n// https://stackoverflow.com/questions/25582882/javascript-math-random-normal-distribution-gaussian-bell-curve\nexport const randomNormalBM = () => {\n    let u = 0;\n    let v = 0;\n    while (u === 0) u = random.value(); // Converting [0,1) to (0,1)\n    while (v === 0) v = random.value();\n    let num = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\n    num = num / 10.0 + 0.5; // Translate to 0 -> 1\n    if (num > 1 || num < 0) return randomNormalBM(); // resample between 0 and 1\n    return num;\n};\n\n// same source as above\n// better solution https://spin.atomicobject.com/2019/09/30/skew-normal-prng-javascript/\nexport const randomNormalBM2 = (min = 0, max = 1, skew = 1) => {\n    let u = 0;\n    let v = 0;\n    while (u === 0) u = random.value(); // Converting [0,1) to (0,1)\n    while (v === 0) v = random.value();\n    let num = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\n\n    num = num / 10.0 + 0.5; // Translate to 0 -> 1\n    if (num > 1 || num < 0) {\n        // // resample between 0 and 1 if out of range\n        num = randomNormalBM2(min, max, skew);\n    } else {\n        num = Math.pow(num, skew); // Skew\n        num *= max - min; // Stretch to fill range\n        num += min; // offset to min\n    }\n    return num;\n};\n\nexport const randomNormalNumberBetween = (min, max) => randomNormalBM() * (max - min) + min;\nexport const randomNormalWholeBetween = (min, max) => Math.round(randomNormalBM() * (max - min) + min);\n\nexport const randomNumberBetween = (min, max) => random.valueNonZero() * (max - min) + min;\nexport const randomWholeBetween = (min, max) => Math.floor(random.value() * (max - min) + min);\n\nexport const randomNumberBetweenMid = (min, max) => randomNumberBetween(min, max) - max / 2;\n\nexport const randomSign = () => (Math.round(random.value()) === 1 ? 1 : -1);\nexport const randomBoolean = () => Math.round(random.value()) === 1;\nexport const randomChance = (chance = 0.5) => random.chance(chance);\n\nexport const averageNumArray = (arry) => arry.reduce((a, b) => a + b) / arry.length;\n\nexport const oneOf = (arry) => {\n    const i = randomWholeBetween(0, arry.length - 1);\n    return arry[i];\n};\n\nexport const lowest = (arry) =>\n    arry.reduce((acc, v) => {\n        if (v < acc) {\n            acc = v;\n        }\n        return acc;\n    }, 0);\n\nexport const highest = (arry) =>\n    arry.reduce((acc, v) => {\n        if (v > acc) {\n            acc = v;\n        }\n        return acc;\n    }, 0);\n\nexport const createRandomNumberArray = (len, min, max) =>\n    Array.from(new Array(len)).map(() => randomNumberBetween(min, max));\n\n// -> -1 ... 1\nexport const loopingValue = (t, m = 0.5) => Math.sin(t * m);\n\n// t is 0-1, -> -1 ... 1\nexport const pingPontValue = (t) => Math.sin(t * Math.PI);\n\n// x,y offsets for the current circle position\nexport const pointOnCircle = (x, y, r, a) => ({ x: r * Math.sin(a) + x, y: r * Math.cos(a) + y });\n\n// returns value between 0-1, 250,500,0 => .5\nexport const normalize = (min, max, val) => (val - min) / (max - min);\nexport const normalizeInverse = (min, max, val) => 1 - normalize(min, max, val);\n\n// https://twitter.com/mattdesl/status/1031305279227478016\n// https://www.trysmudford.com/blog/linear-interpolation-functions/\n// lerp(20, 80, 0.5) // 40\nexport const lerp = (x, y, a) => x * (1 - a) + y * a;\n\nexport const clamp = (min = 0, max = 1, a) => Math.min(max, Math.max(min, a));\n\n// invlerp(50, 100, 75)  // 0.5\nexport const invlerp = (x, y, a) => clamp(0, 1, (a - x) / (y - x));\n\n// p5js map fn is reverse map(a,x2,y2,x1,y1)\n// a is point in 1 and converts to point in 2\n// range(10, 100, 2000, 20000, 50) // 10000\nexport const mapRange = (x1, y1, x2, y2, a) => lerp(x2, y2, invlerp(x1, y1, a));\n\n// Accepts a value 0-1 and returns a value 0-1 in a sin wave\nexport const toSinValue = (value) => Math.abs(Math.sin(value * TAU));\n\nexport const mapToTau = (start, end, value) => mapRange(start, end, 0, TAU, value);\n\n// https://stackoverflow.com/questions/38457053/find-n-logarithmic-intervals-between-two-end-points\nexport const logInterval = (total_intervals, start, end) => {\n    const startInterVal = 1;\n    const endInterval = total_intervals;\n    const minLog = Math.log(start);\n    const maxLog = Math.log(end);\n    const scale = (maxLog - minLog) / (endInterval - startInterVal);\n    const result = [];\n\n    for (let i = 1; i < total_intervals; i++) {\n        result.push(Math.exp(minLog + scale * (i - startInterVal)));\n    }\n    result.push(end);\n    return result;\n};\n\nexport const marginify = ({ margin, u, v, width, height }) => ({\n    x: lerp(margin, width - margin, u),\n    y: lerp(margin, height - margin, v),\n});\n\nexport const pointDistance = (pointA, pointB) => {\n    const dx = pointA.x - pointB.x;\n    const dy = pointA.y - pointB.y;\n    return Math.sqrt(dx * dx + dy * dy);\n};\n\n// https://stackoverflow.com/questions/13043945/how-do-i-calculate-the-position-of-a-point-in-html5-canvas-after-rotation\nexport const pointRotateCoord = (point, angle) => ({\n    x: point.x * cos(angle) - point.y * sin(angle),\n    y: point.y * cos(angle) + point.x * sin(angle),\n});\n\n// https://www.khanacademy.org/computing/computer-programming/programming-natural-simulations/programming-angular-movement/a/pointing-towards-movement\nexport const pointAngleFromVelocity = ({ velocityX, velocityY }) => Math.atan2(velocityY, velocityX);\n\nexport const aFromVector = ({ x, y }) => Math.atan2(y, x);\nexport const uvFromAngle = (a) => new Vector(Math.cos(a), Math.sin(a));\n\nexport const radiansToDegrees = (rad) => (rad * 180) / Math.PI;\nexport const degreesToRadians = (deg) => (deg * Math.PI) / 180;\n\n// Scale up point grid and center in the canvas\nexport const scalePointToCanvas = (canvasWidth, canvasHeight, width, height, zoomFactor, x, y) => {\n    const particleXOffset = canvasWidth / 2 - (width * zoomFactor) / 2;\n    const particleYOffset = canvasHeight / 2 - (height * zoomFactor) / 2;\n    return {\n        x: x * zoomFactor + particleXOffset,\n        y: y * zoomFactor + particleYOffset,\n    };\n};\n\nexport const create2dNoise = (u, v, amplitude = 1, frequency = 0.5) =>\n    random.noise2D(u * frequency, v * frequency) * amplitude;\n\nexport const create2dNoiseAbs = (u, v, amplitude = 1, frequency = 0.5) =>\n    Math.abs(random.noise2D(u * frequency, v * frequency)) * amplitude;\n\nexport const create3dNoise = (u, v, t, amplitude = 1, frequency = 0.5) =>\n    random.noise3D(u * frequency, v * frequency, t * frequency) * amplitude;\n\nexport const create3dNoiseAbs = (u, v, t, amplitude = 1, frequency = 0.5) =>\n    Math.abs(random.noise3D(u * frequency, v * frequency, t * frequency)) * amplitude;\n\nexport const randomPointAround = (range = 20) => {\n    const radius = randomWholeBetween(0, range);\n    const angle = randomNumberBetween(0, TAU);\n    return { x: radius * Math.cos(angle), y: radius * Math.sin(angle) };\n};\n\n// https://github.com/Jam3/chaikin-smooth/blob/master/index.js\nexport const chaikin = (input, itr = 1) => {\n    if (itr === 0) return input;\n    const output = [];\n\n    for (let i = 0; i < input.length - 1; i++) {\n        const p0 = input[i];\n        const p1 = input[i + 1];\n        const p0x = p0[0];\n        const p0y = p0[1];\n        const p1x = p1[0];\n        const p1y = p1[1];\n\n        const Q = [0.75 * p0x + 0.25 * p1x, 0.75 * p0y + 0.25 * p1y];\n        const R = [0.25 * p0x + 0.75 * p1x, 0.25 * p0y + 0.75 * p1y];\n        output.push(Q);\n        output.push(R);\n    }\n\n    return itr === 1 ? output : chaikin(output, itr - 1);\n};\n\n// line intercept math by Paul Bourke http://paulbourke.net/geometry/pointlineplane/\n// Determine the intersection point of two line segments\n// Return FALSE if the lines don't intersect\nexport const intersect = (x1, y1, x2, y2, x3, y3, x4, y4) => {\n    // Check if none of the lines are of length 0\n    if ((x1 === x2 && y1 === y2) || (x3 === x4 && y3 === y4)) {\n        return false;\n    }\n\n    const denominator = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n\n    // Lines are parallel\n    if (denominator === 0) {\n        return false;\n    }\n\n    const ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator;\n    const ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / denominator;\n\n    // is the intersection along the segments\n    if (ua < 0 || ua > 1 || ub < 0 || ub > 1) {\n        return false;\n    }\n\n    // Return a object with the x and y coordinates of the intersection\n    const x = x1 + ua * (x2 - x1);\n    const y = y1 + ua * (y2 - y1);\n\n    return { x, y };\n};\n","import tinycolor from 'tinycolor2';\nimport { uvFromAngle } from './math';\n\nexport let isHiDPI = false;\nexport let contextScale = 1;\n\nexport const resizeCanvas = (canvas, context, width, height, scale) => {\n    contextScale = scale || window.devicePixelRatio;\n\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n\n    canvas.width = Math.floor(width * contextScale);\n    canvas.height = Math.floor(height * contextScale);\n\n    if (contextScale === 2) {\n        isHiDPI = true;\n        context.scale(1, 1);\n        // context.scale(2, 2);\n    } else {\n        context.scale(contextScale, contextScale);\n    }\n};\n\nexport const clearCanvas = (canvas, context) => (_) => context.clearRect(0, 0, canvas.width, canvas.height);\n\nexport const fillCanvas = (canvas, context) => (opacity = 1, color = '0,0,0') => {\n    context.fillStyle = `rgba(${color},${opacity})`;\n    context.fillRect(0, 0, canvas.width, canvas.height);\n};\n\nexport const background = (canvas, context) => (color = 'black') => {\n    context.fillStyle = tinycolor(color).toRgbString();\n    context.fillRect(0, 0, canvas.width, canvas.height);\n};\n\nexport const resetStyles = (context) => {\n    context.strokeStyle = '#000';\n    context.fillStyle = '#fff';\n    context.lineWidth = 1;\n    context.setLineDash([]);\n    context.lineCap = 'butt';\n};\n\n// https://www.rgraph.net/canvas/howto-antialias.html\nexport const sharpLines = (context) => context.translate(0.5, 0.5);\n\n// https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\n// multiply, screen, overlay, soft-light, hard-light, color-dodge, color-burn, darken, lighten, difference, exclusion, hue, saturation, luminosity, color, add, subtract, average, negative\nexport const blendMode = (context) => (mode = 'source-over') => (context.globalCompositeOperation = mode);\n\n// https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter\nexport const filter = (context) => (f = '') => (context.filter = f);\n\n//----------------------------------------------------------------------------------------------------------------------\n// PRIMITIVES\n//----------------------------------------------------------------------------------------------------------------------\n\nexport const pixel = (context) => (x, y, color = 'black', mode = 'square', size) => {\n    size = size || contextScale;\n    context.fillStyle = tinycolor(color).toRgbString();\n    if (mode === 'circle') {\n        context.beginPath();\n        context.arc(x, y, size, 0, Math.PI * 2, false);\n        context.fill();\n    } else {\n        context.fillRect(x, y, size, size);\n    }\n};\n\nexport const setStokeColor = (context) => (color) => (context.strokeStyle = tinycolor(color).toRgbString());\n\n// linecap = butt, round, square\nexport const drawLine = (context) => (x1, y1, x2, y2, strokeWidth = 1, linecap = 'butt') => {\n    // color = 'black',\n    // context.strokeStyle = tinycolor(color).toRgbString();\n    context.lineWidth = strokeWidth;\n    context.lineCap = linecap;\n    context.beginPath();\n    context.moveTo(x1, y1);\n    context.lineTo(x2, y2);\n    context.stroke();\n};\n\nexport const drawLineAngle = (context) => (x1, y1, angle, length, strokeWidth, linecap) => {\n    const theta = (Math.PI * angle) / 180.0;\n    const x2 = x1 + length * Math.cos(theta);\n    const y2 = y1 + length * Math.sin(theta);\n    drawLine(context)(x1, y1, x2, y2, strokeWidth, linecap);\n};\n\n// export const drawLineAngleV = (context) => (x1, y1, angle, length, strokeWidth, linecap) => {\n//     const vect = uvFromAngle(angle).setMag(length);\n//     const x2 = x1 + vect.x;\n//     const y2 = y1 + vect.y;\n//     drawLine(context)(x1, y1, x2, y2, strokeWidth, linecap);\n// };\n\nexport const drawCircle = (context) => (strokeWidth, x, y, radius, color) => {\n    if (color) {\n        context.strokeStyle = tinycolor(color).toRgbString();\n    }\n    context.lineWidth = strokeWidth;\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    // context.fillStyle = 'rgba(255,255,255,.1)';\n    // context.fill();\n    context.stroke();\n};\n\nexport const drawCircleFilled = (context) => (x, y, radius, color) => {\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    context.fillStyle = color;\n    context.fill();\n};\n\nexport const drawRect = (context) => (x, y, w, h, strokeWidth = 1, color) => {\n    if (color) {\n        context.strokeStyle = tinycolor(color).toRgbString();\n    }\n    context.lineWidth = strokeWidth;\n    context.rect(x, y, w, h);\n    context.stroke();\n};\n\nexport const drawRectFilled = (context) => (x, y, w, h, color = 'white') => {\n    context.fillStyle = tinycolor(color).toRgbString();\n    context.fillRect(x, y, w, h);\n};\n\nexport const drawSquareFilled = (context) => (x, y, size, color) => {\n    drawRectFilled(context)(x, y, size, size, color);\n};\n\nexport const drawTriangleFilled = (context) => (x, y, size, color) => {\n    const half = size / 2;\n    context.beginPath();\n    context.moveTo(x - half, y - half);\n    context.lineTo(x + half, y);\n    context.lineTo(x - half, y + half);\n    context.fillStyle = color.toRgbString();\n    context.fill();\n};\n\n// https://www.scriptol.com/html5/canvas/rounded-rectangle.php\n// TODO center on x,y\nexport const drawQuadRectFilled = (context) => (x, y, w, h, color) => {\n    const mx = x + w / 2;\n    const my = y + h / 2;\n    context.beginPath();\n    // context.strokeStyle = 'green';\n    // context.lineWidth = '4';\n    context.fillStyle = tinycolor(color).toRgbString();\n    context.moveTo(x, my);\n    context.quadraticCurveTo(x, y, mx, y);\n    context.quadraticCurveTo(x + w, y, x + w, my);\n    context.quadraticCurveTo(x + w, y + h, mx, y + h);\n    context.quadraticCurveTo(x, y + h, x, my);\n    // context.stroke();\n    context.fill();\n};\n\n// https://www.scriptol.com/html5/canvas/rounded-rectangle.php\n// TODO center on x,y\nexport const drawRoundRectFilled = (context) => (x, y, w, h, corner, color) => {\n    if (w < corner || h < corner) {\n        corner = Math.min(w, h);\n    }\n\n    const r = x + w;\n    const b = y + h;\n    context.beginPath();\n    // context.strokeStyle = 'green';\n    // context.lineWidth = '4';\n    context.fillStyle = tinycolor(color).toRgbString();\n    context.moveTo(x + corner, y);\n    context.lineTo(r - corner, y);\n    context.quadraticCurveTo(r, y, r, y + corner);\n    context.lineTo(r, y + h - corner);\n    context.quadraticCurveTo(r, b, r - corner, b);\n    context.lineTo(x + corner, b);\n    context.quadraticCurveTo(x, b, x, b - corner);\n    context.lineTo(x, y + corner);\n    context.quadraticCurveTo(x, y, x + corner, y);\n    // context.stroke();\n    context.fill();\n};\n\nexport const drawTestPoint = (context) => ({ x, y, radius, color }) => {\n    context.strokeStyle = color.toRgbString();\n    context.lineWidth = 1;\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    context.fillStyle = 'rgba(255,255,255,.1)';\n    context.fill();\n    context.stroke();\n    drawLine(context)(x, y, x + radius, y, 1);\n};\n","export const defaultValue = (obj, key, value) => (obj.hasOwnProperty(key) ? obj[key] : value);\n\nexport const first = (arry) => arry[0];\nexport const middle = (arry) => arry.slice(1, arry.length - 2);\nexport const last = (arry) => arry[arry.length - 1];\n\nexport const limitArrayLen = (arr) => {\n    const arrLength = arr.length;\n    if (arrLength > MAX_COORD_HISTORY) {\n        arr.splice(0, arrLength - MAX_COORD_HISTORY);\n    }\n    return arr;\n};\n\nexport const getArrayValuesFromStart = (arr, start, len) => {\n    const values = [];\n    let index = start;\n    for (let i = 0; i < len; i++) {\n        values.push(arr[index--]);\n        if (index < 0) index = arr.length - 1;\n    }\n    return values;\n};\n\n// Just getting an index by wrapping can be done w/ % https://benfrain.com/looping-infinitely-around-an-array-in-javascript/\nexport const getArrayValuesFromEnd = (arr, start, len) => {\n    const values = [];\n    let index = start;\n    for (let i = 0; i < len; i++) {\n        values.push(arr[index++]);\n        if (index === arr.length) index = 0;\n    }\n    return values;\n};\n","/*\nConvenience canvas sketch runner. Based on p5js\n\n\nconst variation = () => {\n    const config = {};\n\n    const setup = ({canvas, context}) => {\n        // create initial state\n    };\n\n    // will run every frame\n    const draw = ({canvas, context, mouse}) => {\n        // draw on every frame\n        return 1; // -1 to exit animation loop\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n\nTODO\n- [ ] merge screen shot code\n- [ ] Canvas Recorder  https://xosh.org/canvas-recorder/\n- [ ] coords of a mouse down to variation?\n- [ ] better touch input\n- [ ] svg https://github.com/canvg/canvg\n- [ ] great ideas here http://paperjs.org/features/\n*/\n\nimport { isHiDPI, contextScale, resizeCanvas } from './canvas';\nimport { getRandomSeed, golden } from './math';\nimport { defaultValue } from './utils';\n\nexport const orientation = {\n    portrait: 0,\n    landscape: 1,\n};\n\nexport const ratio = {\n    letter: 0.773, // 8.5x11\n    poster: 0.667, // 24x36\n    golden: golden - 1,\n    square: -1,\n    auto: 1,\n};\n\nexport const scale = {\n    standard: 1,\n    hidpi: 2,\n};\n\nexport const sketch = () => {\n    const mouse = {\n        x: undefined,\n        y: undefined,\n        isDown: false,\n        radius: 100,\n    };\n\n    let hasStarted = false;\n\n    let fps = 0;\n\n    let drawRuns = 0;\n\n    let currentVariationFn;\n    let currentVariationRes;\n    let animationId;\n\n    const canvasSizeFraction = 0.9;\n    const canvas = document.getElementById('canvas');\n    const context = canvas.getContext('2d');\n\n    const getCanvas = (_) => canvas;\n    const getContext = (_) => context;\n    const getMouse = (_) => mouse;\n\n    const mouseDown = (evt) => {\n        mouse.isDown = true;\n    };\n\n    const mouseMove = (evt) => {\n        const mult = isHiDPI ? 2 : 1;\n        const canvasFrame = canvas.getBoundingClientRect();\n        mouse.x = (evt.x - canvasFrame.x) * mult;\n        mouse.y = (evt.y - canvasFrame.y) * mult;\n    };\n\n    const mouseUp = (evt) => {\n        mouse.isDown = false;\n    };\n\n    const mouseOut = (evt) => {\n        mouse.x = undefined;\n        mouse.y = undefined;\n        mouse.isDown = false;\n    };\n\n    window.addEventListener('mousedown', mouseDown);\n    window.addEventListener('touchstart', mouseDown);\n\n    window.addEventListener('mousemove', mouseMove);\n    window.addEventListener('touchmove', mouseMove);\n\n    window.addEventListener('mouseup', mouseUp);\n    window.addEventListener('touchend', mouseUp);\n\n    window.addEventListener('mouseout', mouseOut);\n    window.addEventListener('touchcancel', mouseOut);\n\n    const applyCanvasSize = (config, fraction) => {\n        const width = defaultValue(config, 'width', window.innerWidth);\n        const height = defaultValue(config, 'height', window.innerHeight);\n        let newWidth = width;\n        let newHeight = height;\n\n        const cfgOrientation = defaultValue(config, 'orientation', orientation.landscape);\n        const cfgRatio = defaultValue(config, 'ratio', ratio.auto);\n        const cfgScale = defaultValue(config, 'scale', scale.standard);\n\n        const aSide = Math.min(width, height) * fraction;\n        const bSide = Math.round(cfgRatio * aSide) * fraction;\n\n        if (cfgRatio === ratio.square) {\n            newWidth = aSide;\n            newHeight = aSide;\n        } else if (cfgOrientation === orientation.portrait) {\n            newWidth = bSide;\n            newHeight = aSide;\n        } else if (cfgOrientation === orientation.landscape && cfgRatio !== ratio.auto) {\n            newWidth = aSide;\n            newHeight = bSide;\n        }\n\n        resizeCanvas(canvas, context, newWidth, newHeight, cfgScale);\n    };\n\n    const run = (variation) => {\n        currentVariationFn = variation;\n        currentVariationRes = currentVariationFn();\n\n        let currentDrawLimit;\n\n        let backgroundColor;\n\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        if (currentVariationRes.hasOwnProperty('config')) {\n            const { config } = currentVariationRes;\n            applyCanvasSize(config, canvasSizeFraction);\n            if (config.background) {\n                backgroundColor = config.background;\n            }\n            if (config.fps) {\n                fps = config.fps;\n            }\n            if (config.drawLimit > 0) {\n                currentDrawLimit = config.drawLimit;\n            }\n        } else {\n            resizeCanvas(canvas, context, window.innerWidth, window.innerHeight);\n        }\n\n        let rendering = true;\n        const targetFpsInterval = 1000 / fps;\n        let lastAnimationFrameTime;\n\n        // context.translate(0.5, 0.5);\n\n        const checkDrawLimit = () => {\n            if (currentDrawLimit) {\n                return drawRuns < currentDrawLimit;\n            }\n            return true;\n        };\n\n        const startSketch = () => {\n            window.removeEventListener('load', startSketch);\n            hasStarted = true;\n\n            currentVariationRes.setup({ canvas, context, s: this });\n\n            const render = () => {\n                const result = currentVariationRes.draw({ canvas, context, mouse });\n                drawRuns++;\n                if (result !== -1 && checkDrawLimit()) {\n                    animationId = requestAnimationFrame(render);\n                }\n            };\n\n            // https://stackoverflow.com/questions/19764018/controlling-fps-with-requestanimationframe\n            const renderAtFps = () => {\n                if (rendering) {\n                    animationId = window.requestAnimationFrame(renderAtFps);\n                }\n\n                const now = Date.now();\n                const elapsed = now - lastAnimationFrameTime;\n\n                if (elapsed > targetFpsInterval) {\n                    lastAnimationFrameTime = now - (elapsed % targetFpsInterval);\n                    const result = currentVariationRes.draw({ canvas, context, mouse });\n                    drawRuns++;\n                    if (result === -1 || (currentDrawLimit && drawRuns >= currentDrawLimit)) {\n                        rendering = false;\n                    }\n                }\n            };\n\n            if (!fps) {\n                animationId = window.requestAnimationFrame(render);\n            } else {\n                lastAnimationFrameTime = Date.now();\n                animationId = window.requestAnimationFrame(renderAtFps);\n            }\n        };\n\n        if (!hasStarted) {\n            window.addEventListener('load', startSketch);\n        } else {\n            startSketch();\n        }\n    };\n\n    const stop = () => {\n        window.cancelAnimationFrame(animationId);\n    };\n\n    const getVariationName = () => {\n        const seed = getRandomSeed();\n        let name = 'untitled';\n        if (\n            currentVariationRes &&\n            currentVariationRes.hasOwnProperty('config') &&\n            currentVariationRes.config.hasOwnProperty('name')\n        ) {\n            name = currentVariationRes.config.name;\n        }\n        return `sketch-${name}-${seed}`;\n    };\n\n    const windowResize = (evt) => {\n        // resizeCanvas(canvas, context, window.innerWidth * canvasSizeFraction, window.innerHeight * canvasSizeFraction);\n        if (animationId) {\n            stop();\n            run(currentVariationFn);\n        }\n    };\n    window.addEventListener('resize', windowResize);\n\n    return {\n        variationName: getVariationName,\n        canvas: getCanvas,\n        context: getContext,\n        mouse: getMouse,\n        run,\n        stop,\n        s: sketch,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport { pointDistance, randomNumberBetween, lerp, pointAngleFromVelocity, clamp } from './math';\nimport { Vector } from './Vector';\n\nconst MAX_COORD_HISTORY = 30;\n\nexport class Particle {\n    #x;\n\n    #y;\n\n    #color;\n\n    constructor(values) {\n        this.initValues(values);\n    }\n\n    initValues({\n        index,\n        x,\n        y,\n        velocityX,\n        velocityY,\n        accelerationX,\n        accelerationY,\n        radius,\n        mass,\n        color,\n        alpha,\n        rotation,\n        lifetime,\n        drawFn,\n        updateFn,\n        colorFn,\n        ...rest\n    }) {\n        this.props = rest;\n        this.index = index || 0;\n        this.#x = x || 0;\n        this.#y = y || 0;\n        this.xHistory = [x];\n        this.yHistory = [y];\n        this.oX = x || this.oX;\n        this.oY = y || this.oY;\n        this.velocityX = velocityX || 0;\n        this.velocityY = velocityY || 0;\n        this.accelerationX = accelerationX || 0;\n        this.accelerationY = accelerationY || 0;\n        this.mass = mass || 1;\n        this.radius = radius || 1;\n        this.#color = color ? tinycolor(color) : tinycolor({ r: 255, g: 255, b: 255 });\n        this.rotation = rotation || 0;\n        this.lifetime = lifetime || 1;\n        // this.drawFn = drawFn;\n        // this.updateFn = updateFn;\n        // must always return a string\n        this.colorFn = colorFn;\n    }\n\n    get color() {\n        if (this.colorFn) {\n            return tinycolor(this.colorFn(this));\n        }\n        return this.#color;\n    }\n\n    set color(value) {\n        this.#color = tinycolor(value);\n    }\n\n    get colorStr() {\n        if (this.colorFn) {\n            const res = this.colorFn(this);\n            if (typeof res !== 'string') {\n                console.warn('Particle color fn must return a string!');\n                return '#ff0000';\n            }\n            return res;\n        }\n        return this.#color.toRgbString();\n    }\n\n    get x() {\n        return this.#x;\n    }\n\n    set x(value) {\n        this.#x = value;\n        this.xHistory.unshift(value);\n        if (this.xHistory.length > MAX_COORD_HISTORY) {\n            this.xHistory = this.xHistory.slice(0, MAX_COORD_HISTORY);\n        }\n    }\n\n    get y() {\n        return this.#y;\n    }\n\n    set y(value) {\n        this.#y = value;\n        this.yHistory.unshift(value);\n        if (this.yHistory.length > MAX_COORD_HISTORY) {\n            this.yHistory = this.yHistory.slice(0, MAX_COORD_HISTORY);\n        }\n    }\n\n    get velocity() {\n        return new Vector(this.velocityX, this.velocityY, 0);\n    }\n\n    set velocity({ x, y }) {\n        this.velocityX = x;\n        this.velocityY = y;\n    }\n\n    get acceleration() {\n        return new Vector(this.accelerationX, this.accelerationY, 0);\n    }\n\n    set acceleration({ x, y }) {\n        this.accelerationX = x;\n        this.accelerationY = y;\n    }\n\n    // Rotation angle to point in direction of velocity\n    get heading() {\n        return pointAngleFromVelocity(this);\n    }\n\n    reverseVelocityX() {\n        this.velocityX *= -1;\n    }\n\n    reverseVelocityY() {\n        this.velocityY *= -1;\n    }\n\n    updatePosWithVelocity() {\n        this.x += this.velocity.x;\n        this.y += this.velocity.y;\n    }\n\n    applyForce(fVect) {\n        const fV = fVect.div(this.mass);\n        const aV = this.acceleration.add(fV);\n        const pV = this.velocity.add(aV);\n        this.acceleration = aV;\n        this.velocity = pV;\n    }\n\n    // https://www.youtube.com/watch?v=WBdhAuWS6X8\n    friction(mu = 0.1) {\n        const normal = this.mass;\n        const vfriction = this.velocity\n            .normalize()\n            .mult(-1)\n            .setMag(mu * normal);\n        this.applyForce(vfriction);\n    }\n\n    // https://www.youtube.com/watch?v=DxFDgOYEoy8\n    drag(coefficent = 0.1) {\n        const area = 1; // this.radius;\n        const velUnit = this.velocity.normalize().mult(-1);\n        const speed = this.velocity.magSq() * area * coefficent;\n        const vdrag = velUnit.setMag(speed);\n        this.applyForce(vdrag);\n    }\n\n    // https://www.youtube.com/watch?v=EpgB3cNhKPM\n    // mode 1 is attract, -1 is repel\n    // const attractor = { x: canvas.width / 2, y: canvas.height / 2, mass: 50, g: 1 };\n    attract({ x, y, mass, g }, mode = 1, affectDist = 1000) {\n        if (pointDistance({ x, y }, { x: this.x, y: this.y }) < affectDist) {\n            g = g || 1;\n            const dir = new Vector(x, y).sub(new Vector(this.x, this.y));\n            const distanceSq = clamp(50, 5000, dir.magSq());\n            const strength = (mode * (g * (mass * this.mass))) / distanceSq;\n            const force = dir.setMag(strength);\n            this.applyForce(force);\n        }\n    }\n\n    // draw() {\n    //     this.drawFn(this);\n    // }\n    //\n    // update() {\n    //     this.updateFn(this);\n    //     this.draw(this);\n    // }\n}\n\n//----------------------------------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------------------------------\n\nexport const createRandomParticleValues = ({ width, height }) => {\n    const vel = 2;\n    const radius = randomNumberBetween(5, 10);\n    return {\n        radius,\n        x: randomNumberBetween(0, width),\n        y: randomNumberBetween(0, height),\n        mass: randomNumberBetween(1, 10),\n        velocityX: randomNumberBetween(-vel, vel),\n        velocityY: randomNumberBetween(-vel, vel),\n        accelerationX: 0,\n        accelerationY: 0,\n        rotation: randomNumberBetween(-180, 180),\n        color: { r: randomNumberBetween(100, 255), g: randomNumberBetween(100, 255), b: randomNumberBetween(100, 255) },\n    };\n};\n\n//----------------------------------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------------------------------\n\nexport const edgeBounce = ({ width, height }, particle) => {\n    if (particle.x + particle.radius > width) {\n        particle.reverseVelocityX();\n        particle.x = width - particle.radius;\n    }\n    if (particle.x - particle.radius < 0) {\n        particle.reverseVelocityX();\n        particle.x = particle.radius;\n    }\n    if (particle.y + particle.radius > height) {\n        particle.reverseVelocityY();\n        particle.y = height - particle.radius;\n    }\n    if (particle.y - particle.radius < 0) {\n        particle.reverseVelocityY();\n        particle.y = particle.radius;\n    }\n};\n\nexport const edgeWrap = ({ width, height }, particle) => {\n    if (particle.x + particle.radius > width) {\n        particle.x = 0 + particle.radius;\n    } else if (particle.x - particle.radius < 0) {\n        particle.x = width - particle.radius;\n    }\n    if (particle.y + particle.radius > height) {\n        particle.y = 0 + particle.radius;\n    } else if (particle.y - particle.radius < 0) {\n        particle.y = height - particle.radius;\n    }\n};\n","import tinycolor from 'tinycolor2';\nimport { normalizeInverse, pointDistance } from './math';\nimport { drawLine, resetStyles } from './canvas';\n\nexport const drawParticlePoint = (context) => ({ x, y, radius, color }) => {\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    context.fillStyle = color.toRgbString();\n    context.fill();\n};\nexport const drawRotatedParticle = (ctx, drawFn, particle, ...args) => {\n    const pSaveX = particle.x;\n    const pSaveY = particle.y;\n    particle.x = 0;\n    particle.y = 0;\n    ctx.save();\n    ctx.translate(pSaveX, pSaveY);\n    ctx.rotate(particle.heading);\n    drawFn(ctx)(particle, args);\n    ctx.restore();\n    particle.x = pSaveX;\n    particle.y = pSaveY;\n};\nexport const connectParticles = (context) => (pArray, proximity, useAlpha = true) => {\n    const len = pArray.length;\n    for (let a = 0; a < len; a++) {\n        // all consecutive particles\n        for (let b = a; b < len; b++) {\n            const pA = pArray[a];\n            const pB = pArray[b];\n            const distance = pointDistance(pA, pB);\n            if (distance < proximity) {\n                const pColor = pA.color;\n                if (useAlpha) {\n                    pColor.setAlpha(normalizeInverse(0, proximity, distance));\n                }\n                context.strokeStyle = pColor.toHslString();\n                drawLine(context)(pA.x, pA.y, pB.x, pB.y, 0.5);\n            }\n        }\n    }\n    resetStyles(context);\n};\nexport const drawPointTrail = (context) => (particle) => {\n    const trailLen = particle.xHistory.length;\n    context.lineWidth = particle.radius;\n    const pColor = particle.color;\n    const aFade = (100 / trailLen) * 0.01;\n    let alpha = 1;\n    const sFade = (particle.radius * 2) / trailLen;\n    let stroke = particle.radius * 2;\n    for (let i = 0; i < trailLen; i++) {\n        const startX = i === 0 ? particle.x : particle.xHistory[i - 1];\n        const startY = i === 0 ? particle.y : particle.yHistory[i - 1];\n        drawLine(context)(startX, startY, particle.xHistory[i], particle.yHistory[i], stroke);\n        pColor.setAlpha(alpha);\n        context.strokeStyle = pColor.toRgbString();\n        alpha -= aFade;\n        stroke -= sFade;\n    }\n};\nexport const drawParticleVectors = (context) => (particle) => {\n    const vmult = 5;\n    const amult = 100;\n    const vel = 'green';\n    const acc = 'yellow';\n    const { velocity } = particle;\n    const { acceleration } = particle;\n\n    context.strokeStyle = tinycolor(vel).toRgbString();\n    drawLine(context)(particle.x, particle.y, particle.x + velocity.x * vmult, particle.y + velocity.y * vmult, 1);\n\n    context.strokeStyle = tinycolor(acc).toRgbString();\n    drawLine(context)(\n        particle.x,\n        particle.y,\n        particle.x + acceleration.x * amult,\n        particle.y + acceleration.y * amult,\n        1\n    );\n};\nexport const drawMouse = (context) => ({ x, y, radius }) => {\n    if (x === undefined || y === undefined) return;\n    context.strokeStyle = 'rgba(255,255,255,.25)';\n    context.lineWidth = 1;\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    context.fillStyle = 'rgba(255,255,255,.1)';\n    context.fill();\n    context.stroke();\n};\nexport const drawAttractor = (context) => ({ x, y, mass, g }, mode, radius) => {\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    context.fillStyle = 'rgba(0,0,0,.1)';\n    context.fill();\n\n    context.beginPath();\n    context.arc(x, y, Math.sqrt(mass) * g, 0, Math.PI * 2, false);\n    context.fillStyle = mode === 1 ? 'rgba(0,255,0,.25)' : 'rgba(255,0,0,.25)';\n    context.fill();\n};\n","import { edgeBounce, Particle, createRandomParticleValues } from '../lib/Particle';\nimport { clearCanvas, fillCanvas } from '../lib/canvas';\nimport { normalizeInverse, pointDistance } from '../lib/math';\nimport { connectParticles, drawMouse, drawParticlePoint, drawPointTrail } from '../lib/canvas-particles';\n\nconst gravityPoint = (mult = 0.2, f = 1) => (x, y, radius, particle) => {\n    const distance = pointDistance({ x, y }, particle);\n    if (distance < radius) {\n        const dx = x - particle.x;\n        const dy = y - particle.y;\n        const forceDirectionX = dx / distance;\n        const forceDirectionY = dy / distance;\n        const force = normalizeInverse(0, radius, distance) * f * mult;\n        const tempX = forceDirectionX * force * particle.radius * 2;\n        const tempY = forceDirectionY * force * particle.radius * 2;\n        particle.x += tempX;\n        particle.y += tempY;\n    }\n};\n\n// for moving points, push away/around from point\nconst avoidPoint = (point, particle, f = 1) => {\n    gravityPoint(1, (f *= -1))(point.x, point.y, point.radius, particle);\n};\n\n// for moving points, pull towards point\nconst attractPoint = (point, particle, f = 1) => {\n    gravityPoint(1, f)(point.x, point.y, point.radius, particle);\n};\n\n// Based on https://www.youtube.com/watch?v=d620nV6bp0A\nexport const variation1 = () => {\n    const numParticles = 100;\n    const particlesArray = [];\n\n    let canvasCenterX;\n    let canvasCenterY;\n    let centerRadius;\n\n    const setup = ({ canvas, context }) => {\n        canvasCenterX = canvas.width / 2;\n        canvasCenterY = canvas.height / 2;\n        centerRadius = canvas.height / 4;\n\n        for (let i = 0; i < numParticles; i++) {\n            const props = createRandomParticleValues(canvas);\n            props.radius = 5;\n            particlesArray.push(new Particle(props));\n        }\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        fillCanvas(canvas, context)();\n\n        for (let i = 0; i < numParticles; i++) {\n            particlesArray[i].updatePosWithVelocity();\n            edgeBounce(canvas, particlesArray[i]);\n            avoidPoint({ radius: centerRadius, x: canvasCenterX, y: canvasCenterY }, particlesArray[i], 4);\n            attractPoint(mouse, particlesArray[i], mouse.isDown ? -1 : 1);\n            drawParticlePoint(context)(particlesArray[i]);\n            drawPointTrail(context)(particlesArray[i]);\n        }\n        connectParticles(context)(particlesArray, 200);\n        drawMouse(context)(mouse);\n    };\n\n    return {\n        setup,\n        draw,\n    };\n};\n","import { Particle, createRandomParticleValues } from '../lib/Particle';\nimport { clearCanvas } from '../lib/canvas';\nimport { normalizeInverse, pointDistance, randomNumberBetween } from '../lib/math';\nimport { connectParticles, drawMouse, drawParticlePoint } from '../lib/canvas-particles';\n\nconst gravityPoint = (mult = 0.2, f = 1) => (x, y, radius, particle) => {\n    const distance = pointDistance({ x, y }, particle);\n    if (distance < radius) {\n        const dx = x - particle.x;\n        const dy = y - particle.y;\n        const forceDirectionX = dx / distance;\n        const forceDirectionY = dy / distance;\n        const force = normalizeInverse(0, radius, distance) * f * mult;\n        const tempX = forceDirectionX * force * particle.radius * 2;\n        const tempY = forceDirectionY * force * particle.radius * 2;\n        particle.x += tempX;\n        particle.y += tempY;\n    }\n};\n\n// for moving points, push away/around from point\nconst avoidPoint = (point, particle, f = 1) => {\n    gravityPoint(1, (f *= -1))(point.x, point.y, point.radius, particle);\n};\n\n// Based on https://www.youtube.com/watch?v=j_BgnpMPxzM\nexport const variation2 = () => {\n    const config = {\n        friction: 0.8,\n        gravity: 1,\n        decay: 0.05,\n        tweenDamp: 0.1,\n        margin: 50,\n        intensity: 0,\n        numParticles: 200,\n    };\n\n    const particlesArray = [];\n\n    const setup = ({ canvas, context }) => {\n        for (let i = 0; i < config.numParticles; i++) {\n            particlesArray.push(new Particle(createRandomParticleValues(canvas)));\n        }\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        clearCanvas(canvas, context)();\n\n        for (let i = 0; i < config.numParticles; i++) {\n            particlesArray[i].radius -= config.decay;\n            if (particlesArray[i].radius <= 0) {\n                const props = createRandomParticleValues(canvas);\n                props.x = mouse.x + randomNumberBetween(-10, 10);\n                props.y = mouse.y + randomNumberBetween(-10, 10);\n                particlesArray[i].initValues(props);\n            }\n            particlesArray[i].y += particlesArray[i].mass * (mouse.isDown ? 1 : 0.2);\n            particlesArray[i].mass += 0.2 * config.gravity;\n            if (\n                particlesArray[i].y + particlesArray[i].radius > canvas.height ||\n                particlesArray[i].y - particlesArray[i].radius < 0\n            ) {\n                particlesArray[i].mass *= -1;\n            }\n\n            avoidPoint(mouse, particlesArray[i]);\n            // attractPoint(psMouseCoords(), particlesArray[i]);\n            drawParticlePoint(context)(particlesArray[i]);\n            // drawPointTrail(context)(particlesArray[i]);\n        }\n        connectParticles(context)(particlesArray, 100);\n        drawMouse(context)(mouse);\n\n        return 1;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import domokunPng from '../../media/images/domokun.png';\nimport { clearCanvas, drawSquareFilled, background } from '../lib/canvas';\nimport { normalizeInverse, pointDistance, randomNumberBetween, scalePointToCanvas } from '../lib/math';\nimport { Particle } from '../lib/Particle';\nimport { drawMouse } from '../lib/canvas-particles';\n\nconst pointPush = (point, particle, f = 1) => {\n    const dx = point.x - particle.x;\n    const dy = point.y - particle.y;\n    const distance = pointDistance(point, particle);\n    const forceDirectionX = dx / distance;\n    const forceDirectionY = dy / distance;\n    const force = normalizeInverse(0, point.radius, distance) * f;\n    particle.velocityX = forceDirectionX * force * particle.mass * 0.8;\n    particle.velocityY = forceDirectionY * force * particle.mass * 0.8;\n\n    if (distance < point.radius) {\n        particle.x -= particle.velocityX;\n        particle.y -= particle.velocityY;\n    } else {\n        // TODO if < 1 then snap to 0\n        if (particle.x !== particle.oX) {\n            particle.x -= (particle.x - particle.oX) * 0.1;\n        }\n        if (particle.y !== particle.oY) {\n            particle.y -= (particle.y - particle.oY) * 0.1;\n        }\n    }\n};\n\nconst getImageDataFromImage = (context) => (image) => {\n    context.drawImage(image, 0, 0);\n    return context.getImageData(0, 0, image.width, image.width);\n};\n\nconst getImageDataColor = (imageData, x, y) => ({\n    r: imageData.data[y * 4 * imageData.width + x * 4],\n    g: imageData.data[y * 4 * imageData.width + x * 4 + 1],\n    b: imageData.data[y * 4 * imageData.width + x * 4 + 2],\n    a: imageData.data[y * 4 * imageData.width + x * 4 + 3],\n});\n\n// Based on https://www.youtube.com/watch?v=afdHgwn1XCY\nexport const domokun = (_) => {\n    const config = {\n        width: 600,\n        height: 600,\n    };\n\n    let numParticles;\n    const imageSize = 100; // square\n    const png = new Image();\n    png.src = domokunPng;\n    const particlesArray = [];\n\n    const setup = ({ canvas, context }) => {\n        const imageData = getImageDataFromImage(context)(png);\n        clearCanvas(canvas, context)();\n\n        const imageZoomFactor = canvas.width / imageSize;\n        const cropColor = 255 / 2;\n\n        for (let y = 0, { height } = imageData; y < height; y++) {\n            for (let x = 0, { width } = imageData; x < width; x++) {\n                const pxColor = getImageDataColor(imageData, x, y);\n                if (pxColor.a > cropColor) {\n                    const points = scalePointToCanvas(\n                        canvas.width,\n                        canvas.height,\n                        imageData.width,\n                        imageData.height,\n                        imageZoomFactor,\n                        x,\n                        y\n                    );\n                    const pX = points.x;\n                    const pY = points.y;\n                    const mass = randomNumberBetween(2, 12);\n                    const color = pxColor;\n                    const radius = imageZoomFactor;\n                    particlesArray.push(new Particle({ x: pX, y: pY, mass, color, radius }));\n                }\n            }\n        }\n\n        numParticles = particlesArray.length;\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        background(canvas, context)('yellow');\n\n        for (let i = 0; i < numParticles; i++) {\n            pointPush(mouse, particlesArray[i], mouse.isDown ? -1 : 1);\n            drawSquareFilled(context)(\n                particlesArray[i].x,\n                particlesArray[i].y,\n                particlesArray[i].radius,\n                particlesArray[i].color\n            );\n        }\n        // drawMouse(context)(mouse);\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import { createRandomParticleValues, Particle } from '../lib/Particle';\nimport { fillCanvas } from '../lib/canvas';\nimport { normalizeInverse, pointDistance } from '../lib/math';\nimport { connectParticles, drawParticlePoint } from '../lib/canvas-particles';\n\nconst pointPush = (point, particle, f = 1) => {\n    const dx = point.x - particle.x;\n    const dy = point.y - particle.y;\n    const distance = pointDistance(point, particle);\n    const forceDirectionX = dx / distance;\n    const forceDirectionY = dy / distance;\n    const force = normalizeInverse(0, point.radius, distance) * f;\n    particle.velocityX = forceDirectionX * force * particle.mass * 0.8;\n    particle.velocityY = forceDirectionY * force * particle.mass * 0.8;\n\n    if (distance < point.radius) {\n        particle.x -= particle.velocityX;\n        particle.y -= particle.velocityY;\n    } else {\n        // TODO if < 1 then snap to 0\n        if (particle.x !== particle.oX) {\n            particle.x -= (particle.x - particle.oX) * 0.1;\n        }\n        if (particle.y !== particle.oY) {\n            particle.y -= (particle.y - particle.oY) * 0.1;\n        }\n    }\n};\n\nexport const variation4 = () => {\n    const config = {\n        numParticles: 0,\n    };\n\n    const particlesArray = [];\n    const circles = [];\n\n    const setup = ({ canvas, context }) => {\n        const centerX = canvas.width / 2;\n        const centerY = canvas.height / 2;\n        const diameter = canvas.height / 4;\n        const steps = 10;\n\n        for (let theta = 0; theta < 360; theta += steps) {\n            const rad = theta * (Math.PI / 180);\n            const x = Math.cos(rad) * diameter + centerX;\n            const y = Math.sin(rad) * diameter + centerY;\n            circles.push([x, y]);\n            const props = createRandomParticleValues(canvas);\n            props.x = x;\n            props.y = y;\n            props.radius = 1;\n            props.color = { r: 0, g: 0, b: 0 };\n            props.index = circles.length - 1;\n            particlesArray.push(new Particle(props));\n        }\n        config.numParticles = particlesArray.length;\n        fillCanvas(canvas, context)(1, '255,255,255');\n    };\n\n    // will run every frame\n    const draw = ({ canvas, context, mouse }) => {\n        fillCanvas(canvas, context)(0.005, '255,255,255');\n        for (let i = 0; i < config.numParticles; i++) {\n            pointPush(mouse, particlesArray[i], mouse.isDown ? -1 : 5);\n            drawParticlePoint(context)(particlesArray[i]);\n            // let index = particlesArray[i].index + 1;\n            // if(index === circles.length) {\n            //     index = 0;\n            // }\n            // particlesArray[i].x = circles[index][0];\n            // particlesArray[i].y = circles[index][1];\n            // particlesArray.index = index;\n        }\n        connectParticles(context)(particlesArray, 200);\n        return 1; // -1 to exit animation loop\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import { edgeBounce, Particle, createRandomParticleValues } from '../lib/Particle';\nimport { fillCanvas } from '../lib/canvas';\nimport { normalizeInverse, pointDistance, randomNumberBetween } from '../lib/math';\nimport { connectParticles, drawParticlePoint } from '../lib/canvas-particles';\n\nconst gravityPoint = (mult = 0.2, f = 1) => (x, y, radius, particle) => {\n    const distance = pointDistance({ x, y }, particle);\n    if (distance < radius) {\n        const dx = x - particle.x;\n        const dy = y - particle.y;\n        const forceDirectionX = dx / distance;\n        const forceDirectionY = dy / distance;\n        const force = normalizeInverse(0, radius, distance) * f * mult;\n        const tempX = forceDirectionX * force * particle.radius * 2;\n        const tempY = forceDirectionY * force * particle.radius * 2;\n        particle.x += tempX;\n        particle.y += tempY;\n    }\n};\n\n// for moving points, push away/around from point\nconst avoidPoint = (point, particle, f = 1) => {\n    gravityPoint(1, (f *= -1))(point.x, point.y, point.radius, particle);\n};\n\nexport const variation5 = () => {\n    const config = {\n        numParticles: 50,\n    };\n\n    const particlesArray = [];\n    const circles = [];\n\n    const setup = ({ canvas, context }) => {\n        for (let i = 0; i < config.numParticles; i++) {\n            const props = createRandomParticleValues(canvas);\n            props.x = canvas.width / 2;\n            props.y = canvas.height / 2;\n            props.color = { r: 0, g: 0, b: 0 };\n            props.radius = 0.5;\n            particlesArray.push(new Particle(props));\n        }\n        const centerX = canvas.width / 2;\n        const centerY = canvas.height / 2;\n        const diameter = canvas.height / 4;\n        const steps = 30;\n        for (let theta = 0; theta < 360; theta += steps) {\n            const rad = theta * (Math.PI / 180);\n            const x = Math.cos(rad) * diameter + centerX;\n            const y = Math.sin(rad) * diameter + centerY;\n            circles.push([x, y, randomNumberBetween(20, 100)]);\n        }\n        fillCanvas(canvas, context)(1, '255,255,255');\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        // fillCanvas(canvas, context)(.005,'255,255,255');\n        for (let i = 0; i < config.numParticles; i++) {\n            particlesArray[i].updatePosWithVelocity();\n            edgeBounce(canvas, particlesArray[i]);\n            for (let c = 0; c < circles.length; c++) {\n                avoidPoint({ radius: circles[c][2], x: circles[c][0], y: circles[c][1] }, particlesArray[i], 4);\n            }\n            drawParticlePoint(context)(particlesArray[i]);\n        }\n        connectParticles(context)(particlesArray, 50);\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import { Particle, createRandomParticleValues, edgeBounce } from '../lib/Particle';\nimport { fillCanvas } from '../lib/canvas';\nimport { drawParticlePoint } from '../lib/canvas-particles';\nimport { normalizeInverse, pointDistance, mapRange } from '../lib/math';\n\nconst gravityPoint = (mult = 0.2, f = 1) => (x, y, radius, particle) => {\n    const distance = pointDistance({ x, y }, particle);\n    if (distance < radius) {\n        const dx = x - particle.x;\n        const dy = y - particle.y;\n        const forceDirectionX = dx / distance;\n        const forceDirectionY = dy / distance;\n        const force = normalizeInverse(0, radius, distance) * f * mult;\n        const tempX = forceDirectionX * force * particle.radius * 2;\n        const tempY = forceDirectionY * force * particle.radius * 2;\n        particle.x += tempX;\n        particle.y += tempY;\n    }\n};\n\n// Based on https://www.youtube.com/watch?v=j_BgnpMPxzM\nexport const variation6 = () => {\n    const numParticles = 200;\n    const particlesArray = [];\n    let hue = 0;\n\n    const setup = ({ canvas, context }) => {\n        for (let i = 0; i < numParticles; i++) {\n            const props = createRandomParticleValues(canvas);\n            props.color = { r: 255, g: 255, b: 255 };\n            particlesArray.push(new Particle(props));\n        }\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        fillCanvas(canvas, context)(0.08);\n        if (hue++ > 361) hue = 0;\n        for (let i = 0; i < numParticles; i++) {\n            particlesArray[i].radius -= 0.05;\n            if (particlesArray[i].radius <= 0) {\n                const initValues = createRandomParticleValues(canvas);\n                initValues.x = mouse.x ? mouse.x : canvas.width / 2;\n                initValues.y = mouse.y ? mouse.y : canvas.height / 2;\n                // let h = lerpRange(0,canvas.width,100,200,initValues.x);\n                const s = mapRange(0, 10, 0, 100, initValues.radius);\n                const l = mapRange(0, 10, 25, 75, initValues.radius);\n                initValues.color = `hsl(${hue},${s}%,${l}%)`;\n                particlesArray[i].initValues(initValues);\n            }\n            particlesArray[i].updatePosWithVelocity();\n            edgeBounce(canvas, particlesArray[i]);\n\n            gravityPoint()(canvas.width / 2, canvas.height, 2000, particlesArray[i]);\n            // gravityPoint({x:canvas.width/2, y:canvas.height}, particlesArray[i])\n            drawParticlePoint(context)(particlesArray[i]);\n        }\n        // connectParticles(context)(particlesArray, 100);\n        return 1;\n    };\n\n    return {\n        setup,\n        draw,\n    };\n};\n","import { edgeBounce, Particle, createRandomParticleValues } from '../lib/Particle';\nimport { background } from '../lib/canvas';\nimport { drawParticlePoint, drawRotatedParticle } from '../lib/canvas-particles';\n\nconst drawRake = (context) => ({ x, y, radius, color }, spacing) => {\n    const points = 5;\n    spacing |= radius * 3;\n    for (let i = 0; i < points; i++) {\n        drawParticlePoint(context)({ x: x + spacing * i, y, radius, color });\n    }\n};\n\nexport const rainbowRakeOrbit = () => {\n    const config = {\n        // width: 700,\n        // height: 700,\n        // fps: 30,\n    };\n\n    const numParticles = 50;\n    const particlesArray = [];\n\n    const attractor = { x: canvas.width / 2, y: canvas.height / 2, mass: 100, g: 20 };\n\n    let canvasCenterX;\n    let canvasCenterY;\n    let centerRadius;\n\n    const setup = ({ canvas, context }) => {\n        canvasCenterX = canvas.width / 2;\n        canvasCenterY = canvas.height / 2;\n        centerRadius = canvas.height / 4;\n\n        for (let i = 0; i < numParticles; i++) {\n            const props = createRandomParticleValues(canvas);\n            props.radius = 1; // Math.sqrt(props.mass);\n            particlesArray.push(new Particle(props));\n        }\n    };\n\n    // const targetX = mouse.x ? mouse.x : canvas.width / 2;\n    // const targetY = mouse.y ? mouse.y : canvas.height / 2;\n    // accelerateToPoint(targetX, targetY, particlesArray[i]);\n    // https://www.youtube.com/watch?v=T84AWnntxZA\n    // const accelerateToPoint = (targetX, targetY, particle) => {\n    //     const magnitude = 0.001;\n    //     const vLimit = 5;\n    //     const accX = ((targetX - particle.x) * magnitude) / particle.mass;\n    //     const accY = ((targetY - particle.y) * magnitude) / particle.mass;\n    //     particle.velocityX += accX;\n    //     particle.velocityY += accY;\n    //     particle.velocityX = clamp(-vLimit, vLimit, particle.velocityX);\n    //     particle.velocityY = clamp(-vLimit, vLimit, particle.velocityY);\n    // };\n\n    const draw = ({ canvas, context, mouse }) => {\n        background(canvas, context)({ r: 0, g: 0, b: 50, a: 0.01 });\n\n        let mode = 1;\n\n        attractor.x = mouse.x ? mouse.x : canvasCenterX;\n        attractor.y = mouse.y ? mouse.y : canvasCenterY;\n\n        for (let i = 0; i < numParticles; i++) {\n            if (mouse.isDown) {\n                mode = -1;\n            } else {\n                mode = 1;\n            }\n            particlesArray[i].attract(attractor, mode, 2000);\n            particlesArray[i].velocity = particlesArray[i].velocity.limit(20);\n            particlesArray[i].updatePosWithVelocity();\n            edgeBounce(canvas, particlesArray[i]);\n            drawRotatedParticle(context, drawRake, particlesArray[i]);\n            particlesArray[i].acceleration = { x: 0, y: 0 };\n        }\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import { create2dNoiseAbs } from './math';\n\n// [[x,y], ...]\nexport const createCirclePoints = (offsetX, offsetY, radius, steps, close = true) => {\n    const startAngle = 270;\n    const maxAngle = 360 + startAngle;\n    const points = [];\n    for (let angle = startAngle; angle < maxAngle; angle += steps) {\n        const theta = angle * (Math.PI / 180);\n        const x = Math.cos(theta) * radius + offsetX;\n        const y = Math.sin(theta) * radius + offsetY;\n        points.push([x, y]);\n    }\n    if (false && close) {\n        const theta = maxAngle - 1 * (Math.PI / 180);\n        const x = Math.cos(theta) * radius + offsetX;\n        const y = Math.sin(theta) * radius + offsetY;\n        points.push([x, y]);\n    }\n    return points;\n};\nexport const createGridPointsXY = (width, height, xMargin, yMargin, columns, rows) => {\n    const gridPoints = [];\n\n    const colStep = Math.round((width - xMargin * 2) / (columns - 1));\n    const rowStep = Math.round((height - yMargin * 2) / (rows - 1));\n\n    for (let col = 0; col < columns; col++) {\n        const x = xMargin + col * colStep;\n        for (let row = 0; row < rows; row++) {\n            const y = yMargin + row * rowStep;\n            gridPoints.push([x, y]);\n        }\n    }\n\n    return { points: gridPoints, columnWidth: colStep, rowHeight: rowStep };\n};\nexport const createGridCellsXY = (width, height, columns, rows, margin = 0, gutter = 0) => {\n    const points = [];\n\n    const colStep = Math.ceil((width - margin * 2 - gutter * (columns - 1)) / columns);\n    const rowStep = Math.ceil((height - margin * 2 - gutter * (rows - 1)) / rows);\n\n    for (let row = 0; row < rows; row++) {\n        const y = margin + row * rowStep + gutter * row;\n        for (let col = 0; col < columns; col++) {\n            const x = margin + col * colStep + gutter * col;\n            points.push([x, y]);\n        }\n    }\n\n    return { points, columnWidth: colStep, rowHeight: rowStep };\n};\n// -> [{radius, rotation, position:[u,v]}, ...]\nexport const createGridPointsUV = (columns, rows) => {\n    rows = rows || columns;\n    const points = [];\n\n    const amplitude = 0.1;\n    const frequency = 1;\n\n    for (let x = 0; x < columns; x++) {\n        for (let y = 0; y < rows; y++) {\n            const u = columns <= 1 ? 0.5 : x / (columns - 1);\n            const v = columns <= 1 ? 0.5 : y / (rows - 1);\n            // const radius = Math.abs(random.gaussian() * 0.02);\n            const radius = create2dNoiseAbs(u, v);\n            const rotation = create2dNoiseAbs(u, v);\n            points.push({\n                radius,\n                rotation,\n                position: [u, v],\n            });\n        }\n    }\n    return points;\n};\n","import { createRandomNumberArray, mapRange } from '../lib/math';\nimport { Particle, createRandomParticleValues } from '../lib/Particle';\nimport { background } from '../lib/canvas';\nimport { connectParticles, drawParticlePoint } from '../lib/canvas-particles';\nimport { createGridPointsXY } from '../lib/grids';\n\nexport const threeAttractors = () => {\n    const config = {\n        // width: 500,\n        // height: 500,\n        // fps: 24,\n    };\n\n    let numParticles;\n    const particlesArray = [];\n    let gridPoints = [];\n    const hue = 0;\n\n    let attractorDist;\n\n    let leftattractor;\n    let midattractor;\n    let rightattractor;\n\n    let canvasCenterX;\n    let canvasCenterY;\n    let centerRadius;\n\n    const setup = ({ canvas, context }) => {\n        canvasCenterX = canvas.width / 2;\n        canvasCenterY = canvas.height / 2;\n        centerRadius = canvas.height / 4;\n\n        attractorDist = canvas.width / 0.7;\n\n        leftattractor = { x: 0, y: canvas.height / 2, mass: 10, g: 3 };\n        midattractor = { x: canvas.width / 2, y: canvas.height / 2, mass: 50, g: 10 };\n        rightattractor = { x: canvas.width, y: canvas.height / 2, mass: 10, g: 3 };\n\n        gridPoints = createGridPointsXY(canvas.width, canvas.height, 100, 100, canvas.width / 50, canvas.height / 50)\n            .points;\n        numParticles = gridPoints.length;\n\n        for (let i = 0; i < numParticles; i++) {\n            const props = createRandomParticleValues(canvas);\n            props.x = gridPoints[i][0];\n            props.y = gridPoints[i][1];\n            props.velocityX = 0;\n            props.velocityY = 0;\n            props.mass = 1;\n            props.radius = 1; // randomNumberBetween(10, 30);\n            props.spikes = createRandomNumberArray(20, 0, 360);\n\n            const h = mapRange(0, canvas.width, 0, 90, props.x);\n            const s = 100; // lerpRange(0,10,0,100,prop.radius);\n            const l = 50; // lerpRange(0,10,25,75,prop.radius);\n            props.color = `hsla(${h},${s}%,${l}%,0.1)`;\n\n            // props.color = { r: 0, g: 0, b: 0, a: 0.1 };\n\n            particlesArray.push(new Particle(props));\n        }\n\n        background(canvas, context)('white');\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        // background(canvas, context)({ r: 255, g: 255, b: 255, a: 0.001 });\n        for (let i = 0; i < numParticles; i++) {\n            particlesArray[i].attract(leftattractor, -1, attractorDist);\n            particlesArray[i].attract(midattractor, 1, attractorDist);\n            particlesArray[i].attract(rightattractor, -1, attractorDist);\n\n            particlesArray[i].velocity = particlesArray[i].velocity.limit(10);\n\n            particlesArray[i].updatePosWithVelocity();\n            // edgeBounce(canvas, particlesArray[i]);\n            drawParticlePoint(context)(particlesArray[i]);\n        }\n        connectParticles(context)(particlesArray, 50, false);\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import sourcePng from '../../media/images/hi1.png';\nimport { clearCanvas, drawSquareFilled, background } from '../lib/canvas';\nimport { createRandomParticleValues, edgeWrap, Particle } from '../lib/Particle';\nimport { createRandomNumberArray, mapRange, randomNumberBetween } from '../lib/math';\nimport { connectParticles, drawParticlePoint } from '../lib/canvas-particles';\nimport { createGridPointsXY } from '../lib/grids';\n\nconst getImageDataFromImage = (context) => (image) => {\n    context.drawImage(image, 0, 0);\n    return context.getImageData(0, 0, image.width, image.width);\n};\n\nconst getImageDataColor = (imageData, x, y) => ({\n    r: imageData.data[y * 4 * imageData.width + x * 4],\n    g: imageData.data[y * 4 * imageData.width + x * 4 + 1],\n    b: imageData.data[y * 4 * imageData.width + x * 4 + 2],\n    a: imageData.data[y * 4 * imageData.width + x * 4 + 3],\n});\n\nexport const hiImage01 = (_) => {\n    const config = {\n        width: 600,\n        height: 600,\n    };\n\n    let imageZoomFactor;\n    const png = new Image();\n    png.src = sourcePng;\n    let imageData;\n\n    const numParticles = 500;\n    const particlesArray = [];\n    const particleColor = { r: 252, g: 3, b: 152 };\n\n    const setup = ({ canvas, context }) => {\n        imageData = getImageDataFromImage(context)(png);\n        clearCanvas(canvas, context)();\n        imageZoomFactor = canvas.width / imageData.width;\n\n        for (let i = 0; i < numParticles; i++) {\n            const props = createRandomParticleValues(canvas);\n            props.radius = randomNumberBetween(1, 5);\n            props.color = particleColor;\n            if (i % 2) {\n                props.x = 0;\n            } else {\n                props.x = canvas.width;\n            }\n            particlesArray.push(new Particle(props));\n        }\n\n        background(canvas, context)({ r: 255, g: 255, b: 0 });\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        background(canvas, context)({ r: 255, g: 255, b: 0, a: 0.004 });\n\n        for (let i = 0; i < numParticles; i++) {\n            particlesArray[i].updatePosWithVelocity();\n            edgeWrap(canvas, particlesArray[i]);\n\n            const pxColor = getImageDataColor(\n                imageData,\n                Math.round(particlesArray[i].x / imageZoomFactor),\n                Math.round(particlesArray[i].y / imageZoomFactor)\n            );\n\n            if (pxColor.r > 250) {\n                particlesArray[i].drag(0.001);\n                particlesArray[i].color = { r: 3, g: 227, b: 252 };\n            } else {\n                particlesArray[i].color = particleColor;\n            }\n\n            drawParticlePoint(context)(particlesArray[i]);\n        }\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","module.exports=[[\"#69d2e7\",\"#a7dbd8\",\"#e0e4cc\",\"#f38630\",\"#fa6900\"],[\"#fe4365\",\"#fc9d9a\",\"#f9cdad\",\"#c8c8a9\",\"#83af9b\"],[\"#ecd078\",\"#d95b43\",\"#c02942\",\"#542437\",\"#53777a\"],[\"#556270\",\"#4ecdc4\",\"#c7f464\",\"#ff6b6b\",\"#c44d58\"],[\"#774f38\",\"#e08e79\",\"#f1d4af\",\"#ece5ce\",\"#c5e0dc\"],[\"#e8ddcb\",\"#cdb380\",\"#036564\",\"#033649\",\"#031634\"],[\"#490a3d\",\"#bd1550\",\"#e97f02\",\"#f8ca00\",\"#8a9b0f\"],[\"#594f4f\",\"#547980\",\"#45ada8\",\"#9de0ad\",\"#e5fcc2\"],[\"#00a0b0\",\"#6a4a3c\",\"#cc333f\",\"#eb6841\",\"#edc951\"],[\"#e94e77\",\"#d68189\",\"#c6a49a\",\"#c6e5d9\",\"#f4ead5\"],[\"#3fb8af\",\"#7fc7af\",\"#dad8a7\",\"#ff9e9d\",\"#ff3d7f\"],[\"#d9ceb2\",\"#948c75\",\"#d5ded9\",\"#7a6a53\",\"#99b2b7\"],[\"#ffffff\",\"#cbe86b\",\"#f2e9e1\",\"#1c140d\",\"#cbe86b\"],[\"#efffcd\",\"#dce9be\",\"#555152\",\"#2e2633\",\"#99173c\"],[\"#343838\",\"#005f6b\",\"#008c9e\",\"#00b4cc\",\"#00dffc\"],[\"#413e4a\",\"#73626e\",\"#b38184\",\"#f0b49e\",\"#f7e4be\"],[\"#ff4e50\",\"#fc913a\",\"#f9d423\",\"#ede574\",\"#e1f5c4\"],[\"#99b898\",\"#fecea8\",\"#ff847c\",\"#e84a5f\",\"#2a363b\"],[\"#655643\",\"#80bca3\",\"#f6f7bd\",\"#e6ac27\",\"#bf4d28\"],[\"#00a8c6\",\"#40c0cb\",\"#f9f2e7\",\"#aee239\",\"#8fbe00\"],[\"#351330\",\"#424254\",\"#64908a\",\"#e8caa4\",\"#cc2a41\"],[\"#554236\",\"#f77825\",\"#d3ce3d\",\"#f1efa5\",\"#60b99a\"],[\"#5d4157\",\"#838689\",\"#a8caba\",\"#cad7b2\",\"#ebe3aa\"],[\"#8c2318\",\"#5e8c6a\",\"#88a65e\",\"#bfb35a\",\"#f2c45a\"],[\"#fad089\",\"#ff9c5b\",\"#f5634a\",\"#ed303c\",\"#3b8183\"],[\"#ff4242\",\"#f4fad2\",\"#d4ee5e\",\"#e1edb9\",\"#f0f2eb\"],[\"#f8b195\",\"#f67280\",\"#c06c84\",\"#6c5b7b\",\"#355c7d\"],[\"#d1e751\",\"#ffffff\",\"#000000\",\"#4dbce9\",\"#26ade4\"],[\"#1b676b\",\"#519548\",\"#88c425\",\"#bef202\",\"#eafde6\"],[\"#5e412f\",\"#fcebb6\",\"#78c0a8\",\"#f07818\",\"#f0a830\"],[\"#bcbdac\",\"#cfbe27\",\"#f27435\",\"#f02475\",\"#3b2d38\"],[\"#452632\",\"#91204d\",\"#e4844a\",\"#e8bf56\",\"#e2f7ce\"],[\"#eee6ab\",\"#c5bc8e\",\"#696758\",\"#45484b\",\"#36393b\"],[\"#f0d8a8\",\"#3d1c00\",\"#86b8b1\",\"#f2d694\",\"#fa2a00\"],[\"#2a044a\",\"#0b2e59\",\"#0d6759\",\"#7ab317\",\"#a0c55f\"],[\"#f04155\",\"#ff823a\",\"#f2f26f\",\"#fff7bd\",\"#95cfb7\"],[\"#b9d7d9\",\"#668284\",\"#2a2829\",\"#493736\",\"#7b3b3b\"],[\"#bbbb88\",\"#ccc68d\",\"#eedd99\",\"#eec290\",\"#eeaa88\"],[\"#b3cc57\",\"#ecf081\",\"#ffbe40\",\"#ef746f\",\"#ab3e5b\"],[\"#a3a948\",\"#edb92e\",\"#f85931\",\"#ce1836\",\"#009989\"],[\"#300030\",\"#480048\",\"#601848\",\"#c04848\",\"#f07241\"],[\"#67917a\",\"#170409\",\"#b8af03\",\"#ccbf82\",\"#e33258\"],[\"#aab3ab\",\"#c4cbb7\",\"#ebefc9\",\"#eee0b7\",\"#e8caaf\"],[\"#e8d5b7\",\"#0e2430\",\"#fc3a51\",\"#f5b349\",\"#e8d5b9\"],[\"#ab526b\",\"#bca297\",\"#c5ceae\",\"#f0e2a4\",\"#f4ebc3\"],[\"#607848\",\"#789048\",\"#c0d860\",\"#f0f0d8\",\"#604848\"],[\"#b6d8c0\",\"#c8d9bf\",\"#dadabd\",\"#ecdbbc\",\"#fedcba\"],[\"#a8e6ce\",\"#dcedc2\",\"#ffd3b5\",\"#ffaaa6\",\"#ff8c94\"],[\"#3e4147\",\"#fffedf\",\"#dfba69\",\"#5a2e2e\",\"#2a2c31\"],[\"#fc354c\",\"#29221f\",\"#13747d\",\"#0abfbc\",\"#fcf7c5\"],[\"#cc0c39\",\"#e6781e\",\"#c8cf02\",\"#f8fcc1\",\"#1693a7\"],[\"#1c2130\",\"#028f76\",\"#b3e099\",\"#ffeaad\",\"#d14334\"],[\"#a7c5bd\",\"#e5ddcb\",\"#eb7b59\",\"#cf4647\",\"#524656\"],[\"#dad6ca\",\"#1bb0ce\",\"#4f8699\",\"#6a5e72\",\"#563444\"],[\"#5c323e\",\"#a82743\",\"#e15e32\",\"#c0d23e\",\"#e5f04c\"],[\"#edebe6\",\"#d6e1c7\",\"#94c7b6\",\"#403b33\",\"#d3643b\"],[\"#fdf1cc\",\"#c6d6b8\",\"#987f69\",\"#e3ad40\",\"#fcd036\"],[\"#230f2b\",\"#f21d41\",\"#ebebbc\",\"#bce3c5\",\"#82b3ae\"],[\"#b9d3b0\",\"#81bda4\",\"#b28774\",\"#f88f79\",\"#f6aa93\"],[\"#3a111c\",\"#574951\",\"#83988e\",\"#bcdea5\",\"#e6f9bc\"],[\"#5e3929\",\"#cd8c52\",\"#b7d1a3\",\"#dee8be\",\"#fcf7d3\"],[\"#1c0113\",\"#6b0103\",\"#a30006\",\"#c21a01\",\"#f03c02\"],[\"#000000\",\"#9f111b\",\"#b11623\",\"#292c37\",\"#cccccc\"],[\"#382f32\",\"#ffeaf2\",\"#fcd9e5\",\"#fbc5d8\",\"#f1396d\"],[\"#e3dfba\",\"#c8d6bf\",\"#93ccc6\",\"#6cbdb5\",\"#1a1f1e\"],[\"#f6f6f6\",\"#e8e8e8\",\"#333333\",\"#990100\",\"#b90504\"],[\"#1b325f\",\"#9cc4e4\",\"#e9f2f9\",\"#3a89c9\",\"#f26c4f\"],[\"#a1dbb2\",\"#fee5ad\",\"#faca66\",\"#f7a541\",\"#f45d4c\"],[\"#c1b398\",\"#605951\",\"#fbeec2\",\"#61a6ab\",\"#accec0\"],[\"#5e9fa3\",\"#dcd1b4\",\"#fab87f\",\"#f87e7b\",\"#b05574\"],[\"#951f2b\",\"#f5f4d7\",\"#e0dfb1\",\"#a5a36c\",\"#535233\"],[\"#8dccad\",\"#988864\",\"#fea6a2\",\"#f9d6ac\",\"#ffe9af\"],[\"#2d2d29\",\"#215a6d\",\"#3ca2a2\",\"#92c7a3\",\"#dfece6\"],[\"#413d3d\",\"#040004\",\"#c8ff00\",\"#fa023c\",\"#4b000f\"],[\"#eff3cd\",\"#b2d5ba\",\"#61ada0\",\"#248f8d\",\"#605063\"],[\"#ffefd3\",\"#fffee4\",\"#d0ecea\",\"#9fd6d2\",\"#8b7a5e\"],[\"#cfffdd\",\"#b4dec1\",\"#5c5863\",\"#a85163\",\"#ff1f4c\"],[\"#9dc9ac\",\"#fffec7\",\"#f56218\",\"#ff9d2e\",\"#919167\"],[\"#4e395d\",\"#827085\",\"#8ebe94\",\"#ccfc8e\",\"#dc5b3e\"],[\"#a8a7a7\",\"#cc527a\",\"#e8175d\",\"#474747\",\"#363636\"],[\"#f8edd1\",\"#d88a8a\",\"#474843\",\"#9d9d93\",\"#c5cfc6\"],[\"#046d8b\",\"#309292\",\"#2fb8ac\",\"#93a42a\",\"#ecbe13\"],[\"#f38a8a\",\"#55443d\",\"#a0cab5\",\"#cde9ca\",\"#f1edd0\"],[\"#a70267\",\"#f10c49\",\"#fb6b41\",\"#f6d86b\",\"#339194\"],[\"#ff003c\",\"#ff8a00\",\"#fabe28\",\"#88c100\",\"#00c176\"],[\"#ffedbf\",\"#f7803c\",\"#f54828\",\"#2e0d23\",\"#f8e4c1\"],[\"#4e4d4a\",\"#353432\",\"#94ba65\",\"#2790b0\",\"#2b4e72\"],[\"#0ca5b0\",\"#4e3f30\",\"#fefeeb\",\"#f8f4e4\",\"#a5b3aa\"],[\"#4d3b3b\",\"#de6262\",\"#ffb88c\",\"#ffd0b3\",\"#f5e0d3\"],[\"#fffbb7\",\"#a6f6af\",\"#66b6ab\",\"#5b7c8d\",\"#4f2958\"],[\"#edf6ee\",\"#d1c089\",\"#b3204d\",\"#412e28\",\"#151101\"],[\"#9d7e79\",\"#ccac95\",\"#9a947c\",\"#748b83\",\"#5b756c\"],[\"#fcfef5\",\"#e9ffe1\",\"#cdcfb7\",\"#d6e6c3\",\"#fafbe3\"],[\"#9cddc8\",\"#bfd8ad\",\"#ddd9ab\",\"#f7af63\",\"#633d2e\"],[\"#30261c\",\"#403831\",\"#36544f\",\"#1f5f61\",\"#0b8185\"],[\"#aaff00\",\"#ffaa00\",\"#ff00aa\",\"#aa00ff\",\"#00aaff\"],[\"#d1313d\",\"#e5625c\",\"#f9bf76\",\"#8eb2c5\",\"#615375\"],[\"#ffe181\",\"#eee9e5\",\"#fad3b2\",\"#ffba7f\",\"#ff9c97\"],[\"#73c8a9\",\"#dee1b6\",\"#e1b866\",\"#bd5532\",\"#373b44\"],[\"#805841\",\"#dcf7f3\",\"#fffcdd\",\"#ffd8d8\",\"#f5a2a2\"]];","import tinycolor from 'tinycolor2';\nimport * as nicepalettes from 'nice-color-palettes';\nimport { mapRange, oneOf, randomWholeBetween } from './math';\n\nexport const asTinyColor = (arry) => arry.map((c) => tinycolor(c));\n\nexport const brightest = (arry) => {\n    const colors = asTinyColor(arry);\n    return colors.reduce((acc, c) => {\n        if (c.getBrightness() > acc.getBrightness()) {\n            acc = c;\n        }\n        return acc;\n    }, colors[0]);\n};\n\nexport const darkest = (arry) => {\n    const colors = asTinyColor(arry);\n    return colors.reduce((acc, c) => {\n        if (c.getBrightness() < acc.getBrightness()) {\n            acc = c;\n        }\n        return acc;\n    }, colors[0]);\n};\n\nexport const bicPenBlue = tinycolor('hsl(250,79,29)').clone();\nexport const paperWhite = tinycolor('hsl(53,3,100)').clone();\n\nexport const warmWhite = tinycolor('hsl(42, 14%, 86%)').clone();\nexport const warmPink = tinycolor('hsl(29, 42%, 86%)').clone();\n\n// greys from https://uxdesign.cc/dark-mode-ui-design-the-definitive-guide-part-1-color-53dcfaea5129\nexport const coolGreyDark = tinycolor('#1f2933').clone();\nexport const warmGreyDark = tinycolor('#27241d').clone();\n\nexport const palettes = {\n    greyWarm: [\n        '#faf97f',\n        '#e8e6e1',\n        '#d3cec4',\n        '#b8b2a7',\n        '#a39e93',\n        '#857f72',\n        '#625d52',\n        '#504a40',\n        '#423d33',\n        '#27241d',\n    ],\n    greyCool: [\n        '#f5f7fa',\n        '#e4e7eb',\n        '#cbd2d9',\n        '#9aa5b1',\n        '#7b8794',\n        '#616e7c',\n        '#52606d',\n        '#3e4c59',\n        '#323f4b',\n        '#1f2933',\n    ],\n    pop: ['#ed3441', '#ffd630', '#329fe3', '#154296', '#303030'],\n    '60s_psyc': ['#ffeb00', '#fc0019', '#01ff4f', '#ff01d7', '#5600cc', '#00edf5'],\n    '70s': ['#73BFA3', '#F2DBAE', '#F29829', '#D9631E', '#593C2C'],\n    '80s_pastells': ['#FF3F3F', '#FF48C4', '#F3EA5F', '#C04DF9', '#2BD1FC', '#38CEF6'],\n    '80s_pop': ['#FF82E2', '#70BAFF', '#FED715', '#0037B3', '#FE0879'],\n    '90s': ['#42C8B0', '#4575F3', '#6933B0', '#D36F88', '#FC8D45'],\n    retro_sunset: ['#FFD319', '#FF2975', '#F222FF', '#8C1EFF', '#FF901F'],\n    vapor_wave: ['#F6A3EF', '#50D8EC', '#DD6DFB', '#EECD69', '#6FEAE6'],\n    // https://www.colourlovers.com/palette/694737/Thought_Provoking\n    thought_provoking: [\n        'hsl(46, 75%, 70%)',\n        'hsl(10, 66%, 56%)',\n        'hsl(350, 65%, 46%)',\n        'hsl(336, 40%, 24%)',\n        'hsl(185, 19%, 40%)',\n    ],\n};\n\n// colors sampled from http://roberthodgin.com/project/meander\n// const agedWarmWhite = tinycolor('hsl(42, 43%, 76%)');\n// const tintingColor = tinycolor('hsl(38, 38%, 64%)');\n// const palette = [\n//     tinycolor('hsl(97, 9%, 73%)'),\n//     tinycolor('hsl(51, 7%, 38%)'),\n//     tinycolor('hsl(19, 39%, 47%)'),\n//     tinycolor('hsl(166, 39%, 59%)'),\n// ];\n\nexport const nicePalette = (_) => nicepalettes[randomWholeBetween(0, 99)];\nexport const palette = (_) => palettes[oneOf(Object.keys(palettes))];\n\n// hslFromRange(50, 90,270, v);\nexport const hslFromRange = (y1, x2, y2, v) => {\n    const h = mapRange(0, y1, x2, y2, v);\n    const s = 100;\n    const l = 50;\n    return tinycolor(`hsl(${h},${s}%,${l}%)`);\n};\n\n/*\nColor between 2 defined and a hue spin in the middle to introduce a 3rd\n// Palette from https://www.colourlovers.com/palette/694737/Thought_Provoking\n\nconst colorTop = 'hsl(350, 65%, 46%)';\nconst colorBottom = 'hsl(185, 19%, 40%)';\nconst distFromCenter = Math.abs(mid - currentY);\nconst color = tinycolor.mix(colorTop, colorBottom, mapRange(startY, maxY, 0, 100, currentY));\ncolor.spin(mapRange(0, mid / 2, 60, 0, distFromCenter));\ncolor.brighten(mapRange(0, mid / 2, 50, 0, distFromCenter));\ncolor.darken(mapRange(0, mid, 0, 40, distFromCenter) + randomNumberBetween(0, 30));\n */\n","/*\nCanvas animation timeline based on Canvas Sketch time keeping methods\nhttps://github.com/mattdesl/canvas-sketch/blob/master/docs/animated-sketches.md\n */\n\nexport class Timeline {\n    constructor(fps, loop, duration) {\n        this.fps = fps || 30;\n        this.loop = loop || 0; // total loops\n        this.duration = duration || 1; // duration of each loop in seconds\n        this.totalLoopFrames = this.duration ? this.duration * this.fps : 1;\n        this.iterations = 0; // number of times drawn\n        this.time = 0; // elapsed time in seconds\n        this.playhead = 0; // current progress of the loop between 0 and 1\n        this.frame = 1; // frame of the loop\n        this.elapsedLoops = 0;\n        this.startTime = Date.now();\n    }\n\n    get elapsed() {\n        return Date.now() - this.startTime;\n    }\n\n    onFrame() {\n        this.iterations++;\n        // one frame\n        this.frame++;\n        this.playhead = this.frame / this.totalLoopFrames;\n        if (this.iterations % this.fps === 0) {\n            // a second elapsed\n            this.time++;\n            if (this.frame >= this.totalLoopFrames) {\n                // one loop duration passed\n                this.elapsedLoops++;\n                this.playhead = 0;\n                this.frame = 0;\n                if (this.loop && this.elapsedLoops >= this.loop) {\n                    console.log('End of loops');\n                    return -1;\n                }\n            }\n        }\n        return 1;\n    }\n}\n","import { background, drawLineAngle, setStokeColor } from '../lib/canvas';\nimport { nicePalette } from '../lib/palettes';\nimport { create3dNoiseAbs, marginify, oneOf, toSinValue, uvFromAngle } from '../lib/math';\nimport { Timeline } from '../lib/Timeline';\nimport { createGridPointsUV } from '../lib/grids';\n\nexport const windLines = () => {\n    const config = {\n        width: 600,\n        height: 600,\n        fps: 60,\n    };\n\n    let counter = 0;\n    let grid = createGridPointsUV(15, 15);\n\n    const timeline = new Timeline(config.fps, 0, 5);\n\n    const setup = ({ canvas, context }) => {\n        const colors = nicePalette();\n        grid = grid.map((g) => {\n            g.color = oneOf(colors);\n            return g;\n        });\n        background(canvas, context)('rgba(255,255,255,1');\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        background(canvas, context)('rgba(255,255,255,.1');\n\n        grid.forEach(({ position, rotation, color }) => {\n            const [u, v] = position;\n            const { x, y } = marginify({ margin: 100, u, v, width: canvas.width, height: canvas.height });\n            const t = toSinValue(timeline.playhead) * 0.1;\n            const wave = create3dNoiseAbs(u, v, counter, 3 * t) * 10;\n            const startvect = uvFromAngle((rotation + wave) * -1).setMag(25);\n            setStokeColor(context)(color);\n            drawLineAngle(context)(x + startvect.x, y + startvect.y, rotation + wave, 25, 4, 'round');\n        });\n\n        counter += 0.01;\n        return timeline.onFrame();\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport { background } from '../lib/canvas';\nimport { ratio, orientation } from '../lib/sketch';\nimport { create2dNoiseAbs, mapRange, randomNumberBetween, lowest, highest } from '../lib/math';\n\n/*\nOriginal inspiration\nChurn by Kenny Vaden\nhttps://www.reddit.com/r/generative/comments/lq8r11/churn_r_code/\n */\n\nconst createWave = (width, angle, frequency, amplitude, noise = 1) => {\n    const points = [];\n    const cfrequency = frequency * noise;\n    const camplitude = amplitude * noise;\n\n    for (let i = 0; i < width; i++) {\n        const s = Math.sin((angle + Math.PI * 2 + i) / frequency) * amplitude;\n        const c = Math.cos((angle + Math.PI * 2 + i) / cfrequency) * camplitude;\n        points.push(s + c);\n    }\n\n    return points;\n};\n\n// get the lowest of top and the highest of bottom, height+=that difference\nconst drawWaveLine = (context) => (startx, endx, yorigin, height, topWave, bottomWave, color, dots = true) => {\n    let currentX = startx;\n    let currentY = yorigin;\n\n    const waveColor = color.clone();\n\n    // const highestTop = lowest(topWave);\n    const lineheight = highest(bottomWave) - lowest(topWave) + height;\n\n    const gradient = context.createLinearGradient(0, yorigin, 0, yorigin + lineheight);\n    gradient.addColorStop(0, waveColor.toRgbString());\n    gradient.addColorStop(1, waveColor.darken(20).toRgbString());\n\n    context.strokeStyle = waveColor.darken(70).toRgbString();\n    context.lineWidth = 0.75;\n    context.beginPath();\n\n    context.moveTo(startx, currentY);\n\n    let xstep = (endx - startx) / topWave.length + 1;\n    topWave.forEach((w) => {\n        context.lineTo(currentX, w + currentY);\n        currentX += xstep;\n    });\n\n    currentY += lineheight;\n    context.lineTo(currentX, currentY);\n\n    xstep = (endx - startx) / bottomWave.length + 1;\n    bottomWave.forEach((w) => {\n        context.lineTo(currentX, w + currentY);\n        currentX -= xstep;\n    });\n\n    context.lineTo(startx, currentY);\n\n    if (dots) {\n        context.stroke();\n        context.fillStyle = gradient;\n    } else {\n        context.fillStyle = tinycolor(waveColor).toRgbString();\n    }\n\n    context.fill();\n\n    if (dots) {\n        currentX = startx;\n        currentY = yorigin;\n        xstep = (endx - startx) / topWave.length + 1;\n        const dotColor = color.clone();\n        topWave.forEach((w) => {\n            // if (w <= highestTop * 0.5) {\n            const rnd = randomNumberBetween(0, yorigin);\n            if (rnd < 2) {\n                // context.strokeStyle = tinycolor(waveColor).darken(20).toRgbString();\n                // context.lineWidth = 2;\n                const radius = rnd < 0.008 ? randomNumberBetween(50, 100) : randomNumberBetween(1, 3);\n\n                context.fillStyle = dotColor.lighten(5).toRgbString();\n                context.beginPath();\n                context.arc(\n                    currentX + randomNumberBetween(-50, 50),\n                    w + currentY - randomNumberBetween(5, 50),\n                    radius,\n                    0,\n                    Math.PI * 2,\n                    false\n                );\n                context.fill();\n                context.stroke();\n            }\n            // }\n            currentX += xstep;\n        });\n    }\n};\n\nexport const waves01 = () => {\n    const config = {\n        name: 'waves01',\n        // orientation: orientation.portrait,\n        ratio: ratio.square,\n    };\n\n    let canvasHeight;\n    let canvasMiddle;\n\n    // Palette from https://www.colourlovers.com/palette/694737/Thought_Provoking\n    const colorBackground = 'hsl(46, 75%, 70%)';\n    const colorTop = 'hsl(350, 65%, 46%)';\n    const colorBottom = 'hsl(185, 19%, 40%)';\n\n    const waves = [];\n\n    const waveResolution = 400;\n    let waveRows;\n\n    let incrementY = 1;\n    let startY = 0;\n    let currentY;\n    let maxY;\n\n    let angle = 90;\n    let frequency = 10;\n    let amplitude = 10;\n    let cosOffset = 0;\n\n    const createWavesRow = (idx) => {\n        const mid = waveRows / 2;\n        const distFromCenter = Math.abs(mid - idx);\n\n        angle = mapRange(0, waveRows, 0, 360, idx);\n\n        frequency = mapRange(0, mid, 8, 30, distFromCenter);\n        amplitude = mapRange(0, mid, 15, 20, distFromCenter) + randomNumberBetween(-5, 5);\n\n        const noise = create2dNoiseAbs(angle, idx, amplitude * 0.5, frequency * randomNumberBetween(0, 2));\n        cosOffset = noise / randomNumberBetween(2, 10);\n\n        return {\n            top: createWave(waveResolution, angle, frequency, amplitude, cosOffset),\n            bottom: createWave(waveResolution, angle, frequency, amplitude, cosOffset),\n        };\n    };\n\n    const setup = ({ canvas, context }) => {\n        canvasHeight = canvas.height;\n        canvasMiddle = canvas.height / 2;\n\n        waveRows = canvas.height;\n\n        const buffer = canvas.height / 5;\n        startY = buffer;\n\n        currentY = startY;\n\n        maxY = canvas.height - buffer * 1.5;\n        incrementY = (maxY - startY) / waveRows;\n\n        for (let i = 0; i < waveRows; i++) {\n            waves.push(createWavesRow(i));\n        }\n\n        background(canvas, context)(tinycolor(colorBackground).lighten(20));\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        const mid = canvasMiddle;\n\n        for (let i = 0; i < waves.length; i++) {\n            const distFromCenter = Math.abs(mid - currentY);\n            const color = tinycolor.mix(colorTop, colorBottom, mapRange(startY, maxY, 0, 100, currentY));\n\n            color.spin(mapRange(0, mid / 2, 60, 0, distFromCenter));\n            color.brighten(mapRange(0, mid / 2, 50, 0, distFromCenter));\n            color.darken(mapRange(0, mid, 0, 40, distFromCenter) + randomNumberBetween(0, 30));\n\n            const height = mapRange(startY, maxY, 50, 0, currentY);\n            drawWaveLine(context)(0, canvas.width, currentY, height, waves[i].top, waves[i].bottom, color, true);\n\n            currentY += incrementY;\n        }\n\n        // final white lines at top and bottom to clean up edges\n        // drawWaveLine(context)(0, canvas.width, currentY + rowHeight, 200, topwave, [0], 'white', false);\n        // drawWaveLine(context)(0, canvas.width, -100, 100, topwave, bottomwave, 'white', false);\n\n        return -1;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport { contextScale } from './canvas';\n\n// https://www.cssfontstack.com/\nexport const textStyles = {\n    size: (s) => `${s * contextScale}px \"Helvetica Neue\",Helvetica,Arial,sans-serif`,\n    sansHelvetica: (s) => `${s * contextScale}px \"Helvetica Neue\",Helvetica,Arial,sans-serif`,\n    monoCourier: (s) =>\n        `${s * contextScale}px \"Courier New\", Courier, \"Lucida Sans Typewriter\", \"Lucida Typewriter\", monospace`,\n    monoLucidia: (s) =>\n        `${\n            s * contextScale\n        }px \"Lucida Sans Typewriter\", \"Lucida Console\", monaco, \"Bitstream Vera Sans Mono\", monospace`,\n    serifGeorgia: (s) => `${s * contextScale}px Georgia, Times, \"Times New Roman\", serif`,\n    default: '16px \"Helvetica Neue\",Helvetica,Arial,sans-serif',\n    small: '12px \"Helvetica Neue\",Helvetica,Arial,sans-serif',\n};\nexport const drawTextFilled = (context) => (text, x, y, color, style) => {\n    context.fillStyle = tinycolor(color).toRgbString();\n    context.font = style || textStyles.sansHelvetica(16);\n    context.fillText(text, x, y);\n    // https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics\n    return context.measureText(text);\n};\nexport const setTextAlignLeftTop = (context) => {\n    context.textAlign = 'left';\n    context.textBaseline = 'top';\n};\nexport const setTextAlignAllCenter = (context) => {\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n};\n","import { background, pixel, drawRect, contextScale } from '../lib/canvas';\nimport { create2dNoiseAbs, oneOf, pointDistance, randomWholeBetween, round2 } from '../lib/math';\nimport { brightest, darkest, nicePalette } from '../lib/palettes';\nimport { ratio, scale } from '../lib/sketch';\nimport { drawTextFilled, setTextAlignLeftTop, textStyles } from '../lib/canvas-text';\nimport { createGridCellsXY } from '../lib/grids';\n\nclass Curve {\n    constructor(x, y, radius, angle, speed, noise) {\n        this.x = x;\n        this.y = y;\n        this.originX = x;\n        this.originY = y;\n        this.radius = radius;\n        this.speed = speed || 1;\n        this.angle = angle || 0;\n        this.noise = noise;\n\n        // Randomize some noise possibilities\n        this.xa = oneOf([randomWholeBetween(1, 5), round2(this.noise)]);\n        this.xb = oneOf([randomWholeBetween(1, 5), round2(this.noise)]);\n        this.ya = oneOf([randomWholeBetween(1, 5), round2(this.noise)]);\n        this.yb = oneOf([randomWholeBetween(1, 5), round2(this.noise)]);\n    }\n\n    get size() {\n        return this.radius * 2;\n    }\n\n    get centerX() {\n        return this.originX + this.radius;\n    }\n\n    get centerY() {\n        return this.originY + this.radius;\n    }\n\n    get distFromCenter() {\n        return pointDistance({ x: this.centerX, y: this.centerY }, { x: this.x, y: this.y });\n    }\n}\n\nexport const lissajous01 = () => {\n    const config = {\n        name: 'lissajous01',\n        ratio: ratio.square,\n        scale: scale.hidpi,\n    };\n\n    const renderBatch = 10;\n    const curves = [];\n    let canvasCenterX;\n    let canvasCenterY;\n    let centerRadius;\n    const columns = 3;\n    let margin;\n    const palette = nicePalette();\n    const colorBackground = brightest(palette).clone().lighten(10);\n    const colorCurve = darkest(palette).clone().darken(25);\n    const colorText = colorBackground.clone().darken(15).desaturate(20);\n    let tick = 0;\n    let grid;\n\n    const setup = ({ canvas, context }) => {\n        canvasCenterX = canvas.width / 2;\n        canvasCenterY = canvas.height / 2;\n        centerRadius = canvas.height / 4;\n        margin = 50 * contextScale;\n        if (columns === 1) {\n            curves.push(new Curve(canvasCenterX, canvasCenterY, centerRadius, 0, 0.05));\n        } else {\n            grid = createGridCellsXY(canvas.width, canvas.width, columns, columns, margin, margin / 2);\n            grid.points.forEach((point) => {\n                const x = point[0];\n                const y = point[1];\n                curves.push(new Curve(x, y, grid.columnWidth / 2, 0, 0.05, create2dNoiseAbs(x, y)));\n            });\n        }\n\n        background(canvas, context)(colorBackground);\n    };\n\n    const circleX = (curve, v = 1) => curve.radius * Math.cos(curve.angle * v);\n    const circleY = (curve, v = 1) => curve.radius * Math.sin(curve.angle * v);\n\n    // k is # of petals\n    // https://en.wikipedia.org/wiki/Rose_(mathematics)\n    // http://xahlee.info/SpecialPlaneCurves_dir/Rose_dir/rose.html\n    const roseX = (curve, k = 1, a = 1, b = 1) =>\n        curve.radius * Math.cos(k * curve.angle * a) * Math.cos(curve.angle * b);\n    const roseY = (curve, k = 1, a = 1, b = 1) =>\n        curve.radius * Math.cos(k * curve.angle * a) * Math.sin(curve.angle * b);\n\n    const linearYDown = (curve) => {\n        let { y } = curve;\n        if (++y > curve.size) y = 0;\n        return y;\n    };\n\n    const draw = ({ context }) => {\n        grid.points.forEach((point) => {\n            drawRect(context)(point[0], point[1], grid.columnWidth, grid.rowHeight, 1, colorText);\n        });\n        for (let b = 0; b < renderBatch; b++) {\n            for (let i = 0; i < curves.length; i++) {\n                // const idx = i + 1;\n                // const pointRad = 1;\n                const c = curves[i];\n\n                const k = round2(((i + 1) * 2) / 9);\n\n                const { xa } = c;\n                const { xb } = c;\n                const { ya } = c;\n                const { yb } = c;\n\n                // c.x = circleX(c);\n                // c.y = circleY(c);\n                c.x = roseX(c, k, xa, xb);\n                c.y = roseY(c, k, ya, yb);\n                // c.y = linearYDown(c);\n\n                // TODO, put a/b on the canvas so i can remember them!\n\n                c.angle += c.speed;\n\n                // const h = mapRange(0, c.radius, 180, 270, c.distFromCenter);\n                // const s = 100;\n                // const l = 30;\n                // const a = 0.75;\n                // const color = `hsla(${h},${s}%,${l}%,${a})`;\n\n                pixel(context)(c.x + c.centerX, c.y + c.centerY, colorCurve);\n\n                setTextAlignLeftTop(context);\n                drawTextFilled(context)(\n                    `k=${k}, ${xa}, ${xb}, ${ya}, ${yb}`,\n                    c.originX,\n                    c.originY + c.size + 10,\n                    colorText,\n                    textStyles.size(10)\n                );\n            }\n            tick++;\n        }\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport { pixel, drawCircleFilled } from './canvas';\nimport { mapRange } from './math';\n\nlet lineCap = 'butt';\nlet lineJoin = 'miter';\n\nexport const turtleLineMode = (m = 'butt') => {\n    if (m === 'butt') {\n        lineCap = 'butt';\n        lineJoin = 'miter';\n    } else if (m === 'round') {\n        lineCap = 'round';\n        lineJoin = 'round';\n    }\n};\n\nexport const plotLines = (context) => (points, color = 'black', width = 1) => {\n    context.beginPath();\n    context.strokeStyle = tinycolor(color).toRgbString();\n    context.lineWidth = width;\n    context.lineCap = lineCap;\n    context.lineJoin = lineJoin;\n\n    points.forEach((coords, i) => {\n        if (i === 0) {\n            context.moveTo(coords[0], coords[1]);\n        } else {\n            context.lineTo(coords[0], coords[1]);\n        }\n    });\n    context.stroke();\n};\n\nexport const drawPoints = (ctx) => (points, color = 'black', width = 1) => {\n    points.forEach((coords, i) => {\n        pixel(ctx)(coords[0], coords[1], color, 'circle', width);\n    });\n};\n\nexport const drawConnectedPoints = (ctx) => (points, color = 'black', width = 1, close = false, drawPoint = false) => {\n    ctx.beginPath();\n    ctx.strokeStyle = tinycolor(color).clone().toRgbString();\n\n    ctx.lineWidth = width;\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n\n    points.forEach((coords, i) => {\n        if (i === 0) {\n            ctx.moveTo(coords[0], coords[1]);\n        } else {\n            ctx.lineTo(coords[0], coords[1]);\n        }\n        if (drawPoint) {\n            drawCircleFilled(ctx)(coords[0], coords[1], 1, 'red');\n        }\n    });\n    if (close) {\n        ctx.lineTo(points[0][0], points[0][1]);\n    }\n    ctx.stroke();\n};\n\nexport const drawPointsTaper = (ctx) => (points, color = 'black', width = 1) => {\n    ctx.strokeStyle = tinycolor(color).clone().toRgbString();\n\n    const mid = points.length / 2;\n\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n\n    points.forEach((coords, i) => {\n        const dist = Math.abs(mid - i);\n        const w = mapRange(0, mid, width, 1, dist);\n        ctx.lineWidth = w;\n        ctx.beginPath();\n        ctx.moveTo(coords[0], coords[1]);\n        ctx.lineTo(coords[0], coords[1]);\n        ctx.stroke();\n    });\n};\n\nexport const circleAtPoint = (context) => (points, color = 'black', radius = 5) => {\n    points.forEach((coords) => {\n        drawCircleFilled(context)(coords[0], coords[1], radius, color);\n    });\n};\n\nexport const variableCircleAtPoint = (context) => (points, color = 'black', radius = 5, freq = 10, amp = 2) => {\n    points.forEach((coords) => {\n        const v = Math.sin(coords[0] / freq) * amp;\n        drawCircleFilled(context)(coords[0], coords[1], Math.abs(radius - v), color);\n    });\n};\n\nexport const drawSegment = (ctx) => (segments, color, weight, points = false) => {\n    ctx.lineCap = 'round';\n    // ctx.lineJoin = 'round';\n    ctx.strokeStyle = tinycolor(color).clone().toRgbString();\n    ctx.lineWidth = weight;\n    ctx.beginPath();\n    segments.forEach((seg, i) => {\n        if (i === 0) {\n            ctx.moveTo(seg.start.x, seg.start.y);\n        } else {\n            ctx.lineTo(seg.start.x, seg.start.y);\n        }\n        ctx.lineTo(seg.end.x, seg.end.y);\n    });\n    ctx.stroke();\n    if (points) {\n        segments.forEach((seg, i) => {\n            const rad = i === 0 || i === segments.length - 1 ? 3 : 1;\n            drawCircleFilled(ctx)(seg.start.x, seg.start.y, rad, 'green');\n            drawCircleFilled(ctx)(seg.end.x, seg.end.y, rad, 'red');\n        });\n    }\n};\n\nexport const drawSegmentTaper = (ctx) => (segments, color, maxWeight, minWeight = 1, points = false) => {\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n    ctx.strokeStyle = tinycolor(color).clone().toRgbString();\n\n    const mid = segments.length / 2;\n\n    segments.forEach((seg, i) => {\n        const dist = Math.abs(mid - i);\n        const w = mapRange(0, mid, maxWeight, minWeight, dist);\n\n        ctx.beginPath();\n        ctx.lineWidth = w;\n        if (i === 0) {\n            ctx.moveTo(seg.start.x, seg.start.y);\n        } else {\n            ctx.lineTo(seg.start.x, seg.start.y);\n        }\n        ctx.lineTo(seg.end.x, seg.end.y);\n        ctx.stroke();\n    });\n\n    if (points) {\n        segments.forEach((seg, i) => {\n            const rad = i === 0 || i === segments.length - 1 ? 3 : 1;\n            drawCircleFilled(ctx)(seg.start.x, seg.start.y, rad, 'green');\n            drawCircleFilled(ctx)(seg.end.x, seg.end.y, rad, 'red');\n        });\n    }\n};\n","import tinycolor from 'tinycolor2';\nimport {\n    create2dNoise,\n    create3dNoise,\n    degreesToRadians,\n    mapRange,\n    pointDistance,\n    randomNumberBetween,\n    randomWholeBetween,\n    uvFromAngle,\n} from './math';\nimport { drawRectFilled } from './canvas';\nimport { Particle } from './Particle';\nimport { Vector } from './Vector';\nimport { drawConnectedPoints, drawPoints } from './canvas-linespoints';\n\nconst TAU = Math.PI * 2;\n\nexport const simplexNoise2d = (x, y, f = 0.0005) => create2dNoise(x, y, 1, f) * TAU;\nexport const simplexNoise3d = (x, y, t, f = 0.002) => create3dNoise(x, y, t, 1, f) * TAU;\n\nexport const diagLines = (x, y) => (x + y) * 0.01 * TAU;\n\n// From https://medium.com/@bit101/flow-fields-part-i-3ebebc688fd8\nexport const sinField = (x, y) => (Math.sin(x * 0.01) + Math.sin(y * 0.01)) * TAU;\n\n// random attractor params\nconst a = randomNumberBetween(-2, 2);\nconst b = randomNumberBetween(-2, 2);\nconst c = randomNumberBetween(-2, 2);\nconst d = randomNumberBetween(-2, 2);\n\n// http://paulbourke.net/fractals/clifford/\nexport const cliffordAttractor = (width, height, x, y) => {\n    const scale = 0.01;\n    x = (x - width / 2) * scale;\n    y = (y - height / 2) * scale;\n    const x1 = Math.sin(a * y) + c * Math.cos(a * x);\n    const y1 = Math.sin(b * x) + d * Math.cos(b * y);\n    return Math.atan2(y1 - y, x1 - x);\n};\n\n// http://paulbourke.net/fractals/peterdejong/\nexport const jongAttractor = (width, height, x, y) => {\n    const scale = 0.01;\n    x = (x - width / 2) * scale;\n    y = (y - height / 2) * scale;\n    const x1 = Math.sin(a * y) - Math.cos(b * x);\n    const y1 = Math.sin(c * x) - Math.cos(d * y);\n    return Math.atan2(y1 - y, x1 - x);\n};\n\n// Misc formula\nconst flowAtPoint = (x, y) => {\n    const scale = 0.01;\n    const fromCenter = pointDistance({ x, y }, { x: canvasMidX, y: canvasMidY });\n    const simplex = simplexNoise2d(x, y, 0.01);\n    // const theta = simplex;\n    const theta = (fromCenter + simplex) / 2; // mostly radial around middle\n    // const r1 = (Math.sin(1.2 * x) + 0.2 * Math.atan(2 * y)) * 8 * Math.PI;\n    // const r2 = (Math.pow(x, 2) + 0.8 * Math.pow(y, 1 / 2)) * 8 * Math.PI * 4;\n    // const theta = ((r1 + r2 + simplex) / 3) * 0.001;\n    // const theta = ((Math.cos(x) + x + Math.sin(y)) * 24) % (Math.PI / 2); // wander dl like like\n    // const theta = Math.atan2(y, x); // cones out from top left\n    // const theta = x + y + Math.cos(x * scale) * Math.sin(x * scale); // bl to tr diag and cross perp lines\n    // const theta = Math.cos(x * scale) * Math.sin(x * scale); // vertical lines\n    // const theta = Math.cos(x) * Math.sin(x) * scale; // horizontal lines\n    // const theta = x * Math.sin(y) * scale; // scribble\n    // const theta = Math.sin(x * scale) + Math.sin(y * scale); // diamonds\n    return theta * TAU;\n};\nexport const renderField = ({ width, height }, context, fn, color = 'black', resolution = '50', length = 10) => {\n    const xStep = Math.round(width / resolution);\n    const yStep = Math.round(height / resolution);\n    const xMid = xStep / 2;\n    const yMid = yStep / 2;\n    for (let x = 0; x < width; x += xStep) {\n        for (let y = 0; y < height; y += yStep) {\n            const theta = fn(x, y);\n            const vect = uvFromAngle(theta).setMag(length || xMid);\n            const x1 = x + xMid;\n            const y1 = y + yMid;\n            const x2 = x1 + vect.x;\n            const y2 = y1 + vect.y;\n            context.strokeStyle = tinycolor(color);\n            context.lineWidth = 1;\n            context.beginPath();\n            context.moveTo(x1, y1);\n            context.lineTo(x2, y2);\n            context.stroke();\n        }\n    }\n};\n\nexport const renderFieldColor = (\n    { width, height },\n    context,\n    fn,\n    resolution = '50',\n    lowColor,\n    highColor,\n    noiseMax = 5\n) => {\n    const xStep = Math.round(width / resolution);\n    const yStep = Math.round(height / resolution);\n    for (let x = 0; x < width; x += xStep) {\n        for (let y = 0; y < height; y += yStep) {\n            const theta = fn(x, y);\n            const colorMix = mapRange(0, noiseMax * 2, 0, 100, theta + noiseMax);\n            const fillColor = tinycolor.mix(lowColor, highColor, colorMix);\n            context.fillStyle = tinycolor(fillColor).toRgbString();\n            context.fillRect(x, y, x + xStep, y + yStep);\n        }\n    }\n};\n\nconst valueCloseTo = (testVal, val, range) => {\n    if (val === testVal) return true;\n    if (val - range < testVal && val + range > testVal) return true;\n    return false;\n};\n\n// https://thingonitsown.blogspot.com/2019/02/finding-perlin-contours.html\n// https://codepen.io/crummy/pen/RWRWQe?editors=0010\n// http://bl.ocks.org/blinsay/c8bcfeff0b6159f44aec\n// https://github.com/anvaka/streamlines\n\nexport const renderFieldContour = (\n    { width, height },\n    context,\n    fn,\n    min = -8,\n    max = 8,\n    steps = 30,\n    lowColor = 'black',\n    highColor = 'white',\n    varience = 0.025\n) => {\n    const nsteps = (max - min) / steps;\n    const rpoints = 100000;\n\n    for (let n = min; n < max; n += nsteps) {\n        const lowPoints = [];\n        const highPoints = [];\n        for (let i = 0; i < rpoints; i++) {\n            const px = randomWholeBetween(0, width);\n            const py = randomWholeBetween(0, height);\n            const nheight = fn(px, py);\n            if (valueCloseTo(n, nheight, varience)) {\n                if (nheight <= 0) lowPoints.push([px, py]);\n                else highPoints.push([px, py]);\n\n                // const vect = uvFromAngle(nheight).setMag(5);\n                // const x2 = px + vect.x;\n                // const y2 = py + vect.y;\n                // context.strokeStyle = tinycolor(lowColor);\n                // context.lineWidth = 1;\n                // context.beginPath();\n                // context.moveTo(px, py);\n                // context.lineTo(x2, y2);\n                // context.stroke();\n            }\n        }\n        drawPoints(context)(lowPoints, lowColor, 1);\n        drawPoints(context)(highPoints, highColor, 1);\n    }\n};\n\nfunction renderNoiseContour(startX, startY, borderVal, fn) {\n    const lookRad = 2;\n    let nextX = startX;\n    let nextY = startY;\n    const coords = [];\n    // set color\n    // start shape\n\n    let distance = 0;\n    for (let i = 0; i < 50000; i++) {\n        const lastDistance = distance;\n        const lastX = nextX;\n        const lastY = nextY;\n        for (\n            distance = lastDistance + Math.PI / 2;\n            (distance > lastDistance - Math.PI / 2 && !valueCloseTo(borderVal, fn(startX, startY), 0.0035)) ||\n            distance === lastDistance + Math.PI / 2;\n            distance -= 0.17\n        ) {\n            nextX = lastX + lookRad * Math.cos(distance);\n            nextY = lastY - lookRad * Math.sin(distance);\n        }\n        coords.push([nextX, nextY]);\n        // vertex(nextX - mx + windowWidth / 2, nextY - my + windowHeight / 2)\n\n        if (pointDistance({ x: nextX, y: nextY }, { x: startX, y: startY }) < lookRad && i > 1) {\n            if (i > 4) {\n                // endShape(CLOSE)\n                return coords;\n            }\n            break;\n        }\n    }\n}\n\n/*\nconst plotFFPointLines = (num) => {\n        for (let i = 0; i < num; i++) {\n            const coords = createFFParticleCoords(noise, 0, randomWholeBetween(0, canvasMidY * 2), 2000, 1);\n            drawConnectedPoints(ctx)(coords, tinycolor('rgba(0,0,0,.5'), 1);\n        }\n    };\n */\nexport const createFFParticleCoords = (fieldFn, startX, startY, length, fMag = 1, vlimit = 1) => {\n    const props = {\n        x: startX,\n        y: startY,\n        velocityX: 0,\n        velocityY: 0,\n        mass: 1,\n    };\n    const particle = new Particle(props);\n    const coords = [];\n    for (let i = 0; i < length; i++) {\n        const theta = fieldFn(particle.x, particle.y);\n        // theta = quantize(4, theta);\n        const force = uvFromAngle(theta).setMag(fMag);\n\n        particle.applyForce(force);\n        particle.velocity = particle.velocity.limit(vlimit);\n        particle.updatePosWithVelocity();\n        coords.push([particle.x, particle.y]);\n        particle.acceleration = new Vector(0, 0);\n    }\n    return coords;\n};\n","import tinycolor from 'tinycolor2';\nimport { mapRange, randomWholeBetween, uvFromAngle, snapNumber, quantize } from '../lib/math';\nimport { edgeWrap, Particle, createRandomParticleValues } from '../lib/Particle';\nimport { background, drawCircleFilled } from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { Vector } from '../lib/Vector';\nimport { simplexNoise3d } from '../lib/attractors';\nimport { hslFromRange } from '../lib/palettes';\n\nexport const flowFieldParticles = () => {\n    const config = {\n        name: 'flowFieldParticles',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    const numParticles = 400;\n    const particlesArray = [];\n    const maxSize = 3;\n\n    let time = 0;\n\n    const createRandomParticle = (canvas) => {\n        const props = createRandomParticleValues(canvas);\n        props.x = randomWholeBetween(0, canvas.width);\n        props.y = randomWholeBetween(0, canvas.height);\n        props.velocityX = 0;\n        props.velocityY = 0;\n        return new Particle(props);\n    };\n\n    const setup = ({ canvas, context }) => {\n        for (let i = 0; i < numParticles; i++) {\n            particlesArray.push(createRandomParticle(canvas));\n        }\n\n        background(canvas, context)('rgba(50,50,50,1)');\n    };\n\n    const drawPixel = (canvas, context, force, particle, color, rad = 1) => {\n        particle.applyForce(force);\n        particle.velocity = particle.velocity.limit(1);\n        particle.updatePosWithVelocity();\n        edgeWrap(canvas, particle);\n        const pcolor = color || particle.color;\n        const x = snapNumber(maxSize * 2, particle.x);\n        const y = snapNumber(maxSize * 2, particle.y);\n        drawCircleFilled(context)(x, y, rad, pcolor);\n        return true;\n    };\n\n    const drawParticles = ({ canvas, context }) => {\n        for (let i = 0; i < numParticles; i++) {\n            const particle = particlesArray[i];\n            const sNoise3d = simplexNoise3d(particle.x, particle.y, time, 0.002);\n            const theta = quantize(3, sNoise3d);\n            const force = uvFromAngle(theta);\n            const clr = hslFromRange(5, 270, 360, Math.abs(theta)).setAlpha(0.25);\n            const size = mapRange(0, 5, 1, maxSize, Math.abs(theta));\n\n            drawPixel(canvas, context, force, particle, clr, size);\n\n            particle.acceleration = new Vector(0, 0);\n        }\n    };\n\n    const drawFibers = ({ canvas, context }) => {\n        const particle = createRandomParticle(canvas);\n        const length = 200;\n        for (let i = 0; i < length; i++) {\n            const sNoise3d = simplexNoise3d(particle.x, particle.y, time, 0.002);\n            const theta = sNoise3d;\n            const force = uvFromAngle(theta);\n            const clr = 'rgba(0,0,0,.05)';\n\n            drawPixel(canvas, context, force, particle, clr, 1);\n\n            particle.acceleration = new Vector(0, 0);\n        }\n    };\n\n    const draw = ({ canvas, context }) => {\n        drawFibers({ canvas, context });\n        drawParticles({ canvas, context });\n        time += 0.01;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\n\nimport { background, drawLineAngle } from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { nicePalette, hslFromRange } from '../lib/palettes';\nimport {\n    simplexNoise2d,\n    simplexNoise3d,\n    sinField,\n    cliffordAttractor,\n    jongAttractor,\n    diagLines,\n} from '../lib/attractors';\nimport { mapRange, snapNumber } from '../lib/math';\n\nconst TAU = Math.PI * 2;\n\nconst arc = (context, x, y, size, thick, color, theta) => {\n    const startR = snapNumber(Math.PI / 2, theta);\n    const endR = startR + Math.PI / 2;\n    const clockWise = true;\n\n    context.strokeStyle = tinycolor(color).toRgbString();\n    context.lineCap = 'round';\n    context.lineWidth = thick;\n    context.beginPath();\n    context.arc(x + size, y + size, size, startR, endR, clockWise);\n    context.stroke();\n};\n\nconst circle = (context, x, y, size, color, theta) => {\n    const startR = 0; // snapNumber(Math.PI / 2, theta);\n    const endR = TAU; // startR + Math.PI / 2;\n    const clockWise = true;\n    const rad = mapRange(0, 5, size * 0.2, size * 0.6, Math.abs(theta));\n\n    context.beginPath();\n    context.arc(x + size, y + size, rad, startR, endR, clockWise);\n    context.fillStyle = tinycolor(color).toRgbString();\n    context.fill();\n};\n\nconst line = (context, x, y, size, thick, color, theta) => {\n    const startR = snapNumber(Math.PI / 2, theta) + Math.PI / 2;\n    context.strokeStyle = tinycolor(color).toRgbString();\n    drawLineAngle(context)(x + size, y + size, startR, size * 2, thick, 'round');\n};\n\nexport const flowFieldArcs = () => {\n    const config = {\n        name: 'flowFieldArcs',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    let time = 0;\n    const palette = nicePalette();\n    const colorBackground = tinycolor('rgba(50,50,50,1)');\n\n    const setup = ({ canvas, context }) => {\n        background(canvas, context)(colorBackground);\n    };\n\n    const renderField = ({ width, height }, context, fn, cell) => {\n        const mid = cell / 2;\n        for (let x = 0; x < width; x += cell) {\n            for (let y = 0; y < height; y += cell) {\n                const theta = fn(x, y);\n                const arcColor = hslFromRange(5, 270, 360, Math.abs(theta));\n                const lineColor = hslFromRange(5, 180, 270, Math.abs(theta)).darken(10);\n                line(context, x, y, mid, mid * 0.5, lineColor, theta);\n                circle(context, x, y, mid, lineColor, theta);\n                arc(context, x, y, mid, mid * 0.5, arcColor, theta);\n                arc(context, x, y, mid, mid * 0.1, 'yellow', theta);\n            }\n        }\n    };\n\n    const draw = ({ canvas, context }) => {\n        background(canvas, context)(colorBackground.setAlpha(0.1));\n\n        // const clifford = (x, y) => cliffordAttractor(canvas.width, canvas.height, x, y);\n        // const jong = (x, y) => jongAttractor(canvas.width, canvas.height, x, y);\n        const noise = (x, y) => simplexNoise3d(x, y, time, 0.001);\n\n        renderField(canvas, context, noise, Math.round(canvas.width / 20));\n        time += 0.25;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport { clearCanvas, getImageDataColor } from './canvas';\nimport { averageNumArray, mapRange } from './math';\n\nexport class Bitmap {\n    constructor(src) {\n        this.scaleX = 1;\n        this.scaleY = 1;\n\n        this.image = new Image();\n        this.image.src = src;\n        this.imageData = undefined;\n    }\n\n    get width() {\n        return this.imageData.width;\n    }\n\n    get height() {\n        return this.imageData.height;\n    }\n\n    get data() {\n        return this.imageData;\n    }\n\n    toCanvasX(x) {\n        return Math.round(x * this.scaleX);\n    }\n\n    toCanvasY(y) {\n        return Math.round(y * this.scaley);\n    }\n\n    init(canvas, context, clear = true) {\n        this.canvas = canvas;\n        this.context = context;\n        this.context.drawImage(this.image, 0, 0);\n        this.imageData = context.getImageData(0, 0, this.image.width, this.image.width);\n        this.scaleX = canvas.width / this.imageData.width;\n        this.scaleY = canvas.height / this.imageData.height;\n        if (clear) clearCanvas(canvas, context);\n    }\n\n    pixelColorRaw(x, y) {\n        if (x < 0) x = 0;\n        if (y < 0) y = 0;\n        if (x >= this.width) x = this.width - 1;\n        if (y >= this.height) y = this.height - 1;\n        return {\n            r: this.imageData.data[y * 4 * this.imageData.width + x * 4],\n            g: this.imageData.data[y * 4 * this.imageData.width + x * 4 + 1],\n            b: this.imageData.data[y * 4 * this.imageData.width + x * 4 + 2],\n            a: this.imageData.data[y * 4 * this.imageData.width + x * 4 + 3],\n        };\n    }\n\n    pixelColor(x, y) {\n        return tinycolor(this.pixelColorRaw(x, y));\n    }\n\n    /*\n    Gray = 0.21R + 0.72G + 0.07B // Luminosity\n    Gray = (R + G + B) Ã· 3 // Average Brightness\n    Gray = 0.299R + 0.587G + 0.114B // rec601 standard\n    Gray = 0.2126R + 0.7152G + 0.0722B // ITU-R BT.709 standard\n    Gray = 0.2627R + 0.6780G + 0.0593B // ITU-R BT.2100 standard\n     */\n    // https://sighack.com/post/averaging-rgb-colors-the-right-way\n    pixelAverageGrey(x, y) {\n        const color = this.pixelColorRaw(x, y);\n        return Math.sqrt((color.r * color.r + color.g * color.g + color.b * color.b) / 3);\n    }\n\n    pixelTheta(x, y) {\n        // return this.pixelColor(x, y).getBrightness() / 256;\n        return this.pixelAverageGrey(x, y) / 256;\n    }\n\n    pixelColorFromCanvas(x, y) {\n        return this.pixelColor(Math.round(x / this.scaleX), Math.round(y / this.scaleY));\n    }\n\n    pixelThetaFromCanvas(x, y) {\n        return this.pixelTheta(Math.round(x / this.scaleX), Math.round(y / this.scaleY));\n    }\n\n    sizeFromPixelBrightness(x, y, size = 5, low = 0, max = 255) {\n        const pixelColor = this.pixelColorFromCanvas(x, y);\n        const brightness = 256 - pixelColor.getBrightness();\n        return mapRange(low, max, 0, size, brightness);\n    }\n\n    averageGreyFromCell(x, y, w, h, res = 2) {\n        const points = [];\n        for (let i = x; i < x + w; i += res) {\n            for (let k = y; k < y + h; k += res) {\n                points.push(this.pixelAverageGrey(Math.round(i / this.scaleX), Math.round(k / this.scaleY)));\n            }\n        }\n        return averageNumArray(points);\n    }\n\n    // const createColorArrayFromImageData = (imageData) => {\n    //     const data = [];\n    //     for (let y = 0, { height } = imageData; y < height; y++) {\n    //         for (let x = 0, { width } = imageData; x < width; x++) {\n    //             data.push({ x, y, ...getImageColor(imageData, x, y) });\n    //         }\n    //     }\n    //     return data;\n    // };\n}\n\n/*\nconst renderImage = () => {\n        for (let x = startX; x < maxX; x++) {\n            for (let y = startY; y < maxY; y++) {\n                const color = image.pixelColorFromCanvas(x, y);\n                pixel(ctx)(x, y, color, 'square', 1);\n            }\n        }\n    };\n */\n","// \"paint splatters\" around center point\nimport { randomNumberBetween, randomWholeBetween } from './math';\nimport { drawCircleFilled } from './canvas';\n\nconst TAU = Math.PI * 2;\n\nexport const splatter = (context) => (x, y, color, size, amount = 3, range = 20) => {\n    for (let i = 0; i < amount; i++) {\n        const s = randomWholeBetween(size * 0.25, size * 3);\n        // circle dist\n        const radius = randomWholeBetween(0, range);\n        const angle = randomNumberBetween(0, TAU);\n        const xoff = radius * Math.cos(angle);\n        const yoff = radius * Math.sin(angle);\n        // square dist\n        // const xoff = randomWholeBetween(-range, range);\n        // const yoff = randomWholeBetween(-range, range);\n        drawCircleFilled(context)(x + xoff, y + yoff, s, color);\n    }\n};\n","import tinycolor from 'tinycolor2';\nimport { mapRange, randomWholeBetween, uvFromAngle, snapNumber, quantize, pointDistance } from '../lib/math';\nimport { Particle, createRandomParticleValues } from '../lib/Particle';\nimport { background, drawCircleFilled } from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { Vector } from '../lib/Vector';\nimport { diagLines, renderField, simplexNoise2d, simplexNoise3d } from '../lib/attractors';\nimport { hslFromRange, warmWhite } from '../lib/palettes';\nimport { Bitmap } from '../lib/Bitmap';\nimport sourcePng from '../../media/images/kristijan-arsov-woman-400.png';\nimport { splatter } from '../lib/canvas-paint';\n\n/*\nhttps://marcteyssier.com/projects/flowfield/\nhttps://larrycarlson.com/collections/wavy-art-prints\n */\n\nconst TAU = Math.PI * 2;\n\nexport const flowFieldImage = () => {\n    const config = {\n        name: 'flowFieldImage',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    const maxSize = 5;\n    let time = 0;\n    const backgroundColor = warmWhite;\n    const image = new Bitmap(sourcePng);\n\n    const createRandomParticle = (canvas) => {\n        const props = createRandomParticleValues(canvas);\n        props.x = randomWholeBetween(0, canvas.width);\n        props.y = randomWholeBetween(0, canvas.height);\n        props.velocityX = 0;\n        props.velocityY = 0;\n        return new Particle(props);\n    };\n\n    const imageFlow = (x, y) => image.pixelThetaFromCanvas(x, y) * TAU;\n\n    const setup = ({ canvas, context }) => {\n        image.init(canvas, context);\n        background(canvas, context)(backgroundColor);\n        renderField(canvas, context, imageFlow, 'rgba(0,0,0,.15)', 50, 10);\n    };\n\n    const drawPixel = (canvas, context, particle, color, rad = 1) => {\n        const pcolor = color || particle.color;\n        const { x } = particle;\n        const { y } = particle;\n        drawCircleFilled(context)(x, y, rad, pcolor);\n        return true;\n    };\n\n    const drawParticle = ({ canvas, context }, particle) => {\n        const theta = imageFlow(particle.x, particle.y);\n        const force = uvFromAngle(theta);\n        particle.applyForce(force);\n        particle.velocity = particle.velocity.limit(3);\n        particle.updatePosWithVelocity();\n\n        const fromCenter = pointDistance(particle, { x: canvas.width / 2, y: canvas.height / 2 });\n\n        const imagePixelColor = image.pixelColorFromCanvas(particle.x, particle.y);\n        const imagePixelBrightness = 256 - imagePixelColor.getBrightness();\n        const hslColor = hslFromRange(canvas.width, 90, 270, particle.x).spin(time);\n        const particleColor = tinycolor.mix(hslColor, imagePixelColor, 90);\n        particleColor.desaturate(mapRange(canvas.width / 3, canvas.width / 2, 0, 10, fromCenter));\n\n        const size = mapRange(0, 255, 0, maxSize, imagePixelBrightness);\n        const sizeMult = mapRange(canvas.width / 3, canvas.width / 2, 1, 5, fromCenter);\n\n        drawPixel(canvas, context, particle, particleColor, size * sizeMult);\n\n        if (Math.abs(theta) >= 5.7) {\n            splatter(context)(particle.x, particle.y, particleColor.brighten(10), 1, 3, 100);\n        }\n\n        particle.acceleration = new Vector(0, 0);\n    };\n\n    const drawFibers = ({ canvas, context }) => {\n        const particle = createRandomParticle(canvas);\n        const length = randomWholeBetween(50, 1000);\n        for (let i = 0; i < length; i++) {\n            drawParticle({ canvas, context }, particle);\n        }\n    };\n\n    const draw = ({ canvas, context }) => {\n        drawFibers({ canvas, context });\n        time += 0.05;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport { randomWholeBetween, degreesToRadians, randomPointAround } from '../lib/math';\nimport { background, drawCircleFilled } from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { brightest, darkest, hslFromRange, nicePalette } from '../lib/palettes';\nimport { simplexNoise2d, simplexNoise3d } from '../lib/attractors';\n\n/*\nStarted here but took a detour\nhttps://www.reddit.com/r/creativecoding/comments/lx9prx/audiovisual_sound_of_space_solar_system_david/\n */\n\nconst TAU = Math.PI * 2;\n\nexport const radialNoise = () => {\n    const config = {\n        name: 'radialNoise',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    let canvasMidX;\n    let canvasMidY;\n    let maxRadius;\n    let radiusScale;\n    let currentRadiusSize = 360;\n\n    let originX;\n    let originY;\n    let time = 0;\n    let angle = 0;\n\n    const history = {};\n\n    const palette = nicePalette();\n    const backgroundColor = brightest(palette).clone().lighten(10);\n    const imageColor = darkest(palette).clone();\n\n    // let imageZoomFactor;\n    // const png = new Image();\n    // png.src = sourcePng;\n    // let imageData;\n\n    const setup = ({ canvas, context }) => {\n        canvasMidX = canvas.width / 2;\n        canvasMidY = canvas.height / 2;\n        maxRadius = canvas.width * 0.4;\n        radiusScale = currentRadiusSize / maxRadius;\n\n        originX = canvasMidX;\n        originY = canvasMidY;\n\n        // imageData = getImageDataFromImage(context)(png);\n        // clearCanvas(canvas, context)();\n        // imageZoomFactor = 360 / imageData.width;\n\n        background(canvas, context)(backgroundColor);\n    };\n\n    const drawPixel = (context, x, y, color, size = 1, heading = 0) => {\n        drawCircleFilled(context)(x, y, size, color);\n    };\n\n    const drawLine = (context, x1, y1, x2, y2, color, strokeWidth = 1) => {\n        context.strokeStyle = tinycolor(color).toRgbString();\n        context.lineWidth = strokeWidth;\n        context.beginPath();\n        context.moveTo(x1, y1);\n        context.lineTo(x2, y2);\n        context.stroke();\n    };\n\n    const circleX = (r, a, v = 1) => r * Math.cos(a * v);\n    const circleY = (r, a, v = 1) => r * Math.sin(a * v);\n\n    const draw = ({ canvas, context }) => {\n        for (let radius = 0; radius < currentRadiusSize; radius++) {\n            let ox;\n            let oy;\n\n            if (history.hasOwnProperty(radius)) {\n                ox = history[radius].x;\n                oy = history[radius].y;\n            }\n\n            const radScaled = radius / radiusScale;\n            const a = 1;\n            const b = 1;\n            const radians = degreesToRadians(angle) - Math.PI / 8;\n            let x = originX + circleX(radScaled, radians, a);\n            let y = originY + circleY(radScaled, radians, b);\n\n            const noise = simplexNoise3d(x, y, time, 0.02);\n            x += noise;\n            y += noise;\n\n            const monoColor = imageColor.clone().spin(time * 0.1);\n\n            if (ox !== undefined && oy !== undefined) {\n                drawLine(context, ox, oy, x, y, monoColor, 0.5);\n            }\n\n            history[radius] = { x, y };\n\n            time += 0.01;\n        }\n\n        angle += 3;\n\n        if (angle > 360) {\n            angle = 0;\n\n            currentRadiusSize = randomWholeBetween(100, 360);\n            radiusScale = 1; // currentRadiusSize / maxRadius;\n\n            const offs = randomPointAround((canvas.width - maxRadius) * 0.75);\n            originX = canvasMidX + offs.x;\n            originY = canvasMidY + offs.y;\n            background(canvas, context)(backgroundColor.setAlpha(0.25));\n        }\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport random from 'canvas-sketch-util/random';\nimport { randomWholeBetween, uvFromAngle, oneOf, randomPointAround, randomBoolean } from '../lib/math';\nimport { Particle } from '../lib/Particle';\nimport { background } from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { palettes } from '../lib/palettes';\nimport { Vector } from '../lib/Vector';\nimport { simplexNoise2d, simplexNoise3d, cliffordAttractor, jongAttractor, renderField } from '../lib/attractors';\n\n/*\nBased on\nhttps://tylerxhobbs.com/essays/2020/flow-fields\n */\n\nconst drawRibbonPoint = (context, point, i, thickness = 0, height = 0) => {\n    const x = point[0];\n    const y = point[1];\n    const jitterX = 0; // Math.cos(i * 0.05) * height;\n    const jitterY = 0; // Math.sin(i * 0.05) * height;\n    context.lineTo(x + thickness + jitterX, y + thickness + jitterY);\n};\n\nconst drawRibbon = (context) => (sideA, sideB, color, stroke = false, thickness = 1) => {\n    const startx = sideA[0][0];\n    const starty = sideA[0][1];\n    const endx = sideB[0][0] + thickness;\n    const endy = sideB[0][1] + thickness;\n\n    const rColor = tinycolor(color).clone();\n    const gradient = context.createLinearGradient(0, starty - thickness, 0, endy + thickness);\n    gradient.addColorStop(0, rColor.toRgbString());\n    gradient.addColorStop(1, rColor.clone().darken(20).toRgbString());\n\n    context.beginPath();\n    context.moveTo(startx, starty);\n    sideA.forEach((w, i) => {\n        drawRibbonPoint(context, w, i, 0, thickness * 0.1);\n    });\n    sideB.forEach((w, i) => {\n        drawRibbonPoint(context, w, i, thickness, thickness * 0.1);\n    });\n    context.lineTo(startx, starty);\n\n    if (stroke) {\n        context.strokeStyle = rColor.darken(70).toRgbString();\n        context.lineWidth = 0.75;\n        context.stroke();\n    }\n\n    context.fillStyle = gradient;\n    context.fill();\n};\n\nexport const flowFieldRibbons = () => {\n    const config = {\n        name: 'flowFieldRibbons',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    let canvasMidX;\n    let canvasMidY;\n    const palette = palettes.pop;\n    const backgroundColor = tinycolor('white');\n\n    let time = 0;\n\n    const createRibbon = (fieldFn, startX, startY, length, vlimit = 1) => {\n        const props = {\n            x: startX,\n            y: startY,\n            velocityX: 0,\n            velocityY: 0,\n            mass: 1,\n        };\n        const particle = new Particle(props);\n        const coords = [];\n        for (let i = 0; i < length; i++) {\n            const theta = fieldFn(particle.x, particle.y);\n            // theta = quantize(4, theta);\n            const force = uvFromAngle(theta);\n            particle.applyForce(force);\n            particle.velocity = particle.velocity.limit(vlimit);\n            particle.updatePosWithVelocity();\n            coords.push([particle.x, particle.y]);\n            particle.acceleration = new Vector(0, 0);\n        }\n        return coords;\n    };\n\n    const simplex2d = (x, y) => simplexNoise2d(x, y, 0.0005);\n    const simplex3d = (x, y) => simplexNoise3d(x, y, time, 0.0005);\n    const clifford = (x, y) => cliffordAttractor(canvas.width, canvas.height, x, y);\n    const jong = (x, y) => jongAttractor(canvas.width, canvas.height, x, y);\n    const noise = randomBoolean() ? clifford : jong;\n\n    let maxRadius;\n\n    const setup = ({ canvas, context }) => {\n        canvasMidX = canvas.width / 2;\n        canvasMidY = canvas.height / 2;\n        maxRadius = canvas.width * 0.4;\n\n        background(canvas, context)(backgroundColor);\n\n        renderField(canvas, context, noise, 'rgba(0,0,0,.15)', canvas.width / 10, 5);\n    };\n\n    const ribbonLen = randomWholeBetween(50, 1000);\n    const ribbonThickness = randomWholeBetween(3, 30);\n\n    const draw = ({ canvas, context }) => {\n        const color = oneOf(palette);\n        const len = maxRadius * 2; // ribbonLen;\n\n        const rpoint = random.onCircle(maxRadius); // randomPointAround(maxRadius * 0.4);\n\n        const x = rpoint[0] + canvasMidX;\n        const y = rpoint[1] + canvasMidY;\n        const x2 = x + 2;\n        const y2 = y;\n\n        const sideA = createRibbon(noise, x, y, len, 1);\n        const sideB = createRibbon(noise, x2, y2, len, 1).reverse();\n\n        drawRibbon(context)(sideA, sideB, color, false, ribbonThickness);\n\n        time += 0.01;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport random from 'canvas-sketch-util/random';\nimport { randomWholeBetween, uvFromAngle, oneOf, randomPointAround, randomBoolean } from '../lib/math';\nimport { Particle } from '../lib/Particle';\nimport { background } from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { palettes } from '../lib/palettes';\nimport { Vector } from '../lib/Vector';\nimport { simplexNoise2d, simplexNoise3d, cliffordAttractor, jongAttractor, renderField } from '../lib/attractors';\n\n/*\nBased on\nhttps://tylerxhobbs.com/essays/2020/flow-fields\n */\n\nconst drawRibbonPoint = (context, point, i, thickness = 0, height = 0) => {\n    const x = point[0];\n    const y = point[1];\n    const jitterX = 0; // Math.cos(i * 0.05) * height;\n    const jitterY = 0; // Math.sin(i * 0.05) * height;\n    context.lineTo(x + thickness + jitterX, y + thickness + jitterY);\n};\n\nconst drawRibbonSegment = (context, sideA, sideB, color, stroke = false, thickness = 1) => {\n    const segStartX = sideA[0][0];\n    const segStartY = sideA[0][1];\n    const segEndX = sideB[0][0] + thickness;\n    const segEndY = sideB[0][1] + thickness;\n\n    const rColor = tinycolor(color).clone();\n    const gradient = context.createLinearGradient(0, segStartY - thickness, 0, segEndY + thickness);\n    gradient.addColorStop(0, rColor.toRgbString());\n    gradient.addColorStop(0.5, rColor.toRgbString());\n    gradient.addColorStop(1, rColor.clone().darken(20).saturate(50).toRgbString());\n\n    context.beginPath();\n    context.moveTo(segStartX, segStartY);\n    sideA.forEach((w, i) => {\n        drawRibbonPoint(context, w, i, 0, thickness * 0.1);\n    });\n    sideB.forEach((w, i) => {\n        drawRibbonPoint(context, w, i, thickness, thickness * 0.1);\n    });\n    context.lineTo(segStartX, segStartY);\n\n    if (stroke) {\n        context.strokeStyle = rColor.darken(70).toRgbString();\n        context.lineWidth = 0.75;\n        context.stroke();\n    }\n\n    context.fillStyle = gradient;\n    context.fill();\n};\n\nconst drawRibbon = (context) => (sideA, sideB, color, stroke = false, thickness = 1) => {\n    const segmentGap = 1; // randomWholeBetween(1, 4);\n    const segments = randomWholeBetween(1, 3);\n    // const segmentsStep = Math.ceil((sideA.length - segmentGap * (segments - 1)) / segments);\n    const segmentData = [];\n\n    let left = sideA.length;\n    let start = 0;\n\n    for (let i = 0; i < segments; i++) {\n        const len = randomWholeBetween(1, left / 2);\n        // const start = i * segmentsStep + segmentGap * i;\n        // const len = segmentsStep;\n        segmentData.push({\n            sideA: sideA.slice(start, start + len),\n            sideB: sideB.slice(start, start + len).reverse(),\n        });\n        start += len + segmentGap;\n        left -= len + segmentGap;\n    }\n    segmentData.forEach((s) => {\n        drawRibbonSegment(context, s.sideA, s.sideB, color, stroke, thickness);\n    });\n\n    // drawRibbonSegment(context, segmentStart, segmentLen, sideA, sideB, color, stroke, thickness);\n};\n\nexport const flowFieldRibbons2 = () => {\n    const config = {\n        name: 'flowFieldRibbons',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    let canvasMidX;\n    let canvasMidY;\n    const palette = palettes['80s_pop'];\n    const backgroundColor = tinycolor('white');\n\n    let time = 0;\n\n    const createRibbon = (fieldFn, startX, startY, length, vlimit = 1) => {\n        const props = {\n            x: startX,\n            y: startY,\n            velocityX: 0,\n            velocityY: 0,\n            mass: 1,\n        };\n        const particle = new Particle(props);\n        const coords = [];\n        for (let i = 0; i < length; i++) {\n            const theta = fieldFn(particle.x, particle.y);\n            // theta = quantize(4, theta);\n            const force = uvFromAngle(theta);\n            particle.applyForce(force);\n            particle.velocity = particle.velocity.limit(vlimit);\n            particle.updatePosWithVelocity();\n            coords.push([particle.x, particle.y]);\n            particle.acceleration = new Vector(0, 0);\n        }\n        return coords;\n    };\n\n    const simplex2d = (x, y) => simplexNoise2d(x, y, 0.0001);\n    const simplex3d = (x, y) => simplexNoise3d(x, y, time, 0.0005);\n    const clifford = (x, y) => cliffordAttractor(canvas.width, canvas.height, x, y);\n    const jong = (x, y) => jongAttractor(canvas.width, canvas.height, x, y);\n    const noise = randomBoolean() ? clifford : jong;\n\n    let maxRadius;\n\n    const setup = ({ canvas, context }) => {\n        canvasMidX = canvas.width / 2;\n        canvasMidY = canvas.height / 2;\n        maxRadius = canvas.width * 0.4;\n\n        background(canvas, context)(backgroundColor);\n\n        // renderField(\n        //     canvas,\n        //     context,\n        //     noise,\n        //     tinycolor(oneOf(palette)).lighten(30),\n        //     canvas.width / 10,\n        //     canvas.width / 20\n        // );\n    };\n\n    const ribbonLen = randomWholeBetween(200, 500);\n    const ribbonThickness = randomWholeBetween(100, 300);\n\n    const maxItterations = randomWholeBetween(10, 30);\n    let currentItteration = 0;\n\n    const draw = ({ canvas, context }) => {\n        const color = oneOf(palette);\n        const len = ribbonLen;\n\n        // const rpoint = random.onCircle(maxRadius); // randomPointAround(maxRadius * 0.4);\n        const rpoint = [randomWholeBetween(0, canvas.width), randomWholeBetween(0, canvas.height)];\n\n        const x = rpoint[0];\n        const y = rpoint[1];\n        const x2 = x + 2;\n        const y2 = y;\n\n        const sideA = createRibbon(noise, x, y, len, 1);\n        const sideB = createRibbon(noise, x2, y2, len, 1);\n\n        drawRibbon(context)(sideA, sideB, color, false, ribbonThickness);\n\n        time += 0.01;\n\n        if (++currentItteration > maxItterations) return -1;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","export class Point {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    get toArray() {\n        return [this.x, this.y, this.z];\n    }\n\n    get toObject() {\n        return {\n            x: this.x,\n            y: this.y,\n            z: this.z,\n        };\n    }\n\n    clone() {\n        return new Point(this.x, this.y, this.z);\n    }\n}\n","/*\nFlow field inside?\nParticle physics inside\nBorder\nClip to no overflow?\n */\n\nimport tinycolor from 'tinycolor2';\nimport { randomWholeBetween, randomNormalWholeBetween } from './math';\nimport { defaultValue } from './utils';\nimport { drawRect, drawRectFilled, resetStyles } from './canvas';\nimport { Point } from './Point';\n\nconst defaultMP = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n};\n\nconst defaultFlow = (x, y) => 0;\n\nlet boxIndex = 0;\n\nexport class Box {\n    #backgroundColor;\n\n    constructor(props, children = []) {\n        this.name = `box${boxIndex++}`;\n        this.canvas = props.canvas;\n        this.context = props.context;\n        this.x = props.x;\n        this.y = props.y;\n        this.width = props.width;\n        this.height = props.height;\n        this.rotation = defaultValue(props, 'rotation', 0);\n        this.#backgroundColor = tinycolor(defaultValue(props, 'backgroundColor', 'white'));\n        this.padding = defaultValue(props, 'padding', defaultMP);\n        this.clip = defaultValue(props, 'clip', true);\n        this.flowField = defaultValue(props, 'flowField', defaultFlow);\n        this.children = children;\n    }\n\n    get x2() {\n        return this.x + this.width;\n    }\n\n    get y2() {\n        return this.y + this.height;\n    }\n\n    get innerWidth() {\n        return this.width - this.padding.left - this.padding.right;\n    }\n\n    get innerHeight() {\n        return this.height - this.padding.top - this.padding.bottom;\n    }\n\n    get centerPoint() {\n        return new Point(this.x + Math.round(this.width / 2), this.y + Math.round(this.height / 2));\n    }\n\n    get backgroundColor() {\n        return this.#backgroundColor.clone();\n    }\n\n    set backgroundColor(c) {\n        this.#backgroundColor = tinycolor(c);\n    }\n\n    fill(color) {\n        color = color || this.backgroundColor;\n        drawRectFilled(this.context)(this.x, this.y, this.width, this.height, color);\n    }\n\n    erase() {\n        this.context.clearRect(this.x, this.y, this.width, this.height);\n    }\n\n    outline(thickness, color) {\n        this.context.strokeStyle = tinycolor(color).toRgbString();\n        this.context.lineWidth = thickness;\n        this.context.rect(this.x, this.y, this.width, this.height);\n        this.context.stroke();\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip\n    // https://dustinpfister.github.io/2019/08/14/canvas-save/\n    // https://dustinpfister.github.io/2019/10/08/canvas-clip/\n    createClip() {\n        this.context.save();\n        const region = new Path2D();\n        region.rect(this.x, this.y, this.width, this.height);\n        this.context.clip(region);\n    }\n\n    removeClip() {\n        this.context.restore();\n    }\n\n    translateX(x) {\n        return this.x + x;\n    }\n\n    translateY(y) {\n        return this.y + y;\n    }\n\n    translateInto(point) {\n        return new Point(this.translateX(point.x), this.translateY(point.y));\n    }\n\n    translateOut(point) {\n        return new Point(point.x - this.x, point.y - this.y);\n    }\n\n    randomPointInside(distribution = 'whole') {\n        const edgeBuffer = 10;\n        let point = new Point(\n            randomWholeBetween(edgeBuffer, this.width - edgeBuffer),\n            randomWholeBetween(edgeBuffer, this.height - edgeBuffer)\n        );\n        if (distribution === 'normal') {\n            point = new Point(\n                randomNormalWholeBetween(edgeBuffer, this.width - edgeBuffer),\n                randomNormalWholeBetween(edgeBuffer, this.height - edgeBuffer)\n            );\n        }\n        return point;\n    }\n\n    isInside(point) {\n        return point.x >= this.x && point.x <= this.x2 && point.y >= this.y && point.y <= this.y2;\n    }\n\n    isOutside(point) {\n        return !this.isInside(point);\n    }\n\n    clipPoint(point) {\n        const np = new Point(point.x, point.y);\n        if (point.x < this.x) np.x = this.x;\n        if (point.x > this.x2) np.x = this.x2;\n        if (point.y < this.y) np.y = this.y;\n        if (point.y > this.y2) np.y = this.y2;\n        return np;\n    }\n\n    wrapPoint(point) {\n        const np = new Point(point.x, point.y);\n        if (point.x < this.x) np.x = this.x2;\n        if (point.x > this.x2) np.x = this.x;\n        if (point.y < this.y) np.y = this.y2;\n        if (point.y > this.y2) np.y = this.y;\n        return np;\n    }\n\n    particleEdgeBounce = (particle) => {\n        const psize = particle.radius;\n        if (particle.x + psize > this.x2) {\n            particle.x = this.x2 - psize;\n            particle.reverseVelocityX();\n        }\n        if (particle.x - psize < this.x) {\n            particle.x = this.x + psize;\n            particle.reverseVelocityX();\n        }\n        if (particle.y + psize > this.y2) {\n            particle.y = this.y2 - psize;\n            particle.reverseVelocityY();\n        }\n        if (particle.y - psize < this.y) {\n            particle.y = this.y + psize;\n            particle.reverseVelocityY();\n        }\n    };\n\n    particleEdgeWrap = (particle) => {\n        const psize = particle.radius;\n        if (particle.x + psize > this.x2) {\n            particle.x = this.x + psize;\n        }\n        if (particle.x - psize < this.x) {\n            particle.x = this.x2 - psize;\n        }\n        if (particle.y + psize > this.y2) {\n            particle.y = this.y + psize;\n        }\n        if (particle.y - psize < this.y) {\n            particle.y = this.y2 - psize;\n        }\n    };\n}\n","// More detailed implementation https://blog.wolfram.com/2016/05/06/computational-stippling-can-machines-do-as-well-as-humans/\nimport tinycolor from 'tinycolor2';\nimport {\n    logInterval,\n    mapRange,\n    randomNormalWholeBetween,\n    randomNumberBetween,\n    randomSign,\n    randomWholeBetween,\n    round2,\n} from './math';\nimport { drawRectFilled } from './canvas';\nimport { plotLines } from './canvas-linespoints';\nimport { last } from './utils';\n\nconst TAU = Math.PI * 2;\nconst intervals = logInterval(10, 1, 10);\nlet clipping = true;\n\nexport const setTextureClippingMask = (v = true) => {\n    clipping = v;\n};\n\nconst getRotatedXYCoords = (x, y, length, theta) => ({\n    x1: x,\n    y1: y,\n    x2: x + length * Math.cos(theta),\n    y2: y + length * Math.sin(theta),\n});\n\nconst getRotatedYCoords = (x, y, length, theta) => ({\n    x1: x,\n    y1: y,\n    x2: x + length, // * Math.cos(theta),\n    y2: y + length * Math.sin(theta),\n});\n\nexport const texturizeRect = (context) => (\n    x,\n    y,\n    width,\n    height,\n    color = 'black',\n    amount = 5,\n    mode = 'circles2',\n    mult = 1\n) => {\n    if (amount <= 0) return;\n\n    if (clipping) {\n        context.save();\n        const region = new Path2D();\n        region.rect(x, y, width, height);\n        context.clip(region);\n    }\n\n    const quarter = width / 4;\n    const strokeColor = tinycolor(color).toRgbString();\n    const lineWidth = 1;\n    // const numIttr = mapRange(1, 10, 2, 200, amount) * mult;\n    const endValue = mode === 'xhatch' ? 100 : 25;\n    const numIttr = intervals[Math.round(amount) - 1] * mapRange(1, 10, 1, endValue, amount) * mult;\n\n    const maxDim = Math.max(width, height);\n    const maxRadius = maxDim * 0.7;\n\n    for (let i = 0; i < numIttr; i++) {\n        let tx = randomWholeBetween(x, x + width);\n        let ty = randomWholeBetween(y, y + height);\n        let size = randomWholeBetween(quarter, width);\n\n        context.strokeStyle = strokeColor;\n        context.lineWidth = lineWidth;\n        context.beginPath();\n\n        if (mode === 'circles') {\n            context.arc(tx, ty, size, 0, Math.PI * 2, false);\n        } else if (mode === 'circles2') {\n            tx = randomNormalWholeBetween(x, x + width);\n            ty = randomNormalWholeBetween(y, y + height);\n            size = randomWholeBetween(1, maxRadius);\n            context.arc(tx, ty, size, 0, Math.PI * 2, false);\n        } else if (mode === 'xhatch') {\n            const tx2 = tx + size * randomSign();\n            const ty2 = ty + size * randomSign();\n            context.moveTo(tx, ty);\n            context.lineTo(tx2, ty2);\n        }\n\n        context.stroke();\n    }\n    if (clipping) {\n        context.restore();\n    }\n};\n\nexport const spiralRect = (context) => (x, y, width, height, color = 'black', amount = 5, mult = 1) => {\n    if (amount <= 0) return;\n\n    const maxDim = Math.max(width, height);\n    const maxRadius = maxDim * 0.7;\n\n    const fillamount = mapRange(1, 10, 30, 150, amount) * mult;\n\n    const numIttr = fillamount; // maxDim * (amount * 0.8);\n    const radIncr = maxRadius / numIttr;\n\n    const thetaIncr = TAU / 50; // Math.floor(amount) * 0.05; // TAU / (Math.floor(amount) * 0.05);\n\n    if (clipping) {\n        context.save();\n        const region = new Path2D();\n        region.rect(x, y, width, height);\n        context.clip(region);\n    }\n\n    const strokeColor = tinycolor(color).toRgbString();\n    const lineWidth = 1;\n\n    context.strokeStyle = strokeColor;\n    context.lineWidth = lineWidth;\n\n    const spirals = intervals[Math.round(amount) - 1] * mapRange(1, 10, 1, 15, amount) * mult;\n    for (let s = 0; s < spirals; s++) {\n        const ox = randomNormalWholeBetween(x, x + width);\n        const oy = randomNormalWholeBetween(y, y + height);\n        let theta = randomNumberBetween(0, TAU);\n        let radius = 0;\n\n        context.beginPath();\n        context.moveTo(ox, oy);\n\n        for (let i = 0; i < numIttr; i++) {\n            radius += radIncr; // + Math.sin(i / 2);\n            theta += thetaIncr;\n            const px = ox + radius * Math.cos(theta);\n            const py = oy + radius * Math.sin(theta);\n            context.lineTo(px, py);\n        }\n\n        context.stroke();\n    }\n    if (clipping) {\n        context.restore();\n    }\n};\n\nexport const stippleRect = (context) => (x, y, width, height, color = 'black', amount = 5, theta) => {\n    if (amount <= 0) return;\n    // amount = Math.min(amount, 10);\n    if (clipping) {\n        context.save();\n        const region = new Path2D();\n        region.rect(x, y, width, height);\n        context.clip(region);\n    }\n\n    const strokeColor = tinycolor(color).toRgbString();\n    const size = 3;\n\n    const colStep = width / mapRange(1, 10, 3, width / 3, amount);\n    const rowStep = height / mapRange(1, 10, 3, height / 3, amount);\n\n    context.strokeStyle = strokeColor;\n    context.lineWidth = 2;\n    context.lineCap = 'round';\n\n    theta = theta === undefined ? Math.PI / 3 : theta;\n\n    for (let i = 0; i < width; i += colStep) {\n        for (let j = 0; j < height; j += rowStep) {\n            // about the middle of the cell\n            const tx = x + randomNormalWholeBetween(i, i + colStep);\n            const ty = y + randomNormalWholeBetween(j, j + rowStep);\n\n            const coords = getRotatedYCoords(tx, ty, size, theta);\n\n            const tx2 = coords.x2; // tx + size;\n            const ty2 = coords.y2; // ty + size * -1;\n            context.beginPath();\n            context.moveTo(tx, ty);\n            context.lineTo(tx2, ty2);\n            context.stroke();\n        }\n    }\n\n    if (clipping) {\n        context.restore();\n    }\n};\n\n// TODO needs to intersect \"nicely\" at the rect area boundaries\nexport const linesRect = (context) => (x, y, width, height, color = 'black', amount = 5, theta = 0, mult = 1) => {\n    if (amount <= 0) return;\n\n    if (clipping) {\n        context.save();\n        const region = new Path2D();\n        region.rect(x, y, width, height);\n        context.clip(region);\n    }\n\n    const points = [];\n\n    const strokeColor = tinycolor(color).toRgbString();\n    const lineWidth = 1;\n\n    const yDelta = width * Math.sin(theta); // height of angle line\n    const yIncrement = height / amount / 2;\n\n    let yincr = 0;\n    const loops = height / yIncrement;\n\n    // keep centered\n    const yOff = yIncrement / 2 - yDelta / 2;\n    let connectSide = 1;\n    let coords = { x1: x, y1: y, x2: x, y2: y };\n    let lastCoords = { x1: x, y1: Math.min(y, y + yOff), x2: x, y2: Math.min(y, y + yOff) };\n\n    // drawRectFilled(context)(x, y, width, height, '#ddd');\n\n    for (let i = 0; i < loops; i++) {\n        coords = getRotatedYCoords(x, yOff + y + yincr, width, theta);\n\n        // draw bar\n\n        if (yincr === 0) {\n            // line to the top\n            if (coords.y1 > y) {\n                points.push([coords.x1, y]);\n            }\n            points.push([coords.x1, coords.y1]);\n        }\n\n        if (connectSide === 1) {\n            // right\n            points.push([coords.x2, coords.y2]);\n            points.push([coords.x2, coords.y2 + yIncrement]);\n        } else {\n            // left\n            points.push([coords.x1, coords.y1]);\n            points.push([coords.x1, coords.y1 + yIncrement]);\n        }\n\n        yincr += yIncrement;\n        connectSide *= -1;\n        lastCoords = coords;\n    }\n\n    // line to the bottom\n    if (last(points)[1] < y + height) {\n        last(points)[1] = y + height;\n    }\n\n    plotLines(context)(points, strokeColor, lineWidth);\n\n    if (clipping) {\n        context.restore();\n    }\n};\n\n/*\nexport const linesRect = (context) => (x, y, width, height, color = 'black', amount = 5, theta = 0, mult = 1) => {\n    if (amount <= 0) return;\n\n    if (clipping) {\n        context.save();\n        const region = new Path2D();\n        region.rect(x, y, width, height);\n        context.clip(region);\n    }\n\n    // theta = 0.5;\n\n    const centerH = Math.round(width / 2);\n    const centerV = Math.round(height / 2);\n    const quarter = width / 4;\n    const strokeColor = tinycolor(color).toRgbString();\n    const lineWidth = 1;\n    // const numIttr = mapRange(1, 10, 1, height / 2, amount);\n    const numIttr = (intervals[Math.round(amount) - 1] * mapRange(1, 10, 1, 15, amount) * mult) / 1;\n\n    const yDelta = width * Math.sin(theta); // height of angle line\n    const steps = height / amount / 2;\n    // keep centered\n    const yOff = steps / 2 - yDelta / 2;\n    let connectSide = -1;\n    let coords = { x1: x, y1: y, x2: x, y2: y };\n    let lastCoords = { x1: x, y1: Math.min(y, y + yOff), x2: x, y2: Math.min(y, y + yOff) };\n\n    drawRectFilled(context)(x, y, width, height, '#ddd');\n\n    // const maxx = x + width;\n    // const maxy = y + height;\n\n    const points = [];\n\n    for (let i = 0; i < height; i += steps) {\n        coords = getRotatedYCoords(x, yOff + y + i, width, theta);\n\n        // if (coords.y1 < y) {\n        //     const a = coords.y1 - y;\n        //     const b = a / Math.atan(round2(theta));\n        //\n        //     context.beginPath();\n        //     context.strokeStyle = 'red';\n        //     // context.moveTo(x, y);\n        //     // context.lineTo(x, y + a);\n        //     context.moveTo(coords.x1, y);\n        //     context.lineTo(coords.x1 - b, y);\n        //     context.stroke();\n        // }\n        //\n        // if (coords.y2 > maxy) {\n        //     const a = coords.y2 - maxy;\n        //     const b = a / Math.atan(round2(theta));\n        //\n        //     context.beginPath();\n        //     context.strokeStyle = 'green';\n        //     // context.moveTo(maxx, maxy);\n        //     // context.lineTo(maxx, maxy + a);\n        //     context.moveTo(maxx, maxy);\n        //     context.lineTo(maxx - b, maxy);\n        //     context.stroke();\n        // }\n\n        // draw bar\n        context.beginPath();\n        context.strokeStyle = strokeColor;\n        context.lineWidth = lineWidth;\n        if(i === 0) {\n            context.moveTo(coords.x1, coords.y1);\n        } else {\n            context.moveTo(coords.x1, coords.y1);\n        }\n        context.moveTo(coords.x1, coords.y1);\n        context.lineTo(coords.x2, coords.y2);\n        points.push([coords.x1, coords.y1]);\n        points.push([coords.x2, coords.y2]);\n        context.stroke();\n\n        context.beginPath();\n        if (connectSide === -1) {\n            // left\n            context.moveTo(lastCoords.x1, lastCoords.y1);\n            context.lineTo(coords.x1, coords.y1);\n            points.push([lastCoords.x1, lastCoords.y1]);\n            points.push([coords.x1, coords.y1]);\n        } else {\n            // right\n            context.moveTo(lastCoords.x2, lastCoords.y2);\n            context.lineTo(coords.x2, coords.y2);\n            points.push([lastCoords.x2, lastCoords.y2]);\n            points.push([coords.x2, coords.y2]);\n        }\n        context.stroke();\n\n        connectSide *= -1;\n        lastCoords = coords;\n    }\n\n    context.beginPath();\n    if (connectSide === -1) {\n        // left\n        context.moveTo(lastCoords.x1, lastCoords.y1);\n        context.lineTo(x, y + height);\n        points.push([lastCoords.x1, lastCoords.y1]);\n        points.push([x, y + height]);\n    } else {\n        // right\n        context.moveTo(lastCoords.x2, lastCoords.y2);\n        context.lineTo(x + width, Math.max(coords.y2, y + height));\n        points.push([lastCoords.x2, lastCoords.y2]);\n        points.push([x + width, Math.max(coords.y2, y + height)]);\n    }\n    context.stroke();\n\n    // plotPoints(context)(points);\n\n    if (clipping) {\n        context.restore();\n    }\n};\n */\n\n/*\nconst theta = (Math.PI * angle) / 180.0;\nconst x2 = x1 + length * Math.cos(theta);\nconst y2 = y1 + length * Math.sin(theta);\n */\n","import tinycolor from 'tinycolor2';\nimport { Particle, createRandomParticleValues } from '../lib/Particle';\nimport { background, pixel, resetStyles } from '../lib/canvas';\nimport { mapRange, oneOf, uvFromAngle } from '../lib/math';\nimport { ratio, scale } from '../lib/sketch';\nimport { palettes, warmGreyDark, warmWhite, warmPink, paperWhite, bicPenBlue } from '../lib/palettes';\nimport { Box } from '../lib/Box';\nimport { simplexNoise3d } from '../lib/attractors';\nimport { Vector } from '../lib/Vector';\nimport { stippleRect, texturizeRect } from '../lib/canvas-textures';\nimport { connectParticles, drawParticlePoint } from '../lib/canvas-particles';\nimport { createGridCellsXY } from '../lib/grids';\n\nexport const shadedBoxes = () => {\n    const config = {\n        name: 'shadedBoxes',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    const numParticles = 30;\n\n    let canvasCenterX;\n    let canvasCenterY;\n    let centerRadius;\n    let grid;\n    const boxes = [];\n    const palette = palettes.pop;\n    let time = 0;\n\n    const setup = ({ canvas, context }) => {\n        canvasCenterX = canvas.width / 2;\n        canvasCenterY = canvas.height / 2;\n        centerRadius = canvas.height / 4;\n\n        background(canvas, context)(paperWhite);\n\n        const boxwhite = paperWhite.clone().darken(10).saturate(10);\n        const boxbg = [boxwhite, bicPenBlue];\n        const boxfg = [bicPenBlue, boxwhite];\n\n        const gridMargin = Math.round(canvas.width / 10);\n        const gridGutter = Math.round(gridMargin / 4);\n\n        grid = createGridCellsXY(canvas.width, canvas.height, 1, 10, gridMargin, gridGutter);\n\n        grid.points.forEach((p, i) => {\n            boxes.push(\n                new Box({\n                    canvas,\n                    context,\n                    x: p[0],\n                    y: p[1],\n                    width: grid.columnWidth,\n                    height: grid.rowHeight,\n                })\n            );\n        });\n\n        let freq = 0.0001;\n\n        boxes.forEach((b, bidx) => {\n            const particles = [];\n            const clr = bidx % 2 === 0 ? 0 : 1;\n            b.backgroundColor = bicPenBlue.clone(); // boxbg[clr];\n            b.flowField = (x, y, t) => simplexNoise3d(x, y, t, freq);\n            freq += 0.0005;\n            for (let i = 0; i < numParticles; i++) {\n                const props = createRandomParticleValues(canvas);\n                const coords = b.translateInto(b.randomPointInside('normal'));\n                props.x = coords.x;\n                props.y = coords.y;\n                props.velocityX = 0;\n                props.velocityY = 0;\n                props.radius = 1;\n                props.color = bidx <= 4 ? bicPenBlue.clone() : paperWhite.clone(); // tinycolor(boxfg[clr]).clone().setAlpha(0.5);\n                particles.push(new Particle(props));\n            }\n            b.children = particles;\n\n            // texturizeRect(context)(b.x, b.y, b.width, b.height, b.backgroundColor, bidx * 3 + 1, 'circles2');\n            stippleRect(context)(b.x, b.y, b.width, b.height, b.backgroundColor, bidx + 1, 'circles2');\n        });\n\n        // boxes.forEach((b) => {\n        //     b.fill();\n        // });\n\n        return -1;\n    };\n\n    const draw = ({ canvas, context }) => {\n        boxes.forEach((box) => {\n            box.createClip();\n            box.children.forEach((particle) => {\n                const theta = box.flowField(particle.x, particle.y, time);\n                const force = uvFromAngle(theta);\n                particle.applyForce(force);\n                particle.velocity = particle.velocity.limit(1);\n                particle.updatePosWithVelocity();\n                particle.acceleration = new Vector(0, 0);\n                box.particleEdgeWrap(particle);\n                pixel(context)(particle.x, particle.y, particle.color, 'circle', 0.5);\n            });\n            box.removeClip();\n        });\n        time += 0.1;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport { mapRange } from '../lib/math';\nimport { background, pixel } from '../lib/canvas';\nimport { ratio, scale, orientation } from '../lib/sketch';\nimport { paperWhite } from '../lib/palettes';\nimport { Bitmap } from '../lib/Bitmap';\nimport sourcePng from '../../media/images/alexander-krivitskiy-2wOEPBkaH7o-unsplash.png';\n\n/*\nhttps://larrycarlson.com/collections/wavy-art-prints\n */\n\nexport const larrycarlson02 = () => {\n    const config = {\n        name: 'larrycarlson2',\n        ratio: ratio.square,\n        // ratio: ratio.poster,\n        // orientation: orientation.portrait,\n        scale: scale.standard,\n    };\n\n    let ctx;\n    let canvasWidth;\n    let canvasHeight;\n    let canvasCenterX;\n    let canvasCenterY;\n    let centerRadius;\n    let imageWidth;\n    let imageHeight;\n    let startX;\n    let maxX;\n    let startY;\n    let maxY;\n    const margin = 50;\n    const ribbonThickness = 10;\n\n    const backgroundColor = paperWhite.clone();\n    const image = new Bitmap(sourcePng);\n\n    const colorImageTop = tinycolor('#ffeb00');\n    const colorImageBottom = tinycolor('#01ff4f');\n\n    const colorLinesTop = tinycolor('#ff01d7');\n    const colorLinesBottom = tinycolor('#5600cc');\n\n    const setup = ({ canvas, context }) => {\n        image.init(canvas, context);\n\n        ctx = context;\n        canvasWidth = canvas.width;\n        canvasHeight = canvas.height;\n        canvasCenterX = canvas.width / 2;\n        canvasCenterY = canvas.height / 2;\n        centerRadius = canvas.height / 4;\n\n        imageWidth = canvas.width - margin * 2;\n        imageHeight = canvas.height - margin * 2;\n\n        startX = margin;\n        maxX = canvas.width - margin;\n        startY = margin;\n        maxY = canvas.height - margin;\n\n        background(canvas, context)(backgroundColor);\n    };\n\n    // const circleX = (theta, amp, freq) => Math.cos(theta / freq) * amp;\n    // const circleY = (theta, amp, freq) => Math.sin(theta / freq) * amp;\n\n    const renderImage = () => {\n        const resolution = ribbonThickness / 2;\n        const border = margin / -2;\n        // const freq = 30;\n        // const amp = 1;\n        // let theta = 0;\n        for (let x = startX + border; x < maxX - border; x += resolution) {\n            for (let y = startY + border; y < maxY - border; y += resolution) {\n                const pxcolor = image.pixelColorFromCanvas(x, y);\n                const pxbrightness = pxcolor.getBrightness();\n                const bright = mapRange(128, 255, 0, 50, pxbrightness);\n\n                const color = tinycolor.mix(colorImageTop, colorImageBottom, mapRange(startY, maxY, 0, 100, y));\n\n                const size = resolution;\n\n                if (pxbrightness > 128) color.brighten(bright);\n\n                if (pxbrightness >= 70 && pxbrightness <= 100) {\n                    color.spin(30);\n                }\n\n                if (pxbrightness >= 120 && pxbrightness <= 220) {\n                    // color.spin(-30);\n                }\n\n                // const ox = circleX(theta, amp, freq) + x;\n                // const oy = circleY(theta, amp, freq) + y;\n\n                pixel(ctx)(x, y, color, 'circle', size);\n\n                // theta += 0.25;\n            }\n        }\n    };\n\n    const drawRibbonPoint = (point, isOtherSide) => {\n        const x = point[0];\n        const y = point[1];\n\n        // -2 +1 to keep from overlapping other ribbons and give it a min thickness of 1\n        const size = image.sizeFromPixelBrightness(x, y, ribbonThickness - 2, 128, 255) + 0.75;\n        let jitterX = 0; // size;\n        // let jitterY = 0;\n\n        if (isOtherSide) {\n            jitterX = size * -1;\n            // jitterY = size * -0.25;\n        }\n\n        ctx.lineTo(x + jitterX, y);\n    };\n\n    const drawRibbon = (sideA, color, stroke = false) => {\n        const rColor = tinycolor(color).clone();\n        const gradient = ctx.createLinearGradient(0, startY, 0, maxY);\n        gradient.addColorStop(0, colorLinesTop.toRgbString());\n        gradient.addColorStop(1, colorLinesBottom.toRgbString());\n\n        ctx.beginPath();\n        ctx.moveTo(sideA[0], sideA[0]);\n        sideA.forEach((w) => {\n            drawRibbonPoint(w, false);\n        });\n        sideA.reverse().forEach((w) => {\n            drawRibbonPoint(w, true);\n        });\n        ctx.closePath();\n\n        if (stroke) {\n            ctx.strokeStyle = rColor.darken(70).toRgbString();\n            ctx.lineWidth = 0.75;\n            ctx.stroke();\n        }\n\n        ctx.fillStyle = gradient;\n        ctx.fill();\n    };\n\n    const renderPoints = (points) => {\n        points.forEach((line) => {\n            if (line.length) {\n                drawRibbon(line, 'red', false, 0);\n            }\n        });\n    };\n\n    /*\n    https://www.desmos.com/calculator/rzwar3xxpy\n    y-x = amp * Math.sin((y+x)/freq)\n     */\n    const getPointsDiagSinWave = (xoffset, yoffset) => {\n        const freq = 40; // 30\n        const amp = 15; // 5\n        let y = 0;\n        const a = Math.PI / 3; // angle of the wave, 1 is 45\n        const points = [];\n        for (let x = 0; x < canvasWidth; x++) {\n            const b = x; // Math.sin(x / Math.PI) * 2;\n            // y = amp * Math.sin((y + b) / freq) + x * a;\n            y = amp * Math.sin((y * a + b) / freq) + x * a;\n            const px = x + xoffset;\n            const py = y + yoffset;\n            if (px > startX && px < maxX && py > startY && py < maxY) {\n                points.push([px, py]);\n            }\n        }\n        return points;\n    };\n\n    const draw = ({ canvas, context }) => {\n        const points = [];\n\n        renderImage();\n\n        for (let x = (imageWidth + 100) * -1; x < imageWidth * 2; x += ribbonThickness) {\n            points.push(getPointsDiagSinWave(x, 0));\n        }\n\n        renderPoints(points);\n\n        return -1;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","// https://github.com/gdenisov/cardinal-spline-js\n// https://github.com/gdenisov/cardinal-spline-js/blob/master/src/curve_calc.js\n/*!\tCurve calc function for canvas 2.3.1\n *\tEpistemex (c) 2013-2014\n *\tLicense: MIT\n */\n\n/**\n * Calculates an array containing points representing a cardinal spline through given point array.\n * Points must be arranged as: [x1, y1, x2, y2, ..., xn, yn].\n *\n * The points for the cardinal spline are returned as a new array.\n *\n * @param {Array} points - point array\n * @param {Number} [tension=0.5] - tension. Typically between [0.0, 1.0] but can be exceeded\n * @param {Number} [numOfSeg=20] - number of segments between two points (line resolution)\n * @param {Boolean} [close=false] - Close the ends making the line continuous\n * @returns {Float32Array} New array with the calculated points that was added to the path\n */\nexport const getCurvePoints = (points, tension, numOfSeg, close) => {\n    // options or defaults\n    tension = typeof tension === 'number' ? tension : 0.5;\n    numOfSeg = numOfSeg || 25;\n\n    let pts; // for cloning point array\n    let i = 1;\n    let l = points.length;\n    let rPos = 0;\n    const rLen = (l - 2) * numOfSeg + 2 + (close ? 2 * numOfSeg : 0);\n\n    if (rLen < 0) {\n        return [];\n    }\n\n    const res = new Float32Array(rLen);\n    const cache = new Float32Array((numOfSeg + 2) * 4);\n    let cachePtr = 4;\n\n    pts = points.slice(0);\n\n    if (close) {\n        pts.unshift(points[l - 1]); // insert end point as first point\n        pts.unshift(points[l - 2]);\n        pts.push(points[0], points[1]); // first point as last point\n    } else {\n        pts.unshift(points[1]); // copy 1. point and insert at beginning\n        pts.unshift(points[0]);\n        pts.push(points[l - 2], points[l - 1]); // duplicate end-points\n    }\n\n    // cache inner-loop calculations as they are based on t alone\n    cache[0] = 1; // 1,0,0,0\n\n    for (; i < numOfSeg; i++) {\n        const st = i / numOfSeg;\n        const st2 = st * st;\n        const st3 = st2 * st;\n        const st23 = st3 * 2;\n        const st32 = st2 * 3;\n\n        cache[cachePtr++] = st23 - st32 + 1; // c1\n        cache[cachePtr++] = st32 - st23; // c2\n        cache[cachePtr++] = st3 - 2 * st2 + st; // c3\n        cache[cachePtr++] = st3 - st2; // c4\n    }\n\n    cache[++cachePtr] = 1; // 0,1,0,0\n\n    // calc. points\n    parse(pts, cache, l);\n\n    if (close) {\n        // l = points.length;\n        pts = [];\n        pts.push(points[l - 4], points[l - 3], points[l - 2], points[l - 1]); // second last and last\n        pts.push(points[0], points[1], points[2], points[3]); // first and second\n        parse(pts, cache, 4);\n    }\n\n    function parse(pts, cache, l) {\n        for (var i = 2, t; i < l; i += 2) {\n            const pt1 = pts[i];\n            const pt2 = pts[i + 1];\n            const pt3 = pts[i + 2];\n            const pt4 = pts[i + 3];\n\n            const t1x = (pt3 - pts[i - 2]) * tension;\n            const t1y = (pt4 - pts[i - 1]) * tension;\n            const t2x = (pts[i + 4] - pt1) * tension;\n            const t2y = (pts[i + 5] - pt2) * tension;\n\n            for (t = 0; t < numOfSeg; t++) {\n                const c = t << 2; // t * 4;\n                const c1 = cache[c];\n                const c2 = cache[c + 1];\n                const c3 = cache[c + 2];\n                const c4 = cache[c + 3];\n\n                res[rPos++] = c1 * pt1 + c2 * pt3 + c3 * t1x + c4 * t2x;\n                res[rPos++] = c1 * pt2 + c2 * pt4 + c3 * t1y + c4 * t2y;\n            }\n        }\n    }\n\n    // add last point\n    l = close ? 0 : points.length - 2;\n    res[rPos++] = points[l];\n    res[rPos] = points[l + 1];\n\n    return res;\n};\n","import { Vector } from './Vector';\nimport { pointDistance } from './math';\nimport { getCurvePoints } from './curve-calc';\nimport { last } from './utils';\n\n// https://stackoverflow.com/questions/41144224/calculate-curvature-for-3-points-x-y\n// possible alternate https://www.mathsisfun.com/geometry/herons-formula.html\nexport const triangleArea2 = (a, b, c) => (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x);\n\n// Menger curvature of a triple of points in n-dimensional Euclidean space Rn is the reciprocal of\n// the radius of the circle that passes through the three points\nexport const mCurvature = (p1, p2, p3) => {\n    const t4 = 2 * triangleArea2(p1, p2, p3);\n    const la = pointDistance(p1, p2);\n    const lb = pointDistance(p2, p3);\n    const lc = pointDistance(p3, p1);\n    return t4 / (la * lb * lc);\n};\n\nexport const lineSlope = (a, b) => (b.y - a.y) / (b.x - a.x);\n\n// https://stackoverflow.com/questions/9043805/test-if-two-lines-intersect-javascript-function\n// returns true iff the line from (a,b)->(c,d) intersects with (p,q)->(r,s)\nexport const linesIntersect = (a, b, c, d, p, q, r, s) => {\n    const det = (c - a) * (s - q) - (r - p) * (d - b);\n    if (det === 0) {\n        return false;\n    }\n    const lambda = ((s - q) * (r - a) + (p - r) * (s - b)) / det;\n    const gamma = ((b - d) * (r - a) + (c - a) * (s - b)) / det;\n    return lambda > 0 && lambda < 1 && gamma > 0 && gamma < 1;\n};\n\nexport const segmentsIntersect = (a, b) =>\n    linesIntersect(a.start.x, a.start.y, a.end.x, a.end.y, b.start.x, b.start.y, b.end.x, b.end.y);\n\nexport const segment = (x1, y1, x2, y2) => {\n    const start = new Vector(x1, y1);\n    const end = new Vector(x2, y2);\n    return { start, end };\n};\n\nexport const connectSegments = (segs) =>\n    segs.map((s, i) => {\n        if (i === segs.length - 1) {\n            return s;\n        }\n        const next = segs[i + 1];\n\n        const distance = pointDistance({ x: s.end.x, y: s.end.y }, { x: next.start.x, y: s.start.y });\n        if (distance > 1) {\n            s.end = new Vector(next.start.x, next.start.y);\n        }\n        return s;\n    });\n\nexport const trimSegments = (segs, skip = 2) =>\n    segs.reduce((acc, s, i) => {\n        if (i === 0 || i === segs.length - 1) {\n            acc.push(s);\n        } else if (i % skip === 0) {\n            acc.push(s);\n        }\n        return acc;\n    }, []);\n\n// For array of points from segments, take only the first start\nexport const startPointsOnly = (points) => {\n    const p = [];\n    for (let i = 0; i < points.length; i += 2) {\n        p.push(points[i]);\n    }\n    // last end point\n    p.push(last(points));\n    return p;\n};\n\n// For array of points from segments, return the mid point of the segment\nexport const getSegPointsMid = (points) => {\n    const p = [];\n    for (let i = 0; i < points.length; i += 2) {\n        const s = points[i];\n        const e = points[i + 1];\n        if (e) {\n            const midX = s[0] + (e[0] - s[0]) * 0.5;\n            const midY = s[1] + (e[1] - s[1]) * 0.5;\n            p.push([midX, midY]);\n        } else {\n            p.push(s);\n        }\n    }\n    // last end point\n    p.push(last(points));\n    return p;\n};\n\nexport const trimPoints = (points, skip = 2) =>\n    points.reduce((acc, s, i) => {\n        if (i === 0 || i === points.length - 1) {\n            acc.push(s);\n        } else if (i % skip === 0) {\n            acc.push(s);\n        }\n        return acc;\n    }, []);\n\nexport const pointsOrientation = (a, b) => Math.atan2(b.y - a.y, b.x - a.x);\nexport const segmentOrientation = ({ start, end }) => pointsOrientation(start, end);\n\nexport const segmentFromPoints = (points) => {\n    const seg = [];\n    for (let i = 0; i < points.length; i += 2) {\n        // if it's an uneven number, dupe the last point\n        const next = i + 1 === points.length ? i : i + 1;\n        seg.push(segment(points[i][0], points[i][1], points[next][0], points[next][1]));\n    }\n    return seg;\n};\n\nexport const pointsFromSegment = (seg) => {\n    const points = [];\n    for (let i = 0; i < seg.length; i++) {\n        points.push([seg[i].start.x, seg[i].start.y]);\n        points.push([seg[i].end.x, seg[i].end.y]);\n    }\n    return points;\n};\n\n// [x,y] => {x:x,y:y}\nexport const a2p = (a) => ({ x: a[0], y: a[1] });\n// [x,y] => Vector{x:x,y:y}\nexport const a2V = (a) => new Vector(a[0], a[1]);\nexport const v2a = (v) => [v.x, v.y];\n// [[x,y]] => [{x:x,y:y}]\nexport const a2pA = (arry) => arry.map((a) => a2p(a));\n// [[x,y]] => [Vector{x:x,y:y}]\nexport const pa2VA = (arry) => arry.map((a) => a2V(a));\nexport const va2pA = (arry) => arry.map((a) => v2a(a));\n\n// [[x,y]] => [x1, y1,  x2, y2, ... xn, yn]\nexport const flattenPointArray = (arry) =>\n    arry.reduce((acc, p) => {\n        if (p) {\n            acc.push(p[0]);\n            acc.push(p[1]);\n        }\n\n        return acc;\n    }, []);\n\n// [x1, y1,  x2, y2, ... xn, yn] => [[x,y]]\nexport const unflattenPointArray = (arry) => {\n    const points = [];\n    for (let i = 0; i < arry.length; i += 2) {\n        points.push([arry[i], arry[i + 1]]);\n    }\n    return points;\n};\n\n// Using https://github.com/gdenisov/cardinal-spline-js\nexport const createSplinePoints = (points) => {\n    const fpoints = flattenPointArray(points);\n    const curve = getCurvePoints(fpoints);\n    return unflattenPointArray(curve);\n};\n\n// https://www.xarg.org/2010/02/reduce-the-length-of-a-line-segment-by-a-certain-amount/\nexport const reduceLineFromStart = (p1, p2, r) => {\n    const dx = p2.x - p1.x;\n    const dy = p2.y - p1.y;\n    const mag = Math.sqrt(dx * dx + dy * dy);\n    return {\n        x: p1.x + (r * dx) / mag,\n        y: p1.y + (r * dy) / mag,\n    };\n};\n\nexport const reduceLineFromEnd = (p1, p2, r) => {\n    const dx = p2.x - p1.x;\n    const dy = p2.y - p1.y;\n    const mag = Math.sqrt(dx * dx + dy * dy);\n    return {\n        x: p2.x - (r * dx) / mag,\n        y: p2.y - (r * dy) / mag,\n    };\n};\n\nexport const reduceLineEqually = (p1, p2, r) => {\n    const r2 = r / 2;\n    const dx = p2.x - p1.x;\n    const dy = p2.y - p1.y;\n    const mag = Math.sqrt(dx * dx + dy * dy);\n    return [\n        {\n            x: p1.x + (r2 * dx) / mag,\n            y: p1.y + (r2 * dy) / mag,\n        },\n        {\n            x: p2.x - (r2 * dx) / mag,\n            y: p2.y - (r2 * dy) / mag,\n        },\n    ];\n};\n","import { linesIntersect, mCurvature, pa2VA, trimPoints, va2pA } from './lineSegments';\nimport { defaultValue, getArrayValuesFromEnd, getArrayValuesFromStart } from './utils';\nimport { chaikin, degreesToRadians, lerp, mapRange, percentage, pointDistance, uvFromAngle } from './math';\nimport { Vector } from './Vector';\n\n/*\nBased on Meander by Robert Hodgin\nhttp://roberthodgin.com/project/meander\n\nAnd Eric's recreations\nhttps://www.reddit.com/r/generative/comments/lfsl8t/pop_art_meandering_river/\n */\n\n/*\nThe settings for the effect are very particular.  Too many points tends to result in \"mushrooming\" of the flow and\non the extreme, oxbows everywhere. But this can be very interesting! Too too few will cause the flow to flatten.\n\n    - Curve measure larger will create larger bubbles\n    - Curve size, even larger bubbles\n    - Seg curve multiplier should be <1\n    - If point remove prox is too low line will create mushrooms. Should be curve size or a few decimal points under\n    - If insertion factor is > 1, then the line will just be straight\n    - Mix mag should be incr in small sizes\n*/\n\n/*\nSettings for a nice medium high turbulence river\n\n// Convenience settings object\nconst cs = {\n    mixTangentRatio: 0.45,\n    mixMagnitude: 1.75,\n    curvemeasure: 4,\n    curvesize: 5,\n    pointremove: 5,\n    oxbowProx: 2.5,\n};\n\nconst mediumRiver = new MeanderingRiver(points, {\n    maxHistory,\n    storeHistoryEvery: historyStep,\n    fixedEndPoints: 3,\n    influenceLimit: 0,\n\n    mixTangentRatio: cs.mixTangentRatio,\n    mixMagnitude: cs.mixMagnitude,\n    oxbowProx: cs.oxbowProx,\n    oxbowPointIndexProx: cs.curvemeasure,\n    measureCurveAdjacent: cs.curvemeasure,\n    curveSize: cs.curvesize,\n    pointRemoveProx: cs.pointremove,\n\n    pushFlowVectorFn: flowRightToMiddle(0.5, canvasMidY),\n\n    noiseFn: noise,\n    noiseMode: 'mix',\n    noiseStrengthAffect: 0,\n    mixNoiseRatio: 0.3,\n});\n\n// history\n// rivers.forEach((r, i) => {\n//     for (let h = r.history.length - 1; h >= 0; h--) {\n//         // const a = mapRange(0, maxHistory, 0.35, 0.1, h);\n//         const b = mapRange(0, maxHistory, 5, 20, h);\n//         const hcolor = tinycolor.mix(riverColor, backgroundColor, mapRange(0, maxHistory, 0, 100, h)).darken(b);\n//         // const hcolor = riverColor.clone().darken(b);\n//         const hpoints = r.history[h].channel; // smoothPoints(r.history[h].channel, 8, 3);\n//         drawConnectedPoints(ctx)(hpoints, hcolor, riverWeight[i] * 2);\n//     }\n// });\n\n */\n\nexport class MeanderingRiver {\n    constructor(initPoints, props) {\n        this.startingPoints = initPoints;\n        this.pointVectors = pa2VA(initPoints);\n        this.oxbows = [];\n\n        // Toggle oxbow checking\n        this.handleOxbows = defaultValue(props, 'handleOxbows', true);\n\n        // Wrap around end points circles/closed shapes\n        this.wrapEnd = defaultValue(props, 'wrapEnd', false);\n\n        // %age of line length to fix at each end. Must be >= 1\n        // Setting to 1 will be fixing the first 1 point only, not percentage\n        this.fixedEndPoints = defaultValue(props, 'fixedEndPoints', 1);\n        // how many adjacent points to use to measure the average curvature\n        this.measureCurveAdjacent = defaultValue(props, 'measureCurveAdjacent', 30);\n        // Ineffective multiply the measured curvature vector magnitude to enhance effect\n        this.segCurveMultiplier = defaultValue(props, 'segCurveMultiplier', 1);\n\n        // How much to blend tangent and bitangent, 0 = tangent, 1 = bitangent\n        this.mixTangentRatio = defaultValue(props, 'mixTangentRatio', 0.5);\n        // Magnitude of the mixed vector, increase the effect, < slower\n        this.mixMagnitude = defaultValue(props, 'mixMagnitude', 0);\n        // Limit the influence vector,  less than 1, slower. > 1 no affect\n        this.influenceLimit = defaultValue(props, 'influenceLimit', 0.25);\n\n        // Additional vector to push the flow in a direction\n        this.pushFlowVectorFn = defaultValue(props, 'pushFlowVectorFn', undefined);\n\n        // Add new points if the distance between is larger\n        this.curveSize = defaultValue(props, 'curveSize', 2);\n        // Multiplier for the amount of new points to add\n        this.insertionFactor = defaultValue(props, 'insertionFactor', 1);\n        // Remove points closer than this\n        this.pointRemoveProx = defaultValue(props, 'pointRemoveProx', this.curveSize * 0.8);\n\n        // Point proximity to create a new oxbow and ...\n        this.oxbowProx = defaultValue(props, 'oxbowProx', this.curveSize);\n        // If points are not this close than create oxbow\n        this.oxbowPointIndexProx = Math.ceil(this.measureCurveAdjacent * 1.5);\n\n        // this.oxbowShrinkRate = defaultValue(props, 'oxbowShrinkRate', 25);\n\n        // Additional flow influence. mix, only, scaleMag\n        this.noiseMode = defaultValue(props, 'noiseMode', 'mix'); // mix or only (mix and exclude less than strength)\n        // Passed x,y returns a small -/+ value\n        this.noiseFn = defaultValue(props, 'noiseFn', undefined);\n        // Values returned from noise fn less than this will be ignored\n        this.noiseStrengthAffect = defaultValue(props, 'noiseStrengthAffect', 3); // only noise theta > will cause drift\n        // Ratio to mix in noise with the calculated influence vector. Best kept less than .3\n        this.mixNoiseRatio = defaultValue(props, 'mixNoiseRatio', 0.1);\n\n        // Store history of the past flows\n        this.steps = 0;\n        this.maxHistory = defaultValue(props, 'maxHistory', 10);\n        this.storeHistoryEvery = defaultValue(props, 'storeHistoryEvery', 2);\n        this.history = [];\n        this.running = true;\n    }\n\n    get points() {\n        return va2pA(this.pointVectors);\n    }\n\n    addToHistory(ox, channel) {\n        if (this.steps % this.storeHistoryEvery === 0) {\n            this.history.unshift({ oxbows: ox, channel });\n            if (this.history.length > this.maxHistory) {\n                this.history = this.history.slice(0, this.maxHistory);\n            }\n        }\n    }\n\n    // Average Menger curvature of the segments\n    averageMCurvature(points) {\n        const sum = points.reduce((diffs, point, i) => {\n            const prev = i - 1;\n            const next = i + 1;\n            if (prev >= 0 && next < points.length) {\n                diffs += mCurvature(points[prev], point, points[next]);\n            }\n            return diffs;\n        }, 0);\n        return degreesToRadians(sum / points.length);\n    }\n\n    // get x# of points on either side of the given point\n    getPointsToMeasure(i, points) {\n        const len = this.measureCurveAdjacent;\n        let min = 0;\n        let max = points.length;\n        // if (this.wrapEnd) {\n        //     // Circular - resulting in poor curve values\n        //     const start = getArrayValuesFromStart(points, i, len);\n        //     const end = getArrayValuesFromEnd(points, i, len);\n        //     return start.concat(end);\n        // }\n        min = i < len ? 0 : i - len;\n        max = i > points.length - len ? points.length : i + len;\n        return points.slice(min, max);\n    }\n\n    // The main part of the effect - most important parts\n    // 1. The curvature of a portion of the points is measured and averaged\n    // 2. The angle/tangent of the current and next points is measured\n    // 3. A perpendicular bitangent is calculated and it's magnitude set to the curvature\n    // 4. A mix vector is created from a blend of the tangent and bitangent\n    curvatureInfluence(point, i, allPoints) {\n        const curvature = this.averageMCurvature(this.getPointsToMeasure(i, allPoints)) * this.segCurveMultiplier;\n        const curveDirection = curvature < 0 ? 1 : -1;\n\n        let nextPoint = allPoints[i + 1];\n\n        if (!nextPoint && this.wrapEnd) {\n            // If wrapped, the next point at the end is the start\n            nextPoint = allPoints[0];\n        }\n\n        const tangent = nextPoint.sub(point);\n        const biangle = tangent.angle() + 1.5708 * curveDirection;\n        const bitangent = uvFromAngle(biangle).setMag(Math.abs(curvature));\n\n        const a = tangent.normalize();\n        const b = bitangent.normalize();\n        let mVector = a.mix(b, this.mixTangentRatio);\n\n        // Noise to add interesting extra flows\n        if (this.noiseFn) {\n            const t = this.noiseFn(point.x, point.y);\n\n            if (this.noiseMode === 'mix' && Math.abs(t) > this.noiseStrengthAffect) {\n                // Mix the strength of the noise\n                const n = uvFromAngle(t);\n                mVector = mVector.mix(n, this.mixNoiseRatio);\n            } else if (this.noiseMode === 'flowInTo') {\n                // \"Flow\" into lower areas, zero out high areas\n                if (t < 0) {\n                    const n = uvFromAngle(t);\n                    mVector = mVector.mix(n, this.mixNoiseRatio);\n                } else {\n                    mVector = new Vector(0, 0);\n                }\n            } else if (this.noiseMode === 'scaleMag') {\n                const nscale = mapRange(0, this.noiseStrengthAffect, 5, 1, 3, Math.abs(t));\n                mVector = mVector.setMag(nscale);\n            }\n        }\n\n        // Increase the strength\n        if (this.mixMagnitude) {\n            mVector = mVector.setMag(this.mixMagnitude);\n        }\n\n        // Limit the length\n        if (this.influenceLimit > 0) {\n            mVector = mVector.limit(this.influenceLimit);\n        }\n\n        return mVector;\n    }\n\n    // Move the points\n    meanderLinear(points) {\n        // Slice the array in to points to affect (mid) and to not (start and end)\n        const pct = this.fixedEndPoints === 1 ? 1 : Math.max(percentage(points.length, this.fixedEndPoints), 1);\n        const fixedPointsPct = pct;\n\n        const startIndex = fixedPointsPct;\n        const startIndexPoints = points.slice(0, startIndex);\n        const endIndex = points.length - fixedPointsPct;\n        const endIndexPoints = points.slice(endIndex, points.length);\n\n        const middlePoints = points.slice(startIndex, endIndex);\n        const influencedPoints = middlePoints.map((point, i) => {\n            const mixVector = this.curvatureInfluence(point, i + startIndex, points);\n            let infPoint = point.add(mixVector);\n            // Additional motion to the point vectors to push around the screen, sim flows in directions, keep towards\n            // the center of the screen, etc.\n            if (this.pushFlowVectorFn) {\n                const pushVector = this.pushFlowVectorFn(point, mixVector);\n                infPoint = infPoint.add(pushVector);\n            }\n            return infPoint;\n        });\n\n        return startIndexPoints.concat(influencedPoints).concat(endIndexPoints);\n    }\n\n    meanderWrapped(points) {\n        let influencedPoints = [];\n\n        if (points.length > 3) {\n            influencedPoints = points.map((point, i) => {\n                const mixVector = this.curvatureInfluence(point, i, points);\n                let infPoint = point.add(mixVector);\n                // Additional motion to the point vectors to push around the screen, sim flows in directions, keep towards\n                // the center of the screen, etc.\n                if (this.pushFlowVectorFn) {\n                    const pushVector = this.pushFlowVectorFn(point, mixVector);\n                    infPoint = infPoint.add(pushVector);\n                }\n                return infPoint;\n            });\n        } else {\n            // Lines crossed and there were cut off/oxbowed\n            this.running = false;\n            console.log('Meander crossed, stopping');\n        }\n\n        return influencedPoints;\n    }\n\n    canRemovePoint(i, points) {\n        if (this.wrapEnd) {\n            // TODO Should be able to remove the first and last?\n        }\n        const fixed = this.fixedEndPoints || 1;\n        return i > fixed && i < points.length - fixed;\n    }\n\n    // If points are too far apart, add extra points to allow for expansion\n    // If they're too close, remove them to remove uneccessary information\n    // Too many points too close together will trash performance and cause many many oxbows to form w/ short segments\n    adjustPointsSpacing(points) {\n        return points.reduce((acc, point, i) => {\n            if (i === 0 || (i === points.length - 1 && !this.wrapEnd)) {\n                acc.push(point);\n                return acc;\n            }\n\n            let next = points[i + 1];\n\n            if (this.wrapEnd && !next) next = points[0];\n\n            const distance = pointDistance(point, next);\n\n            if (distance > this.curveSize) {\n                // Add points\n                const numInsertPoints = Math.round((distance / this.curveSize) * this.insertionFactor) + 1;\n                for (let k = 0; k < numInsertPoints; k++) {\n                    const ratio = (1 / numInsertPoints) * k;\n                    const nx = lerp(point.x, next.x, ratio);\n                    const ny = lerp(point.y, next.y, ratio);\n                    acc.push(new Vector(nx, ny));\n                }\n            } else if (this.canRemovePoint(i, points) && distance < this.pointRemoveProx) {\n                // Remove points\n            } else {\n                acc.push(point);\n            }\n            return acc;\n        }, []);\n    }\n\n    checkForOxbows(points) {\n        const newPoints = [];\n        for (let i = 0; i < points.length; i++) {\n            const point = points[i];\n            newPoints.push(point);\n            for (let j = i; j < points.length; j++) {\n                // exclude first and last if it's wrapping\n                if ((this.wrapEnd && i === 0) || j === 0 || i === points.length - 1 || j === points.length - 1)\n                    continue;\n\n                const next = points[j];\n                const dist = pointDistance(point, next);\n\n                // Check the proximity of the points on the screen and their proximity in the points array\n                if (dist < this.oxbowProx && Math.abs(i - j) > this.oxbowPointIndexProx) {\n                    newPoints.push(next);\n                    let oxpoints = va2pA(points.slice(i, j));\n                    oxpoints = chaikin(trimPoints(oxpoints, 3), 3);\n                    this.oxbows.push({ points: oxpoints, startLength: oxpoints.length });\n                    // Skip i ahead to j since these points were removed\n                    i = j;\n                }\n            }\n        }\n        return newPoints;\n    }\n\n    // Shrink the oxbows so the \"evaporate\"\n    // TODO - shrink distance between points not just cut off of the end\n    shrinkOxbows(oxbowArr) {\n        return oxbowArr.reduce((oxacc, oxbow) => {\n            const oxpoints = oxbow.points;\n            if (oxpoints.length > 1) {\n                const shrinkPct = 1; // Math.ceil(this.oxbowShrinkRate / oxpoints.length);\n                oxbow.points = oxpoints.reduce((ptacc, point, i) => {\n                    // Check check each channel segment for intersection with an oxbow segment\n                    // If it intersects, remove it\n                    const intersect = this.pointVectors.reduce((acc, cp, k) => {\n                        if (!acc) {\n                            const np = this.pointVectors[k + 1];\n                            const nop = oxpoints[i + 1];\n                            if (np && nop) {\n                                acc = linesIntersect(cp.x, cp.y, np.x, np.y, point[0], point[1], nop[0], nop[1]);\n                            }\n                        }\n                        return acc;\n                    }, false);\n\n                    if (!intersect) {\n                        // remove the first and last point\n                        if (i > shrinkPct && i < oxbow.points.length - shrinkPct) {\n                            ptacc.push(point);\n                        }\n                    }\n\n                    return ptacc;\n                }, []);\n                oxacc.push(oxbow);\n            }\n            return oxacc;\n        }, []);\n    }\n\n    // Execute one step\n    step() {\n        // Running stops if the line crosses it self at the ends and the whole segment is cut ad becomes an oxbow\n        if (this.running) {\n            // influence segments to sim flow and process points\n            let newPoints = this.wrapEnd\n                ? this.meanderWrapped(this.pointVectors)\n                : this.meanderLinear(this.pointVectors);\n            newPoints = this.adjustPointsSpacing(newPoints);\n            if (this.handleOxbows) newPoints = this.checkForOxbows(newPoints);\n\n            this.pointVectors = newPoints;\n\n            if (this.handleOxbows) this.oxbows = this.shrinkOxbows(this.oxbows);\n\n            // Record history\n            this.addToHistory(this.oxbows, va2pA(this.pointVectors));\n            this.steps++;\n        } else if (this.handleOxbows) this.oxbows = this.shrinkOxbows(this.oxbows);\n    }\n}\n\n// Push the flow right\nexport const flowRight = (p, m) => new Vector(1, 0);\n\n// Push right and towards the middle\nexport const flowRightToMiddle = (f, mid) => (p, m) => {\n    const dist = Math.abs(mid - p.y);\n    let y = mapRange(0, mid / 2, 0, f, dist);\n    if (p.y > mid) {\n        y *= -1;\n    }\n    return new Vector(1, y);\n};\n","import tinycolor from 'tinycolor2';\nimport { randomNormalWholeBetween, chaikin, mapRange } from '../lib/math';\nimport { background } from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { bicPenBlue, warmWhite } from '../lib/palettes';\nimport { MeanderingRiver, flowRightToMiddle } from '../lib/MeanderingRiver';\nimport { createSplinePoints, trimPoints } from '../lib/lineSegments';\nimport { simplexNoise2d, renderField, simplexNoise3d, cliffordAttractor, jongAttractor } from '../lib/attractors';\nimport { drawConnectedPoints, variableCircleAtPoint } from '../lib/canvas-linespoints';\nimport { createCirclePoints } from '../lib/grids';\n\n/*\nMeandering River class at ../lib/MeanderingRiver\n */\n\nconst createHorizontalPath = ({ width, height }, startX, startY, steps = 20) => {\n    const coords = [];\n    const incr = Math.round(width / steps);\n    const midx = width / 2;\n    for (let i = startX; i < width; i += incr) {\n        // greater variation in the middle\n        const midDist = Math.round(midx - Math.abs(i - midx));\n        const y = randomNormalWholeBetween(startY - midDist, startY + midDist);\n\n        coords.push([i, y]);\n    }\n    coords.push([width, startY]);\n    return coords;\n};\n\nconst createVerticalPath = ({ width, height }, startX, startY, steps = 20) => {\n    const coords = [];\n    const incr = Math.round(height / steps);\n    const midy = height / 2;\n    for (let i = startY; i < height; i += incr) {\n        // greater variation in the middle\n        const midDist = Math.round(midy - Math.abs(i - midy));\n        const x = randomNormalWholeBetween(startX - midDist, startX + midDist);\n\n        coords.push([x, i]);\n    }\n    coords.push([startX, height]);\n    return coords;\n};\n\nexport const meanderingRiver02 = () => {\n    const config = {\n        name: 'meandering-river-02',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    let ctx;\n    let canvasMidX;\n    let canvasMidY;\n    const rivers = [];\n    let time = 0;\n\n    // colors sampled from http://roberthodgin.com/project/meander\n    // const agedWarmWhite = tinycolor('hsl(42, 43%, 76%)');\n    // const tintingColor = tinycolor('hsl(38, 38%, 64%)');\n    // const palette = [\n    //     tinycolor('hsl(97, 9%, 73%)'),\n    //     tinycolor('hsl(51, 7%, 38%)'),\n    //     tinycolor('hsl(19, 39%, 47%)'),\n    //     tinycolor('hsl(166, 39%, 59%)'),\n    // ];\n\n    const backgroundColor = warmWhite;\n\n    // const simplex2d = (x, y) => simplexNoise2d(x, y, 0.002);\n    // const simplex3d = (x, y) => simplexNoise3d(x, y, time, 0.0005);\n    // const clifford = (x, y) => cliffordAttractor(canvas.width, canvas.height, x, y);\n    // const jong = (x, y) => jongAttractor(canvas.width, canvas.height, x, y);\n\n    const noise = (x, y) => simplexNoise2d(x, y, 0.002);\n    const maxHistory = 10;\n    const historyStep = 25;\n\n    const wrapped = false;\n\n    const setup = ({ canvas, context }) => {\n        ctx = context;\n        canvasMidX = canvas.width / 2;\n        canvasMidY = canvas.height / 2;\n        background(canvas, context)(backgroundColor);\n        const horizontal = createSplinePoints(createHorizontalPath(canvas, 0, canvasMidY, 40));\n        const vertical = createSplinePoints(createVerticalPath(canvas, canvasMidX, 0, 40));\n        const circle = createCirclePoints(canvasMidX, canvasMidY, canvasMidX / 2, Math.PI * 4, true);\n\n        const cs = {\n            mixTangentRatio: 0.45,\n            mixMagnitude: 1.25, // 1.75\n            curvemeasure: 4,\n            curvesize: 5,\n            pointremove: 5,\n            oxbowProx: 2.5,\n        };\n\n        const r0 = new MeanderingRiver(circle, {\n            maxHistory,\n            storeHistoryEvery: historyStep,\n            fixedEndPoints: 1,\n            influenceLimit: 0,\n            wrapEnd: true,\n            handleOxbows: true,\n\n            mixTangentRatio: cs.mixTangentRatio,\n            mixMagnitude: cs.mixMagnitude,\n            oxbowProx: cs.oxbowProx,\n            oxbowPointIndexProx: cs.curvemeasure,\n            measureCurveAdjacent: cs.curvemeasure,\n            curveSize: cs.curvesize,\n            pointRemoveProx: cs.pointremove,\n\n            // pushFlowVectorFn: flowRightToMiddle(0.5, canvasMidY),\n\n            noiseFn: noise,\n            noiseMode: 'mix',\n            noiseStrengthAffect: 0,\n            mixNoiseRatio: 0.3,\n        });\n\n        const r1 = new MeanderingRiver(vertical, {\n            maxHistory,\n            storeHistoryEvery: historyStep,\n            fixedEndPoints: 1,\n            influenceLimit: 0,\n            wrapEnd: wrapped,\n            handleOxbows: true,\n\n            mixTangentRatio: cs.mixTangentRatio,\n            mixMagnitude: cs.mixMagnitude,\n            oxbowProx: cs.oxbowProx,\n            oxbowPointIndexProx: cs.curvemeasure,\n            measureCurveAdjacent: cs.curvemeasure,\n            curveSize: cs.curvesize,\n            pointRemoveProx: cs.pointremove,\n\n            // pushFlowVectorFn: flowRightToMiddle(0.5, canvasMidY),\n\n            noiseFn: noise,\n            noiseMode: 'mix',\n            noiseStrengthAffect: 0,\n            mixNoiseRatio: 0.3,\n        });\n\n        const r2 = new MeanderingRiver(horizontal, {\n            maxHistory,\n            storeHistoryEvery: historyStep,\n            fixedEndPoints: 1,\n            influenceLimit: 0,\n            wrapEnd: wrapped,\n            handleOxbows: true,\n\n            mixTangentRatio: cs.mixTangentRatio,\n            mixMagnitude: cs.mixMagnitude,\n            oxbowProx: cs.oxbowProx,\n            oxbowPointIndexProx: cs.curvemeasure,\n            measureCurveAdjacent: cs.curvemeasure,\n            curveSize: cs.curvesize,\n            pointRemoveProx: cs.pointremove,\n\n            // pushFlowVectorFn: flowRightToMiddle(0.5, canvasMidY),\n\n            noiseFn: noise,\n            noiseMode: 'mix',\n            noiseStrengthAffect: 0,\n            mixNoiseRatio: 0.3,\n        });\n\n        rivers.push(r0, r2);\n    };\n\n    const draw = ({ canvas, context }) => {\n        // background(canvas, context)(backgroundColor.clone().setAlpha(0.005));\n        // renderField(canvas, context, noise, 'rgba(0,0,0,.5)', 30, 15);\n\n        // https://colorhunt.co/palette/264684\n        const riverColor = [bicPenBlue, tinycolor('#fed049')];\n        const closed = [true, false];\n\n        // step\n        rivers.forEach((r) => {\n            r.step();\n        });\n\n        // main\n        rivers.forEach((r, i) => {\n            const c = riverColor[i].clone().setAlpha(0.15); // tinycolor(`hsl(${time},70,50)`);\n\n            // r.oxbows.forEach((o) => {\n            //     // const w = Math.abs(mapRange(0, o.startLength, riverWeight[i] / 2, riverWeight[i], o.points.length));\n            //     drawConnectedPoints(ctx)(o.points, c, 1);\n            // });\n\n            const points = chaikin(r.points, 8);\n            if (points.length) drawConnectedPoints(ctx)(points, c, 2, closed[i]);\n        });\n\n        // if (++time > 1000) {\n        // return -1;\n        // }\n\n        time += 0.25;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport { randomNormalWholeBetween, chaikin, mapRange } from '../lib/math';\nimport { background } from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { bicPenBlue, warmWhite } from '../lib/palettes';\nimport { MeanderingRiver, flowRightToMiddle } from '../lib/MeanderingRiver';\nimport { createSplinePoints, trimPoints } from '../lib/lineSegments';\nimport { simplexNoise2d, renderField, renderFieldColor, renderFieldContour } from '../lib/attractors';\nimport { drawConnectedPoints, drawPoints, variableCircleAtPoint } from '../lib/canvas-linespoints';\nimport { createCirclePoints } from '../lib/grids';\n\n/*\nMeandering River class at ../lib/MeanderingRiver\n */\n\nconst createHorizontalPath = ({ width, height }, startX, startY, steps = 20) => {\n    const coords = [];\n    const incr = Math.round(width / steps);\n    const midx = width / 2;\n    for (let i = startX; i < width; i += incr) {\n        // greater variation in the middle\n        const midDist = Math.round(midx - Math.abs(i - midx));\n        const y = randomNormalWholeBetween(startY - midDist, startY + midDist);\n\n        coords.push([i, y]);\n    }\n    coords.push([width, startY]);\n    return coords;\n};\n\nexport const meanderingRiver01 = () => {\n    const config = {\n        name: 'meandering-river-01',\n        ratio: ratio.poster,\n        scale: scale.standard,\n        // drawLimit: 100,\n    };\n\n    let ctx;\n    let canvasMidX;\n    let canvasMidY;\n    const rivers = [];\n    let time = 0;\n\n    const backgroundColor = warmWhite;\n\n    const riverColor = warmWhite.clone().brighten(20);\n    const riverWeight = [15, 10];\n    const oxbowColor = riverColor.clone();\n    const outlineColor = bicPenBlue.setAlpha(0.25);\n\n    const tintingColor = tinycolor('hsl(38, 38%, 64%)');\n    const palette = [\n        tinycolor('hsl(97, 9%, 73%)'),\n        tinycolor('hsl(51, 7%, 38%)'),\n        tinycolor('hsl(19, 39%, 47%)'),\n        tinycolor('hsl(166, 39%, 59%)'),\n        tinycolor.mix('hsl(97, 9%, 73%)', tintingColor, 25),\n        tinycolor.mix('hsl(51, 7%, 38%)', tintingColor, 25),\n        tinycolor.mix('hsl(19, 39%, 47%)', tintingColor, 25),\n        tinycolor.mix('hsl(166, 39%, 59%)', tintingColor, 25),\n        tinycolor.mix('hsl(97, 9%, 73%)', tintingColor, 55),\n        tinycolor.mix('hsl(51, 7%, 38%)', tintingColor, 55),\n        tinycolor.mix('hsl(19, 39%, 47%)', tintingColor, 55),\n        tinycolor.mix('hsl(166, 39%, 59%)', tintingColor, 55),\n        tinycolor.mix('hsl(97, 9%, 73%)', tintingColor, 75),\n        tinycolor.mix('hsl(51, 7%, 38%)', tintingColor, 75),\n        tinycolor.mix('hsl(19, 39%, 47%)', tintingColor, 75),\n        tinycolor.mix('hsl(166, 39%, 59%)', tintingColor, 75),\n    ].reverse();\n\n    const flatColor = backgroundColor.clone().darken(10);\n\n    const noise = (x, y) => simplexNoise2d(x, y, 0.001);\n    const maxHistory = 15;\n    const historyStep = 15;\n\n    const setup = ({ canvas, context }) => {\n        ctx = context;\n        canvasMidX = canvas.width / 2;\n        canvasMidY = canvas.height / 2;\n\n        const horizpoints = createSplinePoints(createHorizontalPath(canvas, 0, canvasMidY, 15));\n        const circlepoints = createCirclePoints(canvasMidX, canvasMidY, canvasMidX / 2, Math.PI * 4, true);\n\n        const cs = {\n            mixTangentRatio: 0.6,\n            mixMagnitude: 1.25,\n            curvemeasure: 4,\n            curvesize: 3,\n            pointremove: 4,\n            oxbowProx: 3,\n        };\n\n        const horizontal = new MeanderingRiver(horizpoints, {\n            maxHistory,\n            storeHistoryEvery: historyStep,\n            fixedEndPoints: 2,\n            influenceLimit: 0,\n\n            mixTangentRatio: 0.6,\n            mixMagnitude: 1.5,\n            oxbowProx: 3,\n            oxbowPointIndexProx: 4,\n            measureCurveAdjacent: 6,\n            curveSize: 4,\n            pointRemoveProx: 4,\n\n            pushFlowVectorFn: flowRightToMiddle(0.5, canvasMidY),\n\n            noiseFn: noise,\n            noiseMode: 'flowInTo',\n            noiseStrengthAffect: 3,\n            mixNoiseRatio: 0.3,\n        });\n\n        const circular = new MeanderingRiver(circlepoints, {\n            maxHistory,\n            storeHistoryEvery: historyStep,\n            fixedEndPoints: 1,\n            influenceLimit: 0,\n            wrapEnd: true,\n\n            mixTangentRatio: 0.45,\n            mixMagnitude: 1,\n            oxbowProx: 2,\n            oxbowPointIndexProx: 2,\n            measureCurveAdjacent: 10,\n            curveSize: 5,\n            pointRemoveProx: 3,\n\n            // pushFlowVectorFn: flowRightToMiddle(0.5, canvasMidY),\n\n            noiseFn: noise,\n            noiseMode: 'flowInTo',\n            noiseStrengthAffect: 0,\n            mixNoiseRatio: 0.4,\n        });\n\n        rivers.push(horizontal);\n        // rivers.push(circular);\n\n        // Run some steps before render to smooth lines\n        for (let i = 0; i < 30; i++) {\n            rivers.forEach((r) => {\n                r.step();\n            });\n        }\n\n        background(canvas, context)(backgroundColor);\n        renderFieldColor(canvas, context, noise, 100, flatColor, backgroundColor, 4);\n        renderFieldContour(\n            canvas,\n            context,\n            noise,\n            -8,\n            8,\n            15,\n            flatColor.clone().darken(5),\n            backgroundColor.clone().brighten(1)\n        );\n    };\n\n    const draw = ({ canvas, context }) => {\n        // step\n        rivers.forEach((r) => {\n            r.step();\n        });\n\n        const oColor = palette[Math.round(time * 0.01) % palette.length]; // .clone().setAlpha(0.75);\n        const oSize = 4;\n\n        // outline\n        rivers.forEach((r, i) => {\n            r.oxbows.forEach((o) => {\n                const w = Math.abs(mapRange(0, o.startLength, 1, riverWeight[i] * 1.5, o.points.length));\n                drawConnectedPoints(ctx)(o.points, oColor, w + oSize / 2);\n            });\n            const points = chaikin(r.points, 5);\n            drawConnectedPoints(ctx)(points, oColor, riverWeight[i] + oSize);\n        });\n\n        // main\n        rivers.forEach((r, i) => {\n            r.oxbows.forEach((o) => {\n                const w = Math.abs(mapRange(0, o.startLength, riverWeight[i] / 2, riverWeight[i], o.points.length));\n                drawConnectedPoints(ctx)(o.points, oxbowColor, w);\n            });\n            const points = chaikin(r.points, 5);\n            drawConnectedPoints(ctx)(points, riverColor, riverWeight[i], false, false);\n            // drawPoints(ctx)(r.points, 'red', 1);\n        });\n\n        time++;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import { variation1 } from './released/variation1';\nimport { variation2 } from './released/variation2';\nimport { domokun } from './released/domokun';\nimport { variation4 } from './released/variation4';\nimport { variation5 } from './released/variation5';\nimport { variation6 } from './released/variation6';\nimport { rainbowRakeOrbit } from './released/rainbow-rake-orbit-mouse';\nimport { threeAttractors } from './released/threeAttractors';\nimport { hiImage01 } from './released/hiImage01';\nimport { windLines } from './released/windLines';\nimport { waves01 } from './released/waves01';\nimport { lissajous01 } from './released/lissajous01';\nimport { flowFieldParticles } from './released/flow-field-particles';\nimport { flowFieldArcs } from './released/flow-field-arcs';\nimport { flowFieldImage } from './released/flow-field-image';\nimport { radialNoise } from './released/radial-noise';\nimport { flowFieldRibbons } from './released/flow-field-ribbons';\nimport { flowFieldRibbons2 } from './released/flow-field-ribbons-2';\nimport { shadedBoxes } from './released/shaded-boxes';\nimport { larrycarlson02 } from './released/larrycarlson02';\nimport { meanderingRiver02 } from './released/meandering-river-02';\nimport { meanderingRiver01 } from './released/meandering-river-01';\n\nexport const variationsIndex = {\n    1: {\n        note: 'Particles are attracted to the pointer. Press to repel.',\n        sketch: variation1,\n    },\n    2: {\n        note: 'Press to increase speed.',\n        sketch: variation2,\n    },\n    3: {\n        note: 'Particles are repelled from the pointer. Press to attract.',\n        sketch: domokun,\n    },\n    4: {\n        note: 'Particles are repelled from the pointer. Press to attract.',\n        sketch: variation4,\n    },\n    5: {\n        note: 'Sit back and watch.',\n        sketch: variation5,\n    },\n    6: {\n        note: 'Move the mouse',\n        sketch: variation6,\n    },\n    7: {\n        note: 'Rakes orbit center and the mouse. Click to repel.',\n        sketch: rainbowRakeOrbit,\n    },\n    8: {\n        note: 'One attractor in the center, two on the sides.',\n        sketch: threeAttractors,\n    },\n    9: {\n        note: 'Say Hi',\n        sketch: hiImage01,\n    },\n    10: {\n        note: 'In the breeze',\n        sketch: windLines,\n    },\n    11: {\n        note: 'Inspired by Churn, Kenny Vaden https://www.reddit.com/r/generative/comments/lq8r11/churn_r_code/',\n        sketch: waves01,\n    },\n    12: {\n        note: 'Experimenting with rose shapes. Refresh for new randomized set.',\n        sketch: lissajous01,\n    },\n    13: {\n        note: 'Particles and fibers flowing with 3d simplex noise.',\n        sketch: flowFieldParticles,\n    },\n    14: {\n        note: 'Arcs flowing with 3d simplex noise.',\n        sketch: flowFieldArcs,\n    },\n    15: {\n        note: 'Rendering an image with flow fields. Photo by Francesca Zama https://unsplash.com/photos/OFjnQOf1pPA',\n        sketch: flowFieldImage,\n    },\n    16: {\n        note: 'Simplex noise going around ...',\n        sketch: radialNoise,\n    },\n    17: {\n        note: 'Ribbons attracted to an attractor',\n        sketch: flowFieldRibbons,\n    },\n    18: {\n        note: 'Ribbons attracted to an attractor',\n        sketch: flowFieldRibbons2,\n    },\n    19: {\n        note: 'Shaded boxes with flow field particles.',\n        sketch: shadedBoxes,\n    },\n    20: {\n        note: 'Render an image in the wavy art style of Larry Carlson',\n        sketch: larrycarlson02,\n    },\n    21: {\n        note: 'Based on \"Meander\" by Robert Hodgin and an implementation by Eric on Reddit',\n        sketch: meanderingRiver02,\n    },\n    22: {\n        note: 'Meandering river over landscape. Refresh for new terrain. Based on \"Meander\" by Robert Hodgin.',\n        sketch: meanderingRiver01,\n    },\n};\n","/*\nExplorations with generative code\n*/\n\nimport normalize from 'normalize.css';\nimport { sketch } from './lib/sketch';\nimport { variationsIndex } from './variationsIndex';\nimport { meanderingRiver01 } from './released/meandering-river-01';\n\nconst experimentalVariation = undefined;\n// const experimentalVariation = meanderingRiver01;\n\nconst s = sketch();\n\nconst saveCanvasCapture = (_) => {\n    console.log('Saving capture');\n    const imageURI = s.canvas().toDataURL('image/png');\n    document.getElementById('download').setAttribute('download', `${s.variationName()}.png`);\n    document.getElementById('download').href = imageURI;\n};\n\ndocument.getElementById('download').addEventListener('click', saveCanvasCapture);\nwindow.addEventListener('keydown', (e) => {\n    if (e.key === 's') {\n        document.getElementById('download').click();\n    }\n});\n\nconst setNote = (note) => (document.getElementById('note').innerText = note);\n\nconst getQueryVariable = (variable) => {\n    const query = window.location.search.substring(1);\n    const vars = query.split('&');\n    for (let i = 0; i < vars.length; i++) {\n        const pair = vars[i].split('=');\n        if (pair[0] === variable) {\n            return pair[1];\n        }\n    }\n    return false;\n};\n\nlet variationKey = getQueryVariable('variation');\nconst variationKeys = Object.keys(variationsIndex);\nvariationKey = variationKey || variationKeys[variationKeys.length - 1];\n\nif (getQueryVariable('variation') && variationsIndex.hasOwnProperty(variationKey)) {\n    const vToRun = variationsIndex[variationKey];\n    setNote(vToRun.note);\n    s.run(vToRun.sketch);\n} else if (experimentalVariation !== undefined) {\n    s.run(experimentalVariation);\n    setNote('Current experiment ...');\n} else {\n    const vToRun = variationsIndex[variationKeys.length];\n    setNote(vToRun.note);\n    s.run(vToRun.sketch);\n}\n"]}