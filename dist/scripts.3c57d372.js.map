{"version":3,"sources":["node_modules/tinycolor2/tinycolor.js","node_modules/seed-random/index.js","node_modules/simplex-noise/simplex-noise.js","node_modules/defined/index.js","node_modules/canvas-sketch-util/random.js","scripts/lib/Vector.js","scripts/lib/math.js","scripts/lib/canvas.js","scripts/lib/sketch.js","node_modules/nice-color-palettes/100.json","scripts/lib/palettes.js","scripts/released/lissajous01.js","scripts/released/waves01.js","scripts/lib/Timeline.js","scripts/released/windLines.js","scripts/lib/Particle.js","scripts/released/hiImage01.js","scripts/released/variation1.js","scripts/released/variation2.js","scripts/released/domokun.js","scripts/released/variation4.js","scripts/released/variation5.js","scripts/released/variation6.js","scripts/released/rainbow-rake-orbit-mouse.js","scripts/released/threeAttractors.js","scripts/lib/attractors.js","scripts/experiments/flow-field-tiles.js","scripts/released/flow-field-particles.js","scripts/lib/Bitmap.js","scripts/released/flow-field-image.js","scripts/released/flow-field-arcs.js","scripts/released/radial-noise.js","scripts/experiments/radial-image.js","scripts/released/flow-field-ribbons.js","scripts/released/flow-field-ribbons-2.js","scripts/index.js"],"names":["Vector","x","y","z","prototype","negative","add","v","sub","mult","div","equals","dot","cross","length","Math","sqrt","mag","magSq","m","setMag","c","r","normalize","unit","divide","min","max","limit","cm","toAngles","theta","atan2","phi","asin","angleTo","a","acos","toArray","n","slice","clone","init","b","subtract","multiply","fromAngles","cos","sin","randomDirection","random","PI","lerp","fraction","fromArray","angleBetween","Ï€","TAU","abs","tan","pow","round","floor","setSeed","getRandomSeed","console","log","getSeed","golden","fibonacci","snapNumber","snap","houghQuantize","numAngles","quantize","round2","num","Number","EPSILON","setRandomSeed","s","randomNumberBetween","value","randomWholeBetween","randomNumberBetweenMid","randomSign","randomBoolean","randomChance","chance","oneOf","arry","lowest","reduce","acc","highest","createRandomNumberArray","len","Array","from","map","loopingValue","t","pingPontValue","pointOnCircle","val","normalizeInverse","clamp","invlerp","mapRange","x1","y1","x2","y2","toSinValue","marginify","margin","u","width","height","pointDistance","pointA","pointB","dx","dy","pointRotateCoord","point","angle","pointAngleFromVelocity","velocityX","velocityY","aFromVector","uvFromAngle","radiansToDegrees","rad","degreesToRadians","deg","scalePointToCanvas","canvasWidth","canvasHeight","zoomFactor","create2dNoise","amplitude","frequency","noise2D","create2dNoiseAbs","create3dNoise","noise3D","create3dNoiseAbs","randomPointAround","range","radius","createCirclePoints","offsetX","offsetY","diameter","steps","sx","sy","points","push","createGridPointsXY","xMargin","yMargin","columns","rows","gridPoints","colStep","rowStep","col","row","columnWidth","rowHeight","createGridCellsXY","gutter","ceil","createGridPointsUV","rotation","position","isHiDPI","contextScale","resizeCanvas","canvas","context","scale","window","devicePixelRatio","style","clearCanvas","_","clearRect","fillCanvas","opacity","color","fillStyle","fillRect","background","toRgbString","resetStyles","strokeStyle","lineWidth","setLineDash","lineCap","sharpLines","translate","blendMode","mode","globalCompositeOperation","pixel","beginPath","arc","fill","drawParticlePoint","setStokeColor","drawLine","strokeWidth","linecap","moveTo","lineTo","stroke","drawLineAngle","vect","drawCircle","drawCircleFilled","drawRect","w","h","rect","drawRectFilled","drawSquareFilled","size","drawTriangleFilled","half","drawQuadRectFilled","mx","my","quadraticCurveTo","drawRoundRectFilled","corner","textStyles","default","small","drawTextFilled","text","font","fillText","textAlignLeftTop","textAlign","textBaseline","textAlignAllCenter","drawRake","spacing","i","drawSpikeCircle","spikes","spikeLength","splatter","amount","xoff","yoff","drawRotatedParticle","ctx","drawFn","particle","pSaveX","pSaveY","save","rotate","heading","args","restore","connectParticles","pArray","proximity","useAlpha","pA","pB","distance","pColor","setAlpha","toHslString","drawPointTrail","trailLen","xHistory","aFade","alpha","sFade","startX","startY","yHistory","drawTestPoint","drawParticleVectors","vmult","vVector","aVector","vel","drawMouse","undefined","drawAttractor","mass","g","renderField","fn","cell","mid","getImageDataFromImage","image","drawImage","getImageData","getColorAverageGrey","getImageDataColor","imageData","data","orientation","portrait","landscape","ratio","letter","square","auto","standard","hidpi","defaultValue","obj","key","hasOwnProperty","sketch","mouse","currentVariation","isDown","fps","document","getElementById","getContext","mouseDown","evt","mouseMove","canvasFrame","getBoundingClientRect","mouseUp","mouseOut","addEventListener","variationName","seed","name","config","run","variation","innerWidth","innerHeight","newWidth","newHeight","cfgOrientation","cfgRatio","cfgScale","aSide","bSide","applyCanvasSize","rendering","lastAnimationFrameTime","targetFpsInterval","startSketch","removeEventListener","setup","Date","now","requestAnimationFrame","renderAtFps","elapsed","draw","render","asTinyColor","brightest","colors","getBrightness","darkest","warmWhite","warmPink","coolGreyDark","warmGreyDark","palettes","greyWarm","greyCool","pop","retro_sunset","vapor_wave","thought_provoking","nicePalette","nicepalettes","palette","Object","keys","hslFromRange","l","Curve","speed","noise","originX","originY","xa","xb","ya","yb","centerX","centerY","lissajous01","grid","curves","colorBackground","lighten","colorCurve","darken","colorText","desaturate","roseX","curve","k","roseY","forEach","tick","createWave","cfrequency","camplitude","drawWaveLine","startx","endx","yorigin","topWave","bottomWave","dots","currentX","currentY","waveColor","lineheight","gradient","createLinearGradient","addColorStop","xstep","dotColor","rnd","waves01","canvasMiddle","waveRows","maxY","waves","incrementY","cosOffset","createWavesRow","idx","distFromCenter","top","bottom","buffer","tinycolor","mix","spin","brighten","Timeline","loop","duration","totalLoopFrames","iterations","time","playhead","frame","elapsedLoops","startTime","windLines","counter","timeline","wave","startvect","onFrame","MAX_COORD_HISTORY","limitArrayLen","arr","arrLength","splice","Particle","values","initValues","index","accelerationX","accelerationY","lifetime","updateFn","colorFn","rest","props","oX","oY","res","warn","unshift","psCanvasRandom","createRandomParticleValues","coords","updatePosWithVelocity","applyForce","fVect","fV","aV","pV","friction","mu","normal","vfriction","drag","coefficent","velUnit","vdrag","attract","affectDist","dir","distanceSq","strength","force","edgeBounce","edgeWrap","gravityPoint","f","forceDirectionX","forceDirectionY","tempX","tempY","avoidPoint","attractPoint","pointPush","hiImage01","imageZoomFactor","png","Image","src","sourcePng","numParticles","particlesArray","particleColor","variation1","canvasCenterX","canvasCenterY","centerRadius","variation2","gravity","decay","tweenDamp","intensity","newValues","newCoords","domokun","domokunPng","pxColor","pX","pY","variation4","circles","variation5","variation6","hue","rainbowRakeOrbit","attractor","threeAttractors","attractorDist","leftattractor","midattractor","rightattractor","simplexNoise2d","simplexNoise3d","diagLines","sinField","d","cliffordAttractor","jongAttractor","flowAtPoint","canvasMidX","canvasMidY","tile","flowFieldTiles","tileHistory","currentTilePos","drawTile","smallerTile","tileSize","pos","includes","checkHistory","drawFibers","createRandomParticle","saturation","brightness","saturate","concat","flowFieldParticles","drawPixel","pcolor","maxSize","sNoise3d","clr","drawParticles","Bitmap","scaleX","scaleY","scaley","clear","pixelColorRaw","pixelAverageGrey","pixelColor","pixelTheta","flowFieldImage","backgroundColor","imageFlow","pixelThetaFromCanvas","drawParticle","fromCenter","imagePixelColor","pixelColorFromCanvas","imagePixelBrightness","hslColor","thick","startR","endR","circle","line","flowFieldArcs","arcColor","lineColor","radialNoise","maxRadius","radiusScale","currentRadiusSize","history","imageColor","circleX","circleY","ox","oy","radScaled","radians","monoColor","offs","radialImage","getImagePixelColor","imagePixel","drawRibbonPoint","thickness","drawRibbon","sideA","sideB","starty","endy","rColor","flowFieldRibbons","createRibbon","fieldFn","vlimit","clifford","ribbonThickness","rpoint","onCircle","reverse","drawRibbonSegment","segStartX","segStartY","segEndY","segments","segmentData","left","start","flowFieldRibbons2","ribbonLen","maxItterations","currentItteration","DEBUG","saveCanvasCapture","imageURI","toDataURL","setAttribute","href","e","click","setNote","note","innerText","getQueryVariable","variable","query","vars","location","search","substring","split","pair","variations","variationKey","variationKeys","vToRun"],"mappings":"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AAA,SACA,WAAA,SACA,UAAA,SACA,MAAA,SACA,eAAA,SACA,SAAA,SACA,QAAA,SACA,KAAA,MACA,SAAA,SACA,SAAA,SACA,cAAA,SACA,SAAA,SACA,UAAA,SACA,SAAA,SACA,UAAA,SACA,YAAA,SACA,eAAA,SACA,WAAA,SACA,WAAA,SACA,QAAA,SACA,WAAA,SACA,aAAA,SACA,cAAA,SACA,cAAA,SACA,cAAA,SACA,cAAA,SACA,WAAA,SACA,SAAA,SACA,YAAA,SACA,QAAA,SACA,QAAA,SACA,WAAA,SACA,UAAA,SACA,YAAA,SACA,YAAA,SACA,QAAA,MACA,UAAA,SACA,WAAA,SACA,KAAA,SACA,UAAA,SACA,KAAA,SACA,MAAA,SACA,YAAA,SACA,KAAA,SACA,SAAA,SACA,QAAA,SACA,UAAA,SACA,OAAA,SACA,MAAA,SACA,MAAA,SACA,SAAA,SACA,cAAA,SACA,UAAA,SACA,aAAA,SACA,UAAA,SACA,WAAA,SACA,UAAA,SACA,qBAAA,SACA,UAAA,SACA,WAAA,SACA,UAAA,SACA,UAAA,SACA,YAAA,SACA,cAAA,SACA,aAAA,SACA,eAAA,MACA,eAAA,MACA,eAAA,SACA,YAAA,SACA,KAAA,MACA,UAAA,SACA,MAAA,SACA,QAAA,MACA,OAAA,SACA,iBAAA,SACA,WAAA,SACA,aAAA,SACA,aAAA,SACA,eAAA,SACA,gBAAA,SACA,kBAAA,SACA,gBAAA,SACA,gBAAA,SACA,aAAA,SACA,UAAA,SACA,UAAA,SACA,SAAA,SACA,YAAA,SACA,KAAA,SACA,QAAA,SACA,MAAA,SACA,UAAA,SACA,OAAA,SACA,UAAA,SACA,OAAA,SACA,cAAA,SACA,UAAA,SACA,cAAA,SACA,cAAA,SACA,WAAA,SACA,UAAA,SACA,KAAA,SACA,KAAA,SACA,KAAA,SACA,WAAA,SACA,OAAA,SACA,cAAA,SACA,IAAA,MACA,UAAA,SACA,UAAA,SACA,YAAA,SACA,OAAA,SACA,WAAA,SACA,SAAA,SACA,SAAA,SACA,OAAA,SACA,OAAA,SACA,QAAA,SACA,UAAA,SACA,UAAA,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","file":"scripts.3c57d372.js","sourceRoot":"..","sourcesContent":["// TinyColor v1.4.2\n// https://github.com/bgrins/TinyColor\n// Brian Grinstead, MIT License\n\n(function(Math) {\n\nvar trimLeft = /^\\s+/,\n    trimRight = /\\s+$/,\n    tinyCounter = 0,\n    mathRound = Math.round,\n    mathMin = Math.min,\n    mathMax = Math.max,\n    mathRandom = Math.random;\n\nfunction tinycolor (color, opts) {\n\n    color = (color) ? color : '';\n    opts = opts || { };\n\n    // If input is already a tinycolor, return itself\n    if (color instanceof tinycolor) {\n       return color;\n    }\n    // If we are called as a function, call using new instead\n    if (!(this instanceof tinycolor)) {\n        return new tinycolor(color, opts);\n    }\n\n    var rgb = inputToRGB(color);\n    this._originalInput = color,\n    this._r = rgb.r,\n    this._g = rgb.g,\n    this._b = rgb.b,\n    this._a = rgb.a,\n    this._roundA = mathRound(100*this._a) / 100,\n    this._format = opts.format || rgb.format;\n    this._gradientType = opts.gradientType;\n\n    // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n    if (this._r < 1) { this._r = mathRound(this._r); }\n    if (this._g < 1) { this._g = mathRound(this._g); }\n    if (this._b < 1) { this._b = mathRound(this._b); }\n\n    this._ok = rgb.ok;\n    this._tc_id = tinyCounter++;\n}\n\ntinycolor.prototype = {\n    isDark: function() {\n        return this.getBrightness() < 128;\n    },\n    isLight: function() {\n        return !this.isDark();\n    },\n    isValid: function() {\n        return this._ok;\n    },\n    getOriginalInput: function() {\n      return this._originalInput;\n    },\n    getFormat: function() {\n        return this._format;\n    },\n    getAlpha: function() {\n        return this._a;\n    },\n    getBrightness: function() {\n        //http://www.w3.org/TR/AERT#color-contrast\n        var rgb = this.toRgb();\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    getLuminance: function() {\n        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        var rgb = this.toRgb();\n        var RsRGB, GsRGB, BsRGB, R, G, B;\n        RsRGB = rgb.r/255;\n        GsRGB = rgb.g/255;\n        BsRGB = rgb.b/255;\n\n        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}\n        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}\n        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}\n        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);\n    },\n    setAlpha: function(value) {\n        this._a = boundAlpha(value);\n        this._roundA = mathRound(100*this._a) / 100;\n        return this;\n    },\n    toHsv: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\n    },\n    toHsvString: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\n        return (this._a == 1) ?\n          \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\n          \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\n    },\n    toHsl: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\n    },\n    toHslString: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\n        return (this._a == 1) ?\n          \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\n          \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\n    },\n    toHex: function(allow3Char) {\n        return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function(allow3Char) {\n        return '#' + this.toHex(allow3Char);\n    },\n    toHex8: function(allow4Char) {\n        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n    },\n    toHex8String: function(allow4Char) {\n        return '#' + this.toHex8(allow4Char);\n    },\n    toRgb: function() {\n        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\n    },\n    toRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\n          \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\n    },\n    toPercentageRgb: function() {\n        return { r: mathRound(bound01(this._r, 255) * 100) + \"%\", g: mathRound(bound01(this._g, 255) * 100) + \"%\", b: mathRound(bound01(this._b, 255) * 100) + \"%\", a: this._a };\n    },\n    toPercentageRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" :\n          \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n    },\n    toName: function() {\n        if (this._a === 0) {\n            return \"transparent\";\n        }\n\n        if (this._a < 1) {\n            return false;\n        }\n\n        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function(secondColor) {\n        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n        var secondHex8String = hex8String;\n        var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n\n        if (secondColor) {\n            var s = tinycolor(secondColor);\n            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n        }\n\n        return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\n    },\n    toString: function(format) {\n        var formatSet = !!format;\n        format = format || this._format;\n\n        var formattedString = false;\n        var hasAlpha = this._a < 1 && this._a >= 0;\n        var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n\n        if (needsAlphaFormat) {\n            // Special case for \"transparent\", all other non-alpha formats\n            // will return rgba when there is transparency.\n            if (format === \"name\" && this._a === 0) {\n                return this.toName();\n            }\n            return this.toRgbString();\n        }\n        if (format === \"rgb\") {\n            formattedString = this.toRgbString();\n        }\n        if (format === \"prgb\") {\n            formattedString = this.toPercentageRgbString();\n        }\n        if (format === \"hex\" || format === \"hex6\") {\n            formattedString = this.toHexString();\n        }\n        if (format === \"hex3\") {\n            formattedString = this.toHexString(true);\n        }\n        if (format === \"hex4\") {\n            formattedString = this.toHex8String(true);\n        }\n        if (format === \"hex8\") {\n            formattedString = this.toHex8String();\n        }\n        if (format === \"name\") {\n            formattedString = this.toName();\n        }\n        if (format === \"hsl\") {\n            formattedString = this.toHslString();\n        }\n        if (format === \"hsv\") {\n            formattedString = this.toHsvString();\n        }\n\n        return formattedString || this.toHexString();\n    },\n    clone: function() {\n        return tinycolor(this.toString());\n    },\n\n    _applyModification: function(fn, args) {\n        var color = fn.apply(null, [this].concat([].slice.call(args)));\n        this._r = color._r;\n        this._g = color._g;\n        this._b = color._b;\n        this.setAlpha(color._a);\n        return this;\n    },\n    lighten: function() {\n        return this._applyModification(lighten, arguments);\n    },\n    brighten: function() {\n        return this._applyModification(brighten, arguments);\n    },\n    darken: function() {\n        return this._applyModification(darken, arguments);\n    },\n    desaturate: function() {\n        return this._applyModification(desaturate, arguments);\n    },\n    saturate: function() {\n        return this._applyModification(saturate, arguments);\n    },\n    greyscale: function() {\n        return this._applyModification(greyscale, arguments);\n    },\n    spin: function() {\n        return this._applyModification(spin, arguments);\n    },\n\n    _applyCombination: function(fn, args) {\n        return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function() {\n        return this._applyCombination(analogous, arguments);\n    },\n    complement: function() {\n        return this._applyCombination(complement, arguments);\n    },\n    monochromatic: function() {\n        return this._applyCombination(monochromatic, arguments);\n    },\n    splitcomplement: function() {\n        return this._applyCombination(splitcomplement, arguments);\n    },\n    triad: function() {\n        return this._applyCombination(triad, arguments);\n    },\n    tetrad: function() {\n        return this._applyCombination(tetrad, arguments);\n    }\n};\n\n// If input is an object, force 1 into \"1.0\" to handle ratios properly\n// String input requires \"1.0\" as input, so 1 will be treated as 1\ntinycolor.fromRatio = function(color, opts) {\n    if (typeof color == \"object\") {\n        var newColor = {};\n        for (var i in color) {\n            if (color.hasOwnProperty(i)) {\n                if (i === \"a\") {\n                    newColor[i] = color[i];\n                }\n                else {\n                    newColor[i] = convertToPercentage(color[i]);\n                }\n            }\n        }\n        color = newColor;\n    }\n\n    return tinycolor(color, opts);\n};\n\n// Given a string or object, convert that input to RGB\n// Possible string inputs:\n//\n//     \"red\"\n//     \"#f00\" or \"f00\"\n//     \"#ff0000\" or \"ff0000\"\n//     \"#ff000000\" or \"ff000000\"\n//     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n//     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n//     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n//     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n//     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n//     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n//     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n//\nfunction inputToRGB(color) {\n\n    var rgb = { r: 0, g: 0, b: 0 };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n\n    if (typeof color == \"string\") {\n        color = stringInputToObject(color);\n    }\n\n    if (typeof color == \"object\") {\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n            rgb = rgbToRgb(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n            s = convertToPercentage(color.s);\n            v = convertToPercentage(color.v);\n            rgb = hsvToRgb(color.h, s, v);\n            ok = true;\n            format = \"hsv\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n            s = convertToPercentage(color.s);\n            l = convertToPercentage(color.l);\n            rgb = hslToRgb(color.h, s, l);\n            ok = true;\n            format = \"hsl\";\n        }\n\n        if (color.hasOwnProperty(\"a\")) {\n            a = color.a;\n        }\n    }\n\n    a = boundAlpha(a);\n\n    return {\n        ok: ok,\n        format: color.format || format,\n        r: mathMin(255, mathMax(rgb.r, 0)),\n        g: mathMin(255, mathMax(rgb.g, 0)),\n        b: mathMin(255, mathMax(rgb.b, 0)),\n        a: a\n    };\n}\n\n\n// Conversion Functions\n// --------------------\n\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n// `rgbToRgb`\n// Handle bounds / percentage checking to conform to CSS color spec\n// <http://www.w3.org/TR/css3-color/>\n// *Assumes:* r, g, b in [0, 255] or [0, 1]\n// *Returns:* { r, g, b } in [0, 255]\nfunction rgbToRgb(r, g, b){\n    return {\n        r: bound01(r, 255) * 255,\n        g: bound01(g, 255) * 255,\n        b: bound01(b, 255) * 255\n    };\n}\n\n// `rgbToHsl`\n// Converts an RGB color value to HSL.\n// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n// *Returns:* { h, s, l } in [0,1]\nfunction rgbToHsl(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, l = (max + min) / 2;\n\n    if(max == min) {\n        h = s = 0; // achromatic\n    }\n    else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n\n        h /= 6;\n    }\n\n    return { h: h, s: s, l: l };\n}\n\n// `hslToRgb`\n// Converts an HSL color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nfunction hslToRgb(h, s, l) {\n    var r, g, b;\n\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n\n    function hue2rgb(p, q, t) {\n        if(t < 0) t += 1;\n        if(t > 1) t -= 1;\n        if(t < 1/6) return p + (q - p) * 6 * t;\n        if(t < 1/2) return q;\n        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n        return p;\n    }\n\n    if(s === 0) {\n        r = g = b = l; // achromatic\n    }\n    else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1/3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1/3);\n    }\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHsv`\n// Converts an RGB color value to HSV\n// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n// *Returns:* { h, s, v } in [0,1]\nfunction rgbToHsv(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, v = max;\n\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n\n    if(max == min) {\n        h = 0; // achromatic\n    }\n    else {\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, v: v };\n}\n\n// `hsvToRgb`\n// Converts an HSV color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\n function hsvToRgb(h, s, v) {\n\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n\n    var i = Math.floor(h),\n        f = h - i,\n        p = v * (1 - s),\n        q = v * (1 - f * s),\n        t = v * (1 - (1 - f) * s),\n        mod = i % 6,\n        r = [v, q, p, p, t, v][mod],\n        g = [t, v, v, q, p, p][mod],\n        b = [p, p, t, v, v, q][mod];\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHex`\n// Converts an RGB color to hex\n// Assumes r, g, and b are contained in the set [0, 255]\n// Returns a 3 or 6 character hex\nfunction rgbToHex(r, g, b, allow3Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    // Return a 3 character hex if possible\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToHex`\n// Converts an RGBA color plus alpha transparency to hex\n// Assumes r, g, b are contained in the set [0, 255] and\n// a in [0, 1]. Returns a 4 or 8 character rgba hex\nfunction rgbaToHex(r, g, b, a, allow4Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16)),\n        pad2(convertDecimalToHex(a))\n    ];\n\n    // Return a 4 character hex if possible\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToArgbHex`\n// Converts an RGBA color to an ARGB Hex8 string\n// Rarely used, but required for \"toFilter()\"\nfunction rgbaToArgbHex(r, g, b, a) {\n\n    var hex = [\n        pad2(convertDecimalToHex(a)),\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    return hex.join(\"\");\n}\n\n// `equals`\n// Can be called with any tinycolor input\ntinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) { return false; }\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n};\n\ntinycolor.random = function() {\n    return tinycolor.fromRatio({\n        r: mathRandom(),\n        g: mathRandom(),\n        b: mathRandom()\n    });\n};\n\n\n// Modification Functions\n// ----------------------\n// Thanks to less.js for some of the basics here\n// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\nfunction desaturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction saturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction greyscale(color) {\n    return tinycolor(color).desaturate(100);\n}\n\nfunction lighten (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\nfunction brighten(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\n    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\n    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\n    return tinycolor(rgb);\n}\n\nfunction darken (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\n// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n// Values outside of this range will be wrapped into this range.\nfunction spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n}\n\n// Combination Functions\n// ---------------------\n// Thanks to jQuery xColor for some of the ideas behind these\n// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\nfunction complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n}\n\nfunction triad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction tetrad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\n        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\n    ];\n}\n\nfunction analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n\n    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\n        hsl.h = (hsl.h + part) % 360;\n        ret.push(tinycolor(hsl));\n    }\n    return ret;\n}\n\nfunction monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h, s = hsv.s, v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n\n    while (results--) {\n        ret.push(tinycolor({ h: h, s: s, v: v}));\n        v = (v + modification) % 1;\n    }\n\n    return ret;\n}\n\n// Utility Functions\n// ---------------------\n\ntinycolor.mix = function(color1, color2, amount) {\n    amount = (amount === 0) ? 0 : (amount || 50);\n\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n\n    var p = amount / 100;\n\n    var rgba = {\n        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,\n        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,\n        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,\n        a: ((rgb2.a - rgb1.a) * p) + rgb1.a\n    };\n\n    return tinycolor(rgba);\n};\n\n\n// Readability Functions\n// ---------------------\n// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\n// `contrast`\n// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\ntinycolor.readability = function(color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);\n};\n\n// `isReadable`\n// Ensure that foreground and background color combinations meet WCAG2 guidelines.\n// The third argument is an optional Object.\n//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n// If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\n// *Example*\n//    tinycolor.isReadable(\"#000\", \"#111\") => false\n//    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\ntinycolor.isReadable = function(color1, color2, wcag2) {\n    var readability = tinycolor.readability(color1, color2);\n    var wcag2Parms, out;\n\n    out = false;\n\n    wcag2Parms = validateWCAG2Parms(wcag2);\n    switch (wcag2Parms.level + wcag2Parms.size) {\n        case \"AAsmall\":\n        case \"AAAlarge\":\n            out = readability >= 4.5;\n            break;\n        case \"AAlarge\":\n            out = readability >= 3;\n            break;\n        case \"AAAsmall\":\n            out = readability >= 7;\n            break;\n    }\n    return out;\n\n};\n\n// `mostReadable`\n// Given a base color and a list of possible foreground or background\n// colors for that base, returns the most readable color.\n// Optionally returns Black or White if the most readable color is unreadable.\n// *Example*\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\ntinycolor.mostReadable = function(baseColor, colorList, args) {\n    var bestColor = null;\n    var bestScore = 0;\n    var readability;\n    var includeFallbackColors, level, size ;\n    args = args || {};\n    includeFallbackColors = args.includeFallbackColors ;\n    level = args.level;\n    size = args.size;\n\n    for (var i= 0; i < colorList.length ; i++) {\n        readability = tinycolor.readability(baseColor, colorList[i]);\n        if (readability > bestScore) {\n            bestScore = readability;\n            bestColor = tinycolor(colorList[i]);\n        }\n    }\n\n    if (tinycolor.isReadable(baseColor, bestColor, {\"level\":level,\"size\":size}) || !includeFallbackColors) {\n        return bestColor;\n    }\n    else {\n        args.includeFallbackColors=false;\n        return tinycolor.mostReadable(baseColor,[\"#fff\", \"#000\"],args);\n    }\n};\n\n\n// Big List of Colors\n// ------------------\n// <http://www.w3.org/TR/css3-color/#svg-color>\nvar names = tinycolor.names = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    burntsienna: \"ea7e5d\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    grey: \"808080\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    rebeccapurple: \"663399\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\"\n};\n\n// Make it easy to access colors via `hexNames[hex]`\nvar hexNames = tinycolor.hexNames = flip(names);\n\n\n// Utilities\n// ---------\n\n// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\nfunction flip(o) {\n    var flipped = { };\n    for (var i in o) {\n        if (o.hasOwnProperty(i)) {\n            flipped[o[i]] = i;\n        }\n    }\n    return flipped;\n}\n\n// Return a valid alpha value [0,1] with all invalid values being set to 1\nfunction boundAlpha(a) {\n    a = parseFloat(a);\n\n    if (isNaN(a) || a < 0 || a > 1) {\n        a = 1;\n    }\n\n    return a;\n}\n\n// Take input from [0, n] and return it as [0, 1]\nfunction bound01(n, max) {\n    if (isOnePointZero(n)) { n = \"100%\"; }\n\n    var processPercent = isPercentage(n);\n    n = mathMin(max, mathMax(0, parseFloat(n)));\n\n    // Automatically convert percentage into number\n    if (processPercent) {\n        n = parseInt(n * max, 10) / 100;\n    }\n\n    // Handle floating point rounding errors\n    if ((Math.abs(n - max) < 0.000001)) {\n        return 1;\n    }\n\n    // Convert into [0, 1] range if it isn't already\n    return (n % max) / parseFloat(max);\n}\n\n// Force a number between 0 and 1\nfunction clamp01(val) {\n    return mathMin(1, mathMax(0, val));\n}\n\n// Parse a base-16 hex value into a base-10 integer\nfunction parseIntFromHex(val) {\n    return parseInt(val, 16);\n}\n\n// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\nfunction isOnePointZero(n) {\n    return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\n}\n\n// Check to see if string passed in is a percentage\nfunction isPercentage(n) {\n    return typeof n === \"string\" && n.indexOf('%') != -1;\n}\n\n// Force a hex value to have 2 characters\nfunction pad2(c) {\n    return c.length == 1 ? '0' + c : '' + c;\n}\n\n// Replace a decimal with it's percentage value\nfunction convertToPercentage(n) {\n    if (n <= 1) {\n        n = (n * 100) + \"%\";\n    }\n\n    return n;\n}\n\n// Converts a decimal to a hex value\nfunction convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n}\n// Converts a hex value to a decimal\nfunction convertHexToDecimal(h) {\n    return (parseIntFromHex(h) / 255);\n}\n\nvar matchers = (function() {\n\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n    // <http://www.w3.org/TR/css3-values/#number-value>\n    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n    // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n\n    return {\n        CSS_UNIT: new RegExp(CSS_UNIT),\n        rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n        rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n        hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n        hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n        hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n        hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n    };\n})();\n\n// `isValidCSSUnit`\n// Take in a single string / number and check to see if it looks like a CSS unit\n// (see `matchers` above for definition).\nfunction isValidCSSUnit(color) {\n    return !!matchers.CSS_UNIT.exec(color);\n}\n\n// `stringInputToObject`\n// Permissive string parsing.  Take in a number of formats, and output an object\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\nfunction stringInputToObject(color) {\n\n    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\n    var named = false;\n    if (names[color]) {\n        color = names[color];\n        named = true;\n    }\n    else if (color == 'transparent') {\n        return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\n    }\n\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match;\n    if ((match = matchers.rgb.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3] };\n    }\n    if ((match = matchers.rgba.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsl.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3] };\n    }\n    if ((match = matchers.hsla.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsv.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3] };\n    }\n    if ((match = matchers.hsva.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n    }\n    if ((match = matchers.hex8.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            a: convertHexToDecimal(match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex6.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n    if ((match = matchers.hex4.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            a: convertHexToDecimal(match[4] + '' + match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex3.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n\n    return false;\n}\n\nfunction validateWCAG2Parms(parms) {\n    // return valid WCAG2 parms for isReadable.\n    // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n    var level, size;\n    parms = parms || {\"level\":\"AA\", \"size\":\"small\"};\n    level = (parms.level || \"AA\").toUpperCase();\n    size = (parms.size || \"small\").toLowerCase();\n    if (level !== \"AA\" && level !== \"AAA\") {\n        level = \"AA\";\n    }\n    if (size !== \"small\" && size !== \"large\") {\n        size = \"small\";\n    }\n    return {\"level\":level, \"size\":size};\n}\n\n// Node: Export function\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = tinycolor;\n}\n// AMD/requirejs: Define the module\nelse if (typeof define === 'function' && define.amd) {\n    define(function () {return tinycolor;});\n}\n// Browser: Expose to window\nelse {\n    window.tinycolor = tinycolor;\n}\n\n})(Math);\n","'use strict';\r\n\r\nvar width = 256;// each RC4 output is 0 <= x < 256\r\nvar chunks = 6;// at least six RC4 outputs for each double\r\nvar digits = 52;// there are 52 significant digits in a double\r\nvar pool = [];// pool: entropy pool starts empty\r\nvar GLOBAL = typeof global === 'undefined' ? window : global;\r\n\r\n//\r\n// The following constants are related to IEEE 754 limits.\r\n//\r\nvar startdenom = Math.pow(width, chunks),\r\n    significance = Math.pow(2, digits),\r\n    overflow = significance * 2,\r\n    mask = width - 1;\r\n\r\n\r\nvar oldRandom = Math.random;\r\n\r\n//\r\n// seedrandom()\r\n// This is the seedrandom function described above.\r\n//\r\nmodule.exports = function(seed, options) {\r\n  if (options && options.global === true) {\r\n    options.global = false;\r\n    Math.random = module.exports(seed, options);\r\n    options.global = true;\r\n    return Math.random;\r\n  }\r\n  var use_entropy = (options && options.entropy) || false;\r\n  var key = [];\r\n\r\n  // Flatten the seed string or build one from local entropy if needed.\r\n  var shortseed = mixkey(flatten(\r\n    use_entropy ? [seed, tostring(pool)] :\r\n    0 in arguments ? seed : autoseed(), 3), key);\r\n\r\n  // Use the seed to initialize an ARC4 generator.\r\n  var arc4 = new ARC4(key);\r\n\r\n  // Mix the randomness into accumulated entropy.\r\n  mixkey(tostring(arc4.S), pool);\r\n\r\n  // Override Math.random\r\n\r\n  // This function returns a random double in [0, 1) that contains\r\n  // randomness in every bit of the mantissa of the IEEE 754 value.\r\n\r\n  return function() {         // Closure to return a random double:\r\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\r\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\r\n        x = 0;                          //   and no 'extra last byte'.\r\n    while (n < significance) {          // Fill up all significant digits by\r\n      n = (n + x) * width;              //   shifting numerator and\r\n      d *= width;                       //   denominator and generating a\r\n      x = arc4.g(1);                    //   new least-significant-byte.\r\n    }\r\n    while (n >= overflow) {             // To avoid rounding up, before adding\r\n      n /= 2;                           //   last byte, shift everything\r\n      d /= 2;                           //   right using integer Math until\r\n      x >>>= 1;                         //   we have exactly the desired bits.\r\n    }\r\n    return (n + x) / d;                 // Form the number within [0, 1).\r\n  };\r\n};\r\n\r\nmodule.exports.resetGlobal = function () {\r\n  Math.random = oldRandom;\r\n};\r\n\r\n//\r\n// ARC4\r\n//\r\n// An ARC4 implementation.  The constructor takes a key in the form of\r\n// an array of at most (width) integers that should be 0 <= x < (width).\r\n//\r\n// The g(count) method returns a pseudorandom integer that concatenates\r\n// the next (count) outputs from ARC4.  Its return value is a number x\r\n// that is in the range 0 <= x < (width ^ count).\r\n//\r\n/** @constructor */\r\nfunction ARC4(key) {\r\n  var t, keylen = key.length,\r\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\r\n\r\n  // The empty key [] is treated as [0].\r\n  if (!keylen) { key = [keylen++]; }\r\n\r\n  // Set up S using the standard key scheduling algorithm.\r\n  while (i < width) {\r\n    s[i] = i++;\r\n  }\r\n  for (i = 0; i < width; i++) {\r\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\r\n    s[j] = t;\r\n  }\r\n\r\n  // The \"g\" method returns the next (count) outputs as one number.\r\n  (me.g = function(count) {\r\n    // Using instance members instead of closure state nearly doubles speed.\r\n    var t, r = 0,\r\n        i = me.i, j = me.j, s = me.S;\r\n    while (count--) {\r\n      t = s[i = mask & (i + 1)];\r\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\r\n    }\r\n    me.i = i; me.j = j;\r\n    return r;\r\n    // For robust unpredictability discard an initial batch of values.\r\n    // See http://www.rsa.com/rsalabs/node.asp?id=2009\r\n  })(width);\r\n}\r\n\r\n//\r\n// flatten()\r\n// Converts an object tree to nested arrays of strings.\r\n//\r\nfunction flatten(obj, depth) {\r\n  var result = [], typ = (typeof obj)[0], prop;\r\n  if (depth && typ == 'o') {\r\n    for (prop in obj) {\r\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\r\n    }\r\n  }\r\n  return (result.length ? result : typ == 's' ? obj : obj + '\\0');\r\n}\r\n\r\n//\r\n// mixkey()\r\n// Mixes a string seed into a key that is an array of integers, and\r\n// returns a shortened string seed that is equivalent to the result key.\r\n//\r\nfunction mixkey(seed, key) {\r\n  var stringseed = seed + '', smear, j = 0;\r\n  while (j < stringseed.length) {\r\n    key[mask & j] =\r\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\r\n  }\r\n  return tostring(key);\r\n}\r\n\r\n//\r\n// autoseed()\r\n// Returns an object for autoseeding, using window.crypto if available.\r\n//\r\n/** @param {Uint8Array=} seed */\r\nfunction autoseed(seed) {\r\n  try {\r\n    GLOBAL.crypto.getRandomValues(seed = new Uint8Array(width));\r\n    return tostring(seed);\r\n  } catch (e) {\r\n    return [+new Date, GLOBAL, GLOBAL.navigator && GLOBAL.navigator.plugins,\r\n            GLOBAL.screen, tostring(pool)];\r\n  }\r\n}\r\n\r\n//\r\n// tostring()\r\n// Converts an array of charcodes to a string\r\n//\r\nfunction tostring(a) {\r\n  return String.fromCharCode.apply(0, a);\r\n}\r\n\r\n//\r\n// When seedrandom.js is loaded, we immediately mix a few bits\r\n// from the built-in RNG into the entropy pool.  Because we do\r\n// not want to intefere with determinstic PRNG state later,\r\n// seedrandom will not call Math.random on its own again after\r\n// initialization.\r\n//\r\nmixkey(Math.random(), pool);\r\n","/*\n * A fast javascript implementation of simplex noise by Jonas Wagner\n\nBased on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\nWhich is based on example code by Stefan Gustavson (stegu@itn.liu.se).\nWith Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\nBetter rank ordering method by Stefan Gustavson in 2012.\n\n\n Copyright (c) 2018 Jonas Wagner\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n(function() {\n  'use strict';\n\n  var F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\n  var G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\n  var F3 = 1.0 / 3.0;\n  var G3 = 1.0 / 6.0;\n  var F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n  var G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n\n  function SimplexNoise(randomOrSeed) {\n    var random;\n    if (typeof randomOrSeed == 'function') {\n      random = randomOrSeed;\n    }\n    else if (randomOrSeed) {\n      random = alea(randomOrSeed);\n    } else {\n      random = Math.random;\n    }\n    this.p = buildPermutationTable(random);\n    this.perm = new Uint8Array(512);\n    this.permMod12 = new Uint8Array(512);\n    for (var i = 0; i < 512; i++) {\n      this.perm[i] = this.p[i & 255];\n      this.permMod12[i] = this.perm[i] % 12;\n    }\n\n  }\n  SimplexNoise.prototype = {\n    grad3: new Float32Array([1, 1, 0,\n      -1, 1, 0,\n      1, -1, 0,\n\n      -1, -1, 0,\n      1, 0, 1,\n      -1, 0, 1,\n\n      1, 0, -1,\n      -1, 0, -1,\n      0, 1, 1,\n\n      0, -1, 1,\n      0, 1, -1,\n      0, -1, -1]),\n    grad4: new Float32Array([0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1,\n      0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1,\n      1, 0, 1, 1, 1, 0, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1,\n      -1, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, -1, 0, -1, -1,\n      1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1,\n      -1, 1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, -1,\n      1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0,\n      -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 0]),\n    noise2D: function(xin, yin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0 = 0; // Noise contributions from the three corners\n      var n1 = 0;\n      var n2 = 0;\n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin) * F2; // Hairy factor for 2D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var t = (i + j) * G2;\n      var X0 = i - t; // Unskew the cell origin back to (x,y) space\n      var Y0 = j - t;\n      var x0 = xin - X0; // The x,y distances from the cell origin\n      var y0 = yin - Y0;\n      // For the 2D case, the simplex shape is an equilateral triangle.\n      // Determine which simplex we are in.\n      var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n      if (x0 > y0) {\n        i1 = 1;\n        j1 = 0;\n      } // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      else {\n        i1 = 0;\n        j1 = 1;\n      } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n      // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n      // c = (3-sqrt(3))/6\n      var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n      var y1 = y0 - j1 + G2;\n      var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n      var y2 = y0 - 1.0 + 2.0 * G2;\n      // Work out the hashed gradient indices of the three simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      // Calculate the contribution from the three corners\n      var t0 = 0.5 - x0 * x0 - y0 * y0;\n      if (t0 >= 0) {\n        var gi0 = permMod12[ii + perm[jj]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient\n      }\n      var t1 = 0.5 - x1 * x1 - y1 * y1;\n      if (t1 >= 0) {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1);\n      }\n      var t2 = 0.5 - x2 * x2 - y2 * y2;\n      if (t2 >= 0) {\n        var gi2 = permMod12[ii + 1 + perm[jj + 1]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to return values in the interval [-1,1].\n      return 70.0 * (n0 + n1 + n2);\n    },\n    // 3D simplex noise\n    noise3D: function(xin, yin, zin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0, n1, n2, n3; // Noise contributions from the four corners\n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var k = Math.floor(zin + s);\n      var t = (i + j + k) * G3;\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var x0 = xin - X0; // The x,y,z distances from the cell origin\n      var y0 = yin - Y0;\n      var z0 = zin - Z0;\n      // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n      // Determine which simplex we are in.\n      var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n      var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n      if (x0 >= y0) {\n        if (y0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // X Y Z order\n        else if (x0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // X Z Y order\n        else {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // Z X Y order\n      }\n      else { // x0<y0\n        if (y0 < z0) {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Z Y X order\n        else if (x0 < z0) {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Y Z X order\n        else {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // Y X Z order\n      }\n      // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n      // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n      // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n      // c = 1/6.\n      var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n      var y1 = y0 - j1 + G3;\n      var z1 = z0 - k1 + G3;\n      var x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n      var y2 = y0 - j2 + 2.0 * G3;\n      var z2 = z0 - k2 + 2.0 * G3;\n      var x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n      var y3 = y0 - 1.0 + 3.0 * G3;\n      var z3 = z0 - 1.0 + 3.0 * G3;\n      // Work out the hashed gradient indices of the four simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255;\n      // Calculate the contribution from the four corners\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n      if (t0 < 0) n0 = 0.0;\n      else {\n        var gi0 = permMod12[ii + perm[jj + perm[kk]]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0 + grad3[gi0 + 2] * z0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n      if (t1 < 0) n1 = 0.0;\n      else {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1 + grad3[gi1 + 2] * z1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n      if (t2 < 0) n2 = 0.0;\n      else {\n        var gi2 = permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2 + grad3[gi2 + 2] * z2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n      if (t3 < 0) n3 = 0.0;\n      else {\n        var gi3 = permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]] * 3;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad3[gi3] * x3 + grad3[gi3 + 1] * y3 + grad3[gi3 + 2] * z3);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to stay just inside [-1,1]\n      return 32.0 * (n0 + n1 + n2 + n3);\n    },\n    // 4D simplex noise, better simplex rank ordering method 2012-03-09\n    noise4D: function(x, y, z, w) {\n      var perm = this.perm;\n      var grad4 = this.grad4;\n\n      var n0, n1, n2, n3, n4; // Noise contributions from the five corners\n      // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n      var s = (x + y + z + w) * F4; // Factor for 4D skewing\n      var i = Math.floor(x + s);\n      var j = Math.floor(y + s);\n      var k = Math.floor(z + s);\n      var l = Math.floor(w + s);\n      var t = (i + j + k + l) * G4; // Factor for 4D unskewing\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var W0 = l - t;\n      var x0 = x - X0; // The x,y,z,w distances from the cell origin\n      var y0 = y - Y0;\n      var z0 = z - Z0;\n      var w0 = w - W0;\n      // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n      // To find out which of the 24 possible simplices we're in, we need to\n      // determine the magnitude ordering of x0, y0, z0 and w0.\n      // Six pair-wise comparisons are performed between each possible pair\n      // of the four coordinates, and the results are used to rank the numbers.\n      var rankx = 0;\n      var ranky = 0;\n      var rankz = 0;\n      var rankw = 0;\n      if (x0 > y0) rankx++;\n      else ranky++;\n      if (x0 > z0) rankx++;\n      else rankz++;\n      if (x0 > w0) rankx++;\n      else rankw++;\n      if (y0 > z0) ranky++;\n      else rankz++;\n      if (y0 > w0) ranky++;\n      else rankw++;\n      if (z0 > w0) rankz++;\n      else rankw++;\n      var i1, j1, k1, l1; // The integer offsets for the second simplex corner\n      var i2, j2, k2, l2; // The integer offsets for the third simplex corner\n      var i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n      // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n      // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n      // impossible. Only the 24 indices which have non-zero entries make any sense.\n      // We use a thresholding to set the coordinates in turn from the largest magnitude.\n      // Rank 3 denotes the largest coordinate.\n      i1 = rankx >= 3 ? 1 : 0;\n      j1 = ranky >= 3 ? 1 : 0;\n      k1 = rankz >= 3 ? 1 : 0;\n      l1 = rankw >= 3 ? 1 : 0;\n      // Rank 2 denotes the second largest coordinate.\n      i2 = rankx >= 2 ? 1 : 0;\n      j2 = ranky >= 2 ? 1 : 0;\n      k2 = rankz >= 2 ? 1 : 0;\n      l2 = rankw >= 2 ? 1 : 0;\n      // Rank 1 denotes the second smallest coordinate.\n      i3 = rankx >= 1 ? 1 : 0;\n      j3 = ranky >= 1 ? 1 : 0;\n      k3 = rankz >= 1 ? 1 : 0;\n      l3 = rankw >= 1 ? 1 : 0;\n      // The fifth corner has all coordinate offsets = 1, so no need to compute that.\n      var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n      var y1 = y0 - j1 + G4;\n      var z1 = z0 - k1 + G4;\n      var w1 = w0 - l1 + G4;\n      var x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n      var y2 = y0 - j2 + 2.0 * G4;\n      var z2 = z0 - k2 + 2.0 * G4;\n      var w2 = w0 - l2 + 2.0 * G4;\n      var x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n      var y3 = y0 - j3 + 3.0 * G4;\n      var z3 = z0 - k3 + 3.0 * G4;\n      var w3 = w0 - l3 + 3.0 * G4;\n      var x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n      var y4 = y0 - 1.0 + 4.0 * G4;\n      var z4 = z0 - 1.0 + 4.0 * G4;\n      var w4 = w0 - 1.0 + 4.0 * G4;\n      // Work out the hashed gradient indices of the five simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255;\n      var ll = l & 255;\n      // Calculate the contribution from the five corners\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n      if (t0 < 0) n0 = 0.0;\n      else {\n        var gi0 = (perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32) * 4;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad4[gi0] * x0 + grad4[gi0 + 1] * y0 + grad4[gi0 + 2] * z0 + grad4[gi0 + 3] * w0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n      if (t1 < 0) n1 = 0.0;\n      else {\n        var gi1 = (perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32) * 4;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad4[gi1] * x1 + grad4[gi1 + 1] * y1 + grad4[gi1 + 2] * z1 + grad4[gi1 + 3] * w1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n      if (t2 < 0) n2 = 0.0;\n      else {\n        var gi2 = (perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32) * 4;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad4[gi2] * x2 + grad4[gi2 + 1] * y2 + grad4[gi2 + 2] * z2 + grad4[gi2 + 3] * w2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n      if (t3 < 0) n3 = 0.0;\n      else {\n        var gi3 = (perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32) * 4;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad4[gi3] * x3 + grad4[gi3 + 1] * y3 + grad4[gi3 + 2] * z3 + grad4[gi3 + 3] * w3);\n      }\n      var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n      if (t4 < 0) n4 = 0.0;\n      else {\n        var gi4 = (perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32) * 4;\n        t4 *= t4;\n        n4 = t4 * t4 * (grad4[gi4] * x4 + grad4[gi4 + 1] * y4 + grad4[gi4 + 2] * z4 + grad4[gi4 + 3] * w4);\n      }\n      // Sum up and scale the result to cover the range [-1,1]\n      return 27.0 * (n0 + n1 + n2 + n3 + n4);\n    }\n  };\n\n  function buildPermutationTable(random) {\n    var i;\n    var p = new Uint8Array(256);\n    for (i = 0; i < 256; i++) {\n      p[i] = i;\n    }\n    for (i = 0; i < 255; i++) {\n      var r = i + ~~(random() * (256 - i));\n      var aux = p[i];\n      p[i] = p[r];\n      p[r] = aux;\n    }\n    return p;\n  }\n  SimplexNoise._buildPermutationTable = buildPermutationTable;\n\n  function alea() {\n    // Johannes BaagÃ¸e <baagoe@baagoe.com>, 2010\n    var s0 = 0;\n    var s1 = 0;\n    var s2 = 0;\n    var c = 1;\n\n    var mash = masher();\n    s0 = mash(' ');\n    s1 = mash(' ');\n    s2 = mash(' ');\n\n    for (var i = 0; i < arguments.length; i++) {\n      s0 -= mash(arguments[i]);\n      if (s0 < 0) {\n        s0 += 1;\n      }\n      s1 -= mash(arguments[i]);\n      if (s1 < 0) {\n        s1 += 1;\n      }\n      s2 -= mash(arguments[i]);\n      if (s2 < 0) {\n        s2 += 1;\n      }\n    }\n    mash = null;\n    return function() {\n      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n      s0 = s1;\n      s1 = s2;\n      return s2 = t - (c = t | 0);\n    };\n  }\n  function masher() {\n    var n = 0xefc8249d;\n    return function(data) {\n      data = data.toString();\n      for (var i = 0; i < data.length; i++) {\n        n += data.charCodeAt(i);\n        var h = 0.02519603282416938 * n;\n        n = h >>> 0;\n        h -= n;\n        h *= n;\n        n = h >>> 0;\n        h -= n;\n        n += h * 0x100000000; // 2^32\n      }\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n    };\n  }\n\n  // amd\n  if (typeof define !== 'undefined' && define.amd) define(function() {return SimplexNoise;});\n  // common js\n  if (typeof exports !== 'undefined') exports.SimplexNoise = SimplexNoise;\n  // browser\n  else if (typeof window !== 'undefined') window.SimplexNoise = SimplexNoise;\n  // nodejs\n  if (typeof module !== 'undefined') {\n    module.exports = SimplexNoise;\n  }\n\n})();\n","module.exports = function () {\n    for (var i = 0; i < arguments.length; i++) {\n        if (arguments[i] !== undefined) return arguments[i];\n    }\n};\n","var seedRandom = require('seed-random');\nvar SimplexNoise = require('simplex-noise');\nvar defined = require('defined');\n\nfunction createRandom (defaultSeed) {\n  defaultSeed = defined(defaultSeed, null);\n  var defaultRandom = Math.random;\n  var currentSeed;\n  var currentRandom;\n  var noiseGenerator;\n  var _nextGaussian = null;\n  var _hasNextGaussian = false;\n\n  setSeed(defaultSeed);\n\n  return {\n    value: value,\n    createRandom: function (defaultSeed) {\n      return createRandom(defaultSeed);\n    },\n    setSeed: setSeed,\n    getSeed: getSeed,\n    getRandomSeed: getRandomSeed,\n    valueNonZero: valueNonZero,\n    permuteNoise: permuteNoise,\n    noise1D: noise1D,\n    noise2D: noise2D,\n    noise3D: noise3D,\n    noise4D: noise4D,\n    sign: sign,\n    boolean: boolean,\n    chance: chance,\n    range: range,\n    rangeFloor: rangeFloor,\n    pick: pick,\n    shuffle: shuffle,\n    onCircle: onCircle,\n    insideCircle: insideCircle,\n    onSphere: onSphere,\n    insideSphere: insideSphere,\n    quaternion: quaternion,\n    weighted: weighted,\n    weightedSet: weightedSet,\n    weightedSetIndex: weightedSetIndex,\n    gaussian: gaussian\n  };\n\n  function setSeed (seed, opt) {\n    if (typeof seed === 'number' || typeof seed === 'string') {\n      currentSeed = seed;\n      currentRandom = seedRandom(currentSeed, opt);\n    } else {\n      currentSeed = undefined;\n      currentRandom = defaultRandom;\n    }\n    noiseGenerator = createNoise();\n    _nextGaussian = null;\n    _hasNextGaussian = false;\n  }\n\n  function value () {\n    return currentRandom();\n  }\n\n  function valueNonZero () {\n    var u = 0;\n    while (u === 0) u = value();\n    return u;\n  }\n\n  function getSeed () {\n    return currentSeed;\n  }\n\n  function getRandomSeed () {\n    var seed = String(Math.floor(Math.random() * 1000000));\n    return seed;\n  }\n\n  function createNoise () {\n    return new SimplexNoise(currentRandom);\n  }\n\n  function permuteNoise () {\n    noiseGenerator = createNoise();\n  }\n\n  function noise1D (x, frequency, amplitude) {\n    if (!isFinite(x)) throw new TypeError('x component for noise() must be finite');\n    frequency = defined(frequency, 1);\n    amplitude = defined(amplitude, 1);\n    return amplitude * noiseGenerator.noise2D(x * frequency, 0);\n  }\n\n  function noise2D (x, y, frequency, amplitude) {\n    if (!isFinite(x)) throw new TypeError('x component for noise() must be finite');\n    if (!isFinite(y)) throw new TypeError('y component for noise() must be finite');\n    frequency = defined(frequency, 1);\n    amplitude = defined(amplitude, 1);\n    return amplitude * noiseGenerator.noise2D(x * frequency, y * frequency);\n  }\n\n  function noise3D (x, y, z, frequency, amplitude) {\n    if (!isFinite(x)) throw new TypeError('x component for noise() must be finite');\n    if (!isFinite(y)) throw new TypeError('y component for noise() must be finite');\n    if (!isFinite(z)) throw new TypeError('z component for noise() must be finite');\n    frequency = defined(frequency, 1);\n    amplitude = defined(amplitude, 1);\n    return amplitude * noiseGenerator.noise3D(\n      x * frequency,\n      y * frequency,\n      z * frequency\n    );\n  }\n\n  function noise4D (x, y, z, w, frequency, amplitude) {\n    if (!isFinite(x)) throw new TypeError('x component for noise() must be finite');\n    if (!isFinite(y)) throw new TypeError('y component for noise() must be finite');\n    if (!isFinite(z)) throw new TypeError('z component for noise() must be finite');\n    if (!isFinite(w)) throw new TypeError('w component for noise() must be finite');\n    frequency = defined(frequency, 1);\n    amplitude = defined(amplitude, 1);\n    return amplitude * noiseGenerator.noise4D(\n      x * frequency,\n      y * frequency,\n      z * frequency,\n      w * frequency\n    );\n  }\n\n  function sign () {\n    return boolean() ? 1 : -1;\n  }\n\n  function boolean () {\n    return value() > 0.5;\n  }\n\n  function chance (n) {\n    n = defined(n, 0.5);\n    if (typeof n !== 'number') throw new TypeError('expected n to be a number');\n    return value() < n;\n  }\n\n  function range (min, max) {\n    if (max === undefined) {\n      max = min;\n      min = 0;\n    }\n\n    if (typeof min !== 'number' || typeof max !== 'number') {\n      throw new TypeError('Expected all arguments to be numbers');\n    }\n\n    return value() * (max - min) + min;\n  }\n\n  function rangeFloor (min, max) {\n    if (max === undefined) {\n      max = min;\n      min = 0;\n    }\n\n    if (typeof min !== 'number' || typeof max !== 'number') {\n      throw new TypeError('Expected all arguments to be numbers');\n    }\n\n    return Math.floor(range(min, max));\n  }\n\n  function pick (array) {\n    if (array.length === 0) return undefined;\n    return array[rangeFloor(0, array.length)];\n  }\n\n  function shuffle (arr) {\n    if (!Array.isArray(arr)) {\n      throw new TypeError('Expected Array, got ' + typeof arr);\n    }\n\n    var rand;\n    var tmp;\n    var len = arr.length;\n    var ret = arr.slice();\n    while (len) {\n      rand = Math.floor(value() * len--);\n      tmp = ret[len];\n      ret[len] = ret[rand];\n      ret[rand] = tmp;\n    }\n    return ret;\n  }\n\n  function onCircle (radius, out) {\n    radius = defined(radius, 1);\n    out = out || [];\n    var theta = value() * 2.0 * Math.PI;\n    out[0] = radius * Math.cos(theta);\n    out[1] = radius * Math.sin(theta);\n    return out;\n  }\n\n  function insideCircle (radius, out) {\n    radius = defined(radius, 1);\n    out = out || [];\n    onCircle(1, out);\n    var r = radius * Math.sqrt(value());\n    out[0] *= r;\n    out[1] *= r;\n    return out;\n  }\n\n  function onSphere (radius, out) {\n    radius = defined(radius, 1);\n    out = out || [];\n    var u = value() * Math.PI * 2;\n    var v = value() * 2 - 1;\n    var phi = u;\n    var theta = Math.acos(v);\n    out[0] = radius * Math.sin(theta) * Math.cos(phi);\n    out[1] = radius * Math.sin(theta) * Math.sin(phi);\n    out[2] = radius * Math.cos(theta);\n    return out;\n  }\n\n  function insideSphere (radius, out) {\n    radius = defined(radius, 1);\n    out = out || [];\n    var u = value() * Math.PI * 2;\n    var v = value() * 2 - 1;\n    var k = value();\n\n    var phi = u;\n    var theta = Math.acos(v);\n    var r = radius * Math.cbrt(k);\n    out[0] = r * Math.sin(theta) * Math.cos(phi);\n    out[1] = r * Math.sin(theta) * Math.sin(phi);\n    out[2] = r * Math.cos(theta);\n    return out;\n  }\n\n  function quaternion (out) {\n    out = out || [];\n    var u1 = value();\n    var u2 = value();\n    var u3 = value();\n\n    var sq1 = Math.sqrt(1 - u1);\n    var sq2 = Math.sqrt(u1);\n\n    var theta1 = Math.PI * 2 * u2;\n    var theta2 = Math.PI * 2 * u3;\n\n    var x = Math.sin(theta1) * sq1;\n    var y = Math.cos(theta1) * sq1;\n    var z = Math.sin(theta2) * sq2;\n    var w = Math.cos(theta2) * sq2;\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n  }\n\n  function weightedSet (set) {\n    set = set || [];\n    if (set.length === 0) return null;\n    return set[weightedSetIndex(set)].value;\n  }\n\n  function weightedSetIndex (set) {\n    set = set || [];\n    if (set.length === 0) return -1;\n    return weighted(set.map(function (s) {\n      return s.weight;\n    }));\n  }\n\n  function weighted (weights) {\n    weights = weights || [];\n    if (weights.length === 0) return -1;\n    var totalWeight = 0;\n    var i;\n\n    for (i = 0; i < weights.length; i++) {\n      totalWeight += weights[i];\n    }\n\n    if (totalWeight <= 0) throw new Error('Weights must sum to > 0');\n\n    var random = value() * totalWeight;\n    for (i = 0; i < weights.length; i++) {\n      if (random < weights[i]) {\n        return i;\n      }\n      random -= weights[i];\n    }\n    return 0;\n  }\n\n  function gaussian (mean, standardDerivation) {\n    mean = defined(mean, 0);\n    standardDerivation = defined(standardDerivation, 1);\n\n    // https://github.com/openjdk-mirror/jdk7u-jdk/blob/f4d80957e89a19a29bb9f9807d2a28351ed7f7df/src/share/classes/java/util/Random.java#L496\n    if (_hasNextGaussian) {\n      _hasNextGaussian = false;\n      var result = _nextGaussian;\n      _nextGaussian = null;\n      return mean + standardDerivation * result;\n    } else {\n      var v1 = 0;\n      var v2 = 0;\n      var s = 0;\n      do {\n        v1 = value() * 2 - 1; // between -1 and 1\n        v2 = value() * 2 - 1; // between -1 and 1\n        s = v1 * v1 + v2 * v2;\n      } while (s >= 1 || s === 0);\n      var multiplier = Math.sqrt(-2 * Math.log(s) / s);\n      _nextGaussian = (v2 * multiplier);\n      _hasNextGaussian = true;\n      return mean + standardDerivation * (v1 * multiplier);\n    }\n  }\n}\n\nmodule.exports = createRandom();\n","// Vector class originally from https://evanw.github.io/lightgl.js/docs/vector.html\n// Edited and expanded to match p5's vectors\n// ref - p5 vector https://p5js.org/reference/#/p5.Vector\n// https://www.khanacademy.org/computing/computer-programming/programming-natural-simulations/programming-vectors/a/more-vector-math\n\nexport function Vector(x, y, z) {\n    this.x = x || 0;\n    this.y = y || 0;\n    this.z = z || 0;\n}\nVector.prototype = {\n    negative() {\n        return new Vector(-this.x, -this.y, -this.z);\n    },\n    add(v) {\n        if (v instanceof Vector) return new Vector(this.x + v.x, this.y + v.y, this.z + v.z);\n        return new Vector(this.x + v, this.y + v, this.z + v);\n    },\n    sub(v) {\n        if (v instanceof Vector) return new Vector(this.x - v.x, this.y - v.y, this.z - v.z);\n        return new Vector(this.x - v, this.y - v, this.z - v);\n    },\n    mult(v) {\n        if (v instanceof Vector) return new Vector(this.x * v.x, this.y * v.y, this.z * v.z);\n        return new Vector(this.x * v, this.y * v, this.z * v);\n    },\n    div(v) {\n        if (v instanceof Vector) return new Vector(this.x / v.x, this.y / v.y, this.z / v.z);\n        return new Vector(this.x / v, this.y / v, this.z / v);\n    },\n    equals(v) {\n        return this.x === v.x && this.y === v.y && this.z === v.z;\n    },\n    dot(v) {\n        return this.x * v.x + this.y * v.y + this.z * v.z;\n    },\n    cross(v) {\n        return new Vector(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x);\n    },\n    length() {\n        return Math.sqrt(this.dot(this));\n    },\n    mag() {\n        return this.length();\n    },\n    magSq() {\n        const m = this.length();\n        return m * m;\n    },\n    setMag(m) {\n        const c = this.mag();\n        const r = m / c;\n        return this.mult(r);\n    },\n    normalize() {\n        let mag = this.mag();\n        mag = mag || 1;\n        return this.div(mag);\n    },\n    unit() {\n        return this.divide(this.length());\n    },\n    min() {\n        return Math.min(Math.min(this.x, this.y), this.z);\n    },\n    max() {\n        return Math.max(Math.max(this.x, this.y), this.z);\n    },\n    limit(v) {\n        const cm = this.mag();\n        if (cm > v) {\n            return this.setMag(v);\n        }\n        return this;\n    },\n    // clamp(min, max) {\n    //     // export const clamp = (min = 0, max = 1, a) => Math.min(max, Math.max(min, a));\n    // },\n    toAngles() {\n        return {\n            theta: Math.atan2(this.z, this.x),\n            phi: Math.asin(this.y / this.length()),\n        };\n    },\n    angleTo(a) {\n        return Math.acos(this.dot(a) / (this.length() * a.length()));\n    },\n    toArray(n) {\n        return [this.x, this.y, this.z].slice(0, n || 3);\n    },\n    clone() {\n        return new Vector(this.x, this.y, this.z);\n    },\n    init(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        return this;\n    },\n};\nVector.negative = function (a, b) {\n    b.x = -a.x;\n    b.y = -a.y;\n    b.z = -a.z;\n    return b;\n};\nVector.add = function (a, b, c) {\n    if (b instanceof Vector) {\n        c.x = a.x + b.x;\n        c.y = a.y + b.y;\n        c.z = a.z + b.z;\n    } else {\n        c.x = a.x + b;\n        c.y = a.y + b;\n        c.z = a.z + b;\n    }\n    return c;\n};\nVector.subtract = function (a, b, c) {\n    if (b instanceof Vector) {\n        c.x = a.x - b.x;\n        c.y = a.y - b.y;\n        c.z = a.z - b.z;\n    } else {\n        c.x = a.x - b;\n        c.y = a.y - b;\n        c.z = a.z - b;\n    }\n    return c;\n};\nVector.multiply = function (a, b, c) {\n    if (b instanceof Vector) {\n        c.x = a.x * b.x;\n        c.y = a.y * b.y;\n        c.z = a.z * b.z;\n    } else {\n        c.x = a.x * b;\n        c.y = a.y * b;\n        c.z = a.z * b;\n    }\n    return c;\n};\nVector.divide = function (a, b, c) {\n    if (b instanceof Vector) {\n        c.x = a.x / b.x;\n        c.y = a.y / b.y;\n        c.z = a.z / b.z;\n    } else {\n        c.x = a.x / b;\n        c.y = a.y / b;\n        c.z = a.z / b;\n    }\n    return c;\n};\nVector.cross = function (a, b, c) {\n    c.x = a.y * b.z - a.z * b.y;\n    c.y = a.z * b.x - a.x * b.z;\n    c.z = a.x * b.y - a.y * b.x;\n    return c;\n};\nVector.unit = function (a, b) {\n    const length = a.length();\n    b.x = a.x / length;\n    b.y = a.y / length;\n    b.z = a.z / length;\n    return b;\n};\nVector.fromAngles = function (theta, phi) {\n    return new Vector(Math.cos(theta) * Math.cos(phi), Math.sin(phi), Math.sin(theta) * Math.cos(phi));\n};\nVector.randomDirection = function () {\n    return Vector.fromAngles(Math.random() * Math.PI * 2, Math.asin(Math.random() * 2 - 1));\n};\nVector.min = function (a, b) {\n    return new Vector(Math.min(a.x, b.x), Math.min(a.y, b.y), Math.min(a.z, b.z));\n};\nVector.max = function (a, b) {\n    return new Vector(Math.max(a.x, b.x), Math.max(a.y, b.y), Math.max(a.z, b.z));\n};\nVector.lerp = function (a, b, fraction) {\n    return b.subtract(a).multiply(fraction).add(a);\n};\nVector.fromArray = function (a) {\n    return new Vector(a[0], a[1], a[2]);\n};\nVector.angleBetween = function (a, b) {\n    return a.angleTo(b);\n};\n","/*\n  Math Snippets\n  https://github.com/terkelg/math\n*/\n\nimport random from 'canvas-sketch-util/random';\nimport { Vector } from './Vector';\nimport { drawCircleFilled } from './canvas';\n\n// Math aliases\nconst Ï€ = Math.PI;\nconst { PI } = Math;\nconst TAU = Math.PI * 2;\nconst { abs } = Math;\nconst { sin } = Math;\nconst { cos } = Math;\nconst { tan } = Math;\nconst { pow } = Math;\nconst { round } = Math;\nconst { floor } = Math;\n\nrandom.setSeed(random.getRandomSeed());\nconsole.log(`Using seed ${random.getSeed()}`);\n\n// Ï† phi\nexport const golden = 1.6180339887498948482;\n// g angles: 222.5, 137.5\n\n// https://www.mathsisfun.com/numbers/fibonacci-sequence.html\nexport const fibonacci = [\n    0,\n    1,\n    1,\n    2,\n    3,\n    5,\n    8,\n    13,\n    21,\n    34,\n    55,\n    89,\n    144,\n    233,\n    377,\n    610,\n    987,\n    1597,\n    2584,\n    4181,\n    6765,\n    10946,\n    17711,\n    28657,\n    46368,\n    75025,\n    121393,\n    196418,\n    317811,\n];\n\nexport const snapNumber = (snap, n) => Math.floor(n / snap) * snap;\n\n// Hough transform\n// https://stackoverflow.com/questions/24372921/how-to-calculate-quantized-angle\nexport const houghQuantize = (numAngles, theta) => Math.floor((numAngles * theta) / TAU + 0.5);\n// https://stackoverflow.com/questions/47047691/how-to-quantize-directions-in-canny-edge-detector-in-python\nexport const quantize = (numAngles, theta) => (Math.round(theta * (numAngles / Math.PI)) + numAngles) % numAngles;\n\nexport const round2 = (num) => Math.round((num + Number.EPSILON) * 100) / 100;\n\nexport const getRandomSeed = () => random.getSeed();\nexport const setRandomSeed = (s) => random.setRandomSeed(s);\n\nexport const randomNumberBetween = (min, max) => random.value() * (max - min) + min;\nexport const randomWholeBetween = (min, max) => Math.round(random.value() * (max - min) + min);\nexport const randomNumberBetweenMid = (min, max) => randomNumberBetween(min, max) - max / 2;\n\nexport const randomSign = () => (Math.round(random.value()) === 1 ? 1 : -1);\nexport const randomBoolean = () => Math.round(random.value()) === 1;\nexport const randomChance = (chance = 0.5) => random.chance(chance);\n\nexport const oneOf = (arry) => {\n    const i = randomWholeBetween(0, arry.length - 1);\n    return arry[i];\n};\n\nexport const lowest = (arry) =>\n    arry.reduce((acc, v) => {\n        if (v < acc) {\n            acc = v;\n        }\n        return acc;\n    }, 0);\n\nexport const highest = (arry) =>\n    arry.reduce((acc, v) => {\n        if (v > acc) {\n            acc = v;\n        }\n        return acc;\n    }, 0);\n\nexport const createRandomNumberArray = (len, min, max) =>\n    Array.from(new Array(len)).map(() => randomNumberBetween(min, max));\n\n// -> -1 ... 1\nexport const loopingValue = (t, m = 0.5) => Math.sin(t * m);\n\n// t is 0-1, -> -1 ... 1\nexport const pingPontValue = (t) => Math.sin(t * Math.PI);\n\n// x,y offsets for the current circle position\nexport const pointOnCircle = (x, y, r, a) => ({ x: r * Math.sin(a) + x, y: r * Math.cos(a) + y });\n\n// returns value between 0-1, 250,500,0 => .5\nexport const normalize = (min, max, val) => (val - min) / (max - min);\nexport const normalizeInverse = (min, max, val) => 1 - normalize(min, max, val);\n\n// https://twitter.com/mattdesl/status/1031305279227478016\n// https://www.trysmudford.com/blog/linear-interpolation-functions/\n// lerp(20, 80, 0.5) // 40\nexport const lerp = (x, y, a) => x * (1 - a) + y * a;\n\nexport const clamp = (min = 0, max = 1, a) => Math.min(max, Math.max(min, a));\n\n// invlerp(50, 100, 75)  // 0.5\nexport const invlerp = (x, y, a) => clamp(0, 1, (a - x) / (y - x));\n\n// p5js map fn is reverse map(a,x2,y2,x1,y1)\n// a is point in 1 and converts to point in 2\n// range(10, 100, 2000, 20000, 50) // 10000\nexport const mapRange = (x1, y1, x2, y2, a) => lerp(x2, y2, invlerp(x1, y1, a));\n\n// Accepts a value 0-1 and returns a value 0-1 in a sin wave\nexport const toSinValue = (value) => Math.abs(Math.sin(value * TAU));\n\nexport const marginify = ({ margin, u, v, width, height }) => ({\n    x: lerp(margin, width - margin, u),\n    y: lerp(margin, height - margin, v),\n});\n\nexport const pointDistance = (pointA, pointB) => {\n    const dx = pointA.x - pointB.x;\n    const dy = pointA.y - pointB.y;\n    return Math.sqrt(dx * dx + dy * dy);\n};\n\n// https://stackoverflow.com/questions/13043945/how-do-i-calculate-the-position-of-a-point-in-html5-canvas-after-rotation\nexport const pointRotateCoord = (point, angle) => ({\n    x: point.x * cos(angle) - point.y * sin(angle),\n    y: point.y * cos(angle) + point.x * sin(angle),\n});\n\n// https://www.khanacademy.org/computing/computer-programming/programming-natural-simulations/programming-angular-movement/a/pointing-towards-movement\nexport const pointAngleFromVelocity = ({ velocityX, velocityY }) => Math.atan2(velocityY, velocityX);\n\nexport const aFromVector = ({ x, y }) => Math.atan2(y, x);\nexport const uvFromAngle = (a) => new Vector(Math.cos(a), Math.sin(a));\n\nexport const radiansToDegrees = (rad) => (rad * 180) / Math.PI;\nexport const degreesToRadians = (deg) => (deg * Math.PI) / 180;\n\n// Scale up point grid and center in the canvas\nexport const scalePointToCanvas = (canvasWidth, canvasHeight, width, height, zoomFactor, x, y) => {\n    const particleXOffset = canvasWidth / 2 - (width * zoomFactor) / 2;\n    const particleYOffset = canvasHeight / 2 - (height * zoomFactor) / 2;\n    return {\n        x: x * zoomFactor + particleXOffset,\n        y: y * zoomFactor + particleYOffset,\n    };\n};\n\nexport const create2dNoise = (u, v, amplitude = 1, frequency = 0.5) =>\n    random.noise2D(u * frequency, v * frequency) * amplitude;\n\nexport const create2dNoiseAbs = (u, v, amplitude = 1, frequency = 0.5) =>\n    Math.abs(random.noise2D(u * frequency, v * frequency)) * amplitude;\n\nexport const create3dNoise = (u, v, t, amplitude = 1, frequency = 0.5) =>\n    random.noise3D(u * frequency, v * frequency, t * frequency) * amplitude;\n\nexport const create3dNoiseAbs = (u, v, t, amplitude = 1, frequency = 0.5) =>\n    Math.abs(random.noise3D(u * frequency, v * frequency, t * frequency)) * amplitude;\n\nexport const randomPointAround = (range = 20) => {\n    const radius = randomWholeBetween(0, range);\n    const angle = randomNumberBetween(0, TAU);\n    return { x: radius * Math.cos(angle), y: radius * Math.sin(angle) };\n};\n\n// [[x,y], ...]\nexport const createCirclePoints = (offsetX, offsetY, diameter, steps, sx = 1, sy = 1) => {\n    const points = [];\n    for (let theta = 0; theta < 360; theta += steps) {\n        const radius = theta * (Math.PI / 180);\n        const x = Math.cos(radius) * diameter + sx + offsetX;\n        const y = Math.sin(radius) * diameter + sy + offsetY;\n        points.push([x, y]);\n    }\n    return points;\n};\n\nexport const createGridPointsXY = (width, height, xMargin, yMargin, columns, rows) => {\n    const gridPoints = [];\n\n    const colStep = Math.round((width - xMargin * 2) / (columns - 1));\n    const rowStep = Math.round((height - yMargin * 2) / (rows - 1));\n\n    for (let col = 0; col < columns; col++) {\n        const x = xMargin + col * colStep;\n        for (let row = 0; row < rows; row++) {\n            const y = yMargin + row * rowStep;\n            gridPoints.push([x, y]);\n        }\n    }\n\n    return { points: gridPoints, columnWidth: colStep, rowHeight: rowStep };\n};\n\nexport const createGridCellsXY = (width, height, columns, rows, margin = 0, gutter = 0) => {\n    const points = [];\n\n    const colStep = Math.ceil((width - margin * 2 - gutter * (columns - 1)) / columns);\n    const rowStep = Math.ceil((height - margin * 2 - gutter * (rows - 1)) / rows);\n\n    for (let col = 0; col < columns; col++) {\n        const x = margin + col * colStep + gutter * col;\n        for (let row = 0; row < rows; row++) {\n            const y = margin + row * rowStep + gutter * row;\n            points.push([x, y]);\n        }\n    }\n\n    return { points, columnWidth: colStep, rowHeight: rowStep };\n};\n\n// -> [{radius, rotation, position:[u,v]}, ...]\nexport const createGridPointsUV = (columns, rows) => {\n    rows = rows || columns;\n    const points = [];\n\n    const amplitude = 0.1;\n    const frequency = 1;\n\n    for (let x = 0; x < columns; x++) {\n        for (let y = 0; y < rows; y++) {\n            const u = columns <= 1 ? 0.5 : x / (columns - 1);\n            const v = columns <= 1 ? 0.5 : y / (rows - 1);\n            // const radius = Math.abs(random.gaussian() * 0.02);\n            const radius = create2dNoiseAbs(u, v);\n            const rotation = create2dNoiseAbs(u, v);\n            points.push({\n                radius,\n                rotation,\n                position: [u, v],\n            });\n        }\n    }\n    return points;\n};\n","import tinycolor from 'tinycolor2';\n\nimport {\n    radiansToDegrees,\n    pointAngleFromVelocity,\n    pointDistance,\n    normalizeInverse,\n    pointOnCircle,\n    uvFromAngle,\n    randomWholeBetween,\n    randomNumberBetween,\n} from './math';\n\nconst TAU = Math.PI * 2;\n\nexport let isHiDPI = false;\nexport let contextScale = 1;\n\nexport const resizeCanvas = (canvas, context, width, height, scale) => {\n    contextScale = scale || window.devicePixelRatio;\n\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n\n    canvas.width = Math.floor(width * contextScale);\n    canvas.height = Math.floor(height * contextScale);\n\n    if (contextScale === 2) {\n        isHiDPI = true;\n        context.scale(1, 1);\n        // context.scale(2, 2);\n    } else {\n        context.scale(contextScale, contextScale);\n    }\n};\n\nexport const clearCanvas = (canvas, context) => (_) => context.clearRect(0, 0, canvas.width, canvas.height);\n\nexport const fillCanvas = (canvas, context) => (opacity = 1, color = '0,0,0') => {\n    context.fillStyle = `rgba(${color},${opacity})`;\n    context.fillRect(0, 0, canvas.width, canvas.height);\n};\n\nexport const background = (canvas, context) => (color = 'black') => {\n    context.fillStyle = tinycolor(color).toRgbString();\n    context.fillRect(0, 0, canvas.width, canvas.height);\n};\n\n// context.save() and context.restore() may be slow, just reset what i'm using\nexport const resetStyles = (context) => {\n    context.strokeStyle = '#000';\n    context.fillStyle = '#fff';\n    context.lineWidth = 1;\n    context.setLineDash([]);\n    context.lineCap = 'butt';\n};\n\n// https://www.rgraph.net/canvas/howto-antialias.html\nexport const sharpLines = (context) => {\n    context.translate(0.5, 0.5);\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\nexport const blendMode = (context) => (mode) => {\n    context.globalCompositeOperation = mode;\n};\n\n//----------------------------------------------------------------------------------------------------------------------\n// PRIMITIVES\n//----------------------------------------------------------------------------------------------------------------------\n\n// TODO, circle or square?\nexport const pixel = (context) => (x, y, color = 'black', mode = 'square') => {\n    context.fillStyle = tinycolor(color).toRgbString();\n    if (mode === 'circle') {\n        context.beginPath();\n        context.arc(x, y, contextScale, 0, Math.PI * 2, false);\n        context.fill();\n    } else {\n        context.fillRect(x, y, contextScale, contextScale);\n    }\n};\n\n// TODO use circle?\nexport const drawParticlePoint = (context) => ({ x, y, radius, color }) => {\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    context.fillStyle = color.toRgbString();\n    context.fill();\n};\n\nexport const setStokeColor = (context) => (color) => (context.strokeStyle = tinycolor(color).toRgbString());\n\n// linecap = butt, round, square\nexport const drawLine = (context) => (x1, y1, x2, y2, strokeWidth = 1, linecap = 'butt') => {\n    // color = 'black',\n    // context.strokeStyle = tinycolor(color).toRgbString();\n    context.lineWidth = strokeWidth;\n    context.lineCap = linecap;\n    context.beginPath();\n    context.moveTo(x1, y1);\n    context.lineTo(x2, y2);\n    context.stroke();\n};\n\nexport const drawLineAngle = (context) => (x1, y1, angle, length, strokeWidth, linecap) => {\n    const vect = uvFromAngle(angle).setMag(length);\n    const x2 = x1 + vect.x;\n    const y2 = y1 + vect.y;\n    drawLine(context)(x1, y1, x2, y2, strokeWidth, linecap);\n};\n\nexport const drawCircle = (context) => (strokeWidth, x, y, radius, color) => {\n    if (color) {\n        context.strokeStyle = tinycolor(color).toRgbString();\n    }\n    context.lineWidth = strokeWidth;\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    // context.fillStyle = 'rgba(255,255,255,.1)';\n    // context.fill();\n    context.stroke();\n};\n\nexport const drawCircleFilled = (context) => (x, y, radius, color) => {\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    context.fillStyle = color;\n    context.fill();\n};\n\nexport const drawRect = (context) => (x, y, w, h, strokeWidth = 1, color) => {\n    if (color) {\n        context.strokeStyle = tinycolor(color).toRgbString();\n    }\n    context.lineWidth = strokeWidth;\n    context.rect(x, y, w, h);\n    context.stroke();\n};\n\nexport const drawRectFilled = (context) => (x, y, w, h, color = 'white') => {\n    context.fillStyle = tinycolor(color).toRgbString();\n    context.fillRect(x, y, w, h);\n};\n\nexport const drawSquareFilled = (context) => (x, y, size, color) => {\n    drawRectFilled(context)(x, y, size, size, color);\n};\n\nexport const drawTriangleFilled = (context) => (x, y, size, color) => {\n    const half = size / 2;\n    context.beginPath();\n    context.moveTo(x - half, y - half);\n    context.lineTo(x + half, y);\n    context.lineTo(x - half, y + half);\n    context.fillStyle = color.toRgbString();\n    context.fill();\n};\n\n// https://www.scriptol.com/html5/canvas/rounded-rectangle.php\n// TODO center on x,y\nexport const drawQuadRectFilled = (context) => (x, y, w, h, color) => {\n    const mx = x + w / 2;\n    const my = y + h / 2;\n    context.beginPath();\n    // context.strokeStyle = 'green';\n    // context.lineWidth = '4';\n    context.fillStyle = tinycolor(color).toRgbString();\n    context.moveTo(x, my);\n    context.quadraticCurveTo(x, y, mx, y);\n    context.quadraticCurveTo(x + w, y, x + w, my);\n    context.quadraticCurveTo(x + w, y + h, mx, y + h);\n    context.quadraticCurveTo(x, y + h, x, my);\n    // context.stroke();\n    context.fill();\n};\n\n// https://www.scriptol.com/html5/canvas/rounded-rectangle.php\n// TODO center on x,y\nexport const drawRoundRectFilled = (context) => (x, y, w, h, corner, color) => {\n    if (w < corner || h < corner) {\n        corner = Math.min(w, h);\n    }\n\n    const r = x + w;\n    const b = y + h;\n    context.beginPath();\n    // context.strokeStyle = 'green';\n    // context.lineWidth = '4';\n    context.fillStyle = tinycolor(color).toRgbString();\n    context.moveTo(x + corner, y);\n    context.lineTo(r - corner, y);\n    context.quadraticCurveTo(r, y, r, y + corner);\n    context.lineTo(r, y + h - corner);\n    context.quadraticCurveTo(r, b, r - corner, b);\n    context.lineTo(x + corner, b);\n    context.quadraticCurveTo(x, b, x, b - corner);\n    context.lineTo(x, y + corner);\n    context.quadraticCurveTo(x, y, x + corner, y);\n    // context.stroke();\n    context.fill();\n};\n\nexport const textStyles = {\n    size: (s) => `${s * contextScale}px \"Helvetica Neue\",Helvetica,Arial,sans-serif`,\n    default: '16px \"Helvetica Neue\",Helvetica,Arial,sans-serif',\n    small: '12px \"Helvetica Neue\",Helvetica,Arial,sans-serif',\n};\n\nexport const drawTextFilled = (context) => (text, x, y, color, style) => {\n    context.fillStyle = tinycolor(color).toRgbString();\n    context.font = style || textStyles.default;\n    context.fillText(text, x, y);\n};\n\nexport const textAlignLeftTop = (context) => {\n    context.textAlign = 'left';\n    context.textBaseline = 'top';\n};\n\nexport const textAlignAllCenter = (context) => {\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n};\n\n//----------------------------------------------------------------------------------------------------------------------\n// COMPLEX SHAPES\n//----------------------------------------------------------------------------------------------------------------------\n\n// TODO center it\nexport const drawRake = (context) => ({ x, y, radius, color }, spacing) => {\n    const points = 5;\n    spacing |= radius * 3;\n    for (let i = 0; i < points; i++) {\n        drawParticlePoint(context)({ x: x + spacing * i, y, radius, color });\n    }\n};\n\n// Spikes is an array of angles\nexport const drawSpikeCircle = (context) => ({ x, y, radius, color }, spikes, spikeLength = 5) => {\n    const circleStroke = 1;\n    const spikeStroke = 2;\n    context.strokeStyle = color.toRgbString();\n    context.lineWidth = circleStroke;\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    // context.fillStyle = 'rgba(255,255,255,.1)';\n    // context.fill();\n    context.stroke();\n    for (let s = 0; s < spikes.length; s++) {\n        const pointA = pointOnCircle(x, y, radius, spikes[s]);\n        const pointB = pointOnCircle(x, y, radius + spikeLength, spikes[s]);\n        context.strokeStyle = color.toRgbString();\n        drawLine(context)(pointA.x, pointA.y, pointB.x, pointB.y, spikeStroke);\n    }\n};\n\nexport const splatter = (context) => (x, y, color, size, amount = 3, range = 20) => {\n    for (let i = 0; i < amount; i++) {\n        const s = randomWholeBetween(size * 0.25, size * 3);\n        // circle dist\n        const radius = randomWholeBetween(0, range);\n        const angle = randomNumberBetween(0, TAU);\n        const xoff = radius * Math.cos(angle);\n        const yoff = radius * Math.sin(angle);\n        // square dist\n        // const xoff = randomWholeBetween(-range, range);\n        // const yoff = randomWholeBetween(-range, range);\n        drawCircleFilled(context)(x + xoff, y + yoff, s, color);\n    }\n};\n\n//----------------------------------------------------------------------------------------------------------------------\n// PARTICLE INTERACTIVITY AND FANCY STUFF\n//----------------------------------------------------------------------------------------------------------------------\n\nexport const drawRotatedParticle = (ctx, drawFn, particle, ...args) => {\n    const pSaveX = particle.x;\n    const pSaveY = particle.y;\n    particle.x = 0;\n    particle.y = 0;\n    ctx.save();\n    ctx.translate(pSaveX, pSaveY);\n    ctx.rotate(particle.heading);\n    drawFn(ctx)(particle, args);\n    ctx.restore();\n    particle.x = pSaveX;\n    particle.y = pSaveY;\n};\n\nexport const connectParticles = (context) => (pArray, proximity, useAlpha = true) => {\n    const len = pArray.length;\n    for (let a = 0; a < len; a++) {\n        // all consecutive particles\n        for (let b = a; b < len; b++) {\n            const pA = pArray[a];\n            const pB = pArray[b];\n            const distance = pointDistance(pA, pB);\n            if (distance < proximity) {\n                const pColor = pA.color;\n                if (useAlpha) {\n                    pColor.setAlpha(normalizeInverse(0, proximity, distance));\n                }\n                context.strokeStyle = pColor.toHslString();\n                drawLine(context)(pA.x, pA.y, pB.x, pB.y, 0.5);\n            }\n        }\n    }\n    resetStyles(context);\n};\n\nexport const drawPointTrail = (context) => (particle) => {\n    const trailLen = particle.xHistory.length;\n    context.lineWidth = particle.radius;\n    const pColor = particle.color;\n    const aFade = (100 / trailLen) * 0.01;\n    let alpha = 1;\n    const sFade = (particle.radius * 2) / trailLen;\n    let stroke = particle.radius * 2;\n    for (let i = 0; i < trailLen; i++) {\n        const startX = i === 0 ? particle.x : particle.xHistory[i - 1];\n        const startY = i === 0 ? particle.y : particle.yHistory[i - 1];\n        drawLine(context)(startX, startY, particle.xHistory[i], particle.yHistory[i], stroke);\n        pColor.setAlpha(alpha);\n        context.strokeStyle = pColor.toRgbString();\n        alpha -= aFade;\n        stroke -= sFade;\n    }\n};\n\n//----------------------------------------------------------------------------------------------------------------------\n// DEBUG\n//----------------------------------------------------------------------------------------------------------------------\n\nexport const drawTestPoint = (context) => ({ x, y, radius, color }) => {\n    context.strokeStyle = color.toRgbString();\n    context.lineWidth = 1;\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    context.fillStyle = 'rgba(255,255,255,.1)';\n    context.fill();\n    context.stroke();\n    drawLine(context)(x, y, x + radius, y, 1);\n};\n\nexport const drawParticleVectors = (context) => (particle) => {\n    const vmult = 5;\n    const amult = 100;\n    const vel = 'green';\n    const acc = 'yellow';\n    const { vVector } = particle;\n    const { aVector } = particle;\n\n    context.strokeStyle = tinycolor(vel).toRgbString();\n    drawLine(context)(particle.x, particle.y, particle.x + vVector.x * vmult, particle.y + vVector.y * vmult, 1);\n\n    context.strokeStyle = tinycolor(acc).toRgbString();\n    drawLine(context)(particle.x, particle.y, particle.x + aVector.x * amult, particle.y + aVector.y * amult, 1);\n};\n\nexport const drawMouse = (context) => ({ x, y, radius }) => {\n    if (x === undefined || y === undefined) return;\n    context.strokeStyle = 'rgba(255,255,255,.25)';\n    context.lineWidth = 1;\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    context.fillStyle = 'rgba(255,255,255,.1)';\n    context.fill();\n    context.stroke();\n};\n\nexport const drawAttractor = (context) => ({ x, y, mass, g }, mode, radius) => {\n    context.beginPath();\n    context.arc(x, y, radius, 0, Math.PI * 2, false);\n    context.fillStyle = 'rgba(0,0,0,.1)';\n    context.fill();\n\n    context.beginPath();\n    context.arc(x, y, Math.sqrt(mass) * g, 0, Math.PI * 2, false);\n    context.fillStyle = mode === 1 ? 'rgba(0,255,0,.25)' : 'rgba(255,0,0,.25)';\n    context.fill();\n};\n\nexport const renderField = ({ width, height }, context, fn, color = 'black', cell = '50', length) => {\n    const mid = cell / 2;\n    for (let x = 0; x < width; x += cell) {\n        for (let y = 0; y < height; y += cell) {\n            const theta = fn(x, y);\n            const vect = uvFromAngle(theta).setMag(length || mid);\n            const x1 = x + mid;\n            const y1 = y + mid;\n            const x2 = x1 + vect.x;\n            const y2 = y1 + vect.y;\n            context.strokeStyle = tinycolor(color);\n            context.lineWidth = 1;\n            context.beginPath();\n            context.moveTo(x1, y1);\n            context.lineTo(x2, y2);\n            context.stroke();\n        }\n    }\n};\n\n//----------------------------------------------------------------------------------------------------------------------\n// IMAGE DATA / PIXELS\n//----------------------------------------------------------------------------------------------------------------------\n\nexport const getImageDataFromImage = (context) => (image) => {\n    context.drawImage(image, 0, 0);\n    return context.getImageData(0, 0, image.width, image.width);\n};\n\n/*\nGray = 0.21R + 0.72G + 0.07B // Luminosity\nGray = (R + G + B) Ã· 3 // Average Brightness\nGray = 0.299R + 0.587G + 0.114B // rec601 standard\nGray = 0.2126R + 0.7152G + 0.0722B // ITU-R BT.709 standard\nGray = 0.2627R + 0.6780G + 0.0593B // ITU-R BT.2100 standard\n */\n// https://sighack.com/post/averaging-rgb-colors-the-right-way\nexport const getColorAverageGrey = ({ r, g, b }) => Math.sqrt((r * r + g * g + b * b) / 3);\n\n// https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Pixel_manipulation_with_canvas\nexport const getImageDataColor = (imageData, x, y) => ({\n    r: imageData.data[y * 4 * imageData.width + x * 4],\n    g: imageData.data[y * 4 * imageData.width + x * 4 + 1],\n    b: imageData.data[y * 4 * imageData.width + x * 4 + 2],\n    a: imageData.data[y * 4 * imageData.width + x * 4 + 3],\n});\n\n/*\nconst getImagePixelTheta = (x, y) => {\n        const imagePixelColor = tinycolor(getImageDataColor(imageData, x, y)).getBrightness();\n        return (imagePixelColor / 256) * TAU;\n    };\n\n    const getImagePixelColor = (x, y) => {\n        const imagePixel = getImageDataColor(\n            imageData,\n            Math.round(x / imageZoomFactor),\n            Math.round(y / imageZoomFactor)\n        );\n        return tinycolor(imagePixel);\n    };\n */\n","/*\nConvenience canvas sketch runner. Based on p5js\n\n\nconst variation = () => {\n    const config = {};\n\n    const setup = ({canvas, context}) => {\n        // create initial state\n    };\n\n    // will run every frame\n    const draw = ({canvas, context, mouse}) => {\n        // draw on every frame\n        return 1; // -1 to exit animation loop\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n\nTODO\n- [ ] options for layout: portrait, landscape\n- [ ] canvas ratio: auto, square, golden, letter\n- [ ] merge screen shot code\n- [ ] Canvas Recorder  https://xosh.org/canvas-recorder/\n- [ ] pass obj to variation setup and draw functions\n- [ ] coords of a mouse down to variation?\n- [ ] better touch input\n- [ ] svg https://github.com/canvg/canvg\n*/\n\nimport { isHiDPI, contextScale, resizeCanvas } from './canvas';\nimport { getRandomSeed, golden } from './math';\n\nexport const orientation = {\n    portrait: 0,\n    landscape: 1,\n};\n\nexport const ratio = {\n    letter: 0.773,\n    golden: golden - 1,\n    square: -1,\n    auto: 1,\n};\n\nexport const scale = {\n    standard: 1,\n    hidpi: 2,\n};\n\nconst defaultValue = (obj, key, value) => (obj.hasOwnProperty(key) ? obj[key] : value);\n\nexport const sketch = () => {\n    const mouse = {\n        x: undefined,\n        y: undefined,\n        isDown: false,\n        radius: 100,\n    };\n\n    let fps = 0;\n\n    let currentVariation;\n\n    const canvasSizeFraction = 0.85;\n    const canvas = document.getElementById('canvas');\n    const context = canvas.getContext('2d');\n\n    const getCanvas = (_) => canvas;\n    const getContext = (_) => context;\n    const getMouse = (_) => mouse;\n\n    const mouseDown = (evt) => {\n        mouse.isDown = true;\n    };\n\n    const mouseMove = (evt) => {\n        const mult = isHiDPI ? 2 : 1;\n        const canvasFrame = canvas.getBoundingClientRect();\n        mouse.x = (evt.x - canvasFrame.x) * mult;\n        mouse.y = (evt.y - canvasFrame.y) * mult;\n    };\n\n    const mouseUp = (evt) => {\n        mouse.isDown = false;\n    };\n\n    const mouseOut = (evt) => {\n        mouse.x = undefined;\n        mouse.y = undefined;\n        mouse.isDown = false;\n    };\n\n    const windowResize = (evt) =>\n        resizeCanvas(canvas, context, window.innerWidth * canvasSizeFraction, window.innerHeight * canvasSizeFraction);\n\n    window.addEventListener('mousedown', mouseDown);\n    window.addEventListener('touchstart', mouseDown);\n\n    window.addEventListener('mousemove', mouseMove);\n    window.addEventListener('touchmove', mouseMove);\n\n    window.addEventListener('mouseup', mouseUp);\n    window.addEventListener('touchend', mouseUp);\n\n    window.addEventListener('mouseout', mouseOut);\n    window.addEventListener('touchcancel', mouseOut);\n\n    // window.addEventListener('resize', windowResize);\n\n    const applyCanvasSize = (config) => {\n        const width = defaultValue(config, 'width', window.innerWidth * canvasSizeFraction);\n        const height = defaultValue(config, 'height', window.innerHeight * canvasSizeFraction);\n        let newWidth = width;\n        let newHeight = height;\n\n        const cfgOrientation = defaultValue(config, 'orientation', orientation.landscape);\n        const cfgRatio = defaultValue(config, 'ratio', ratio.auto);\n        const cfgScale = defaultValue(config, 'scale', scale.standard);\n\n        const aSide = Math.min(width, height);\n        const bSide = Math.round(cfgRatio * aSide);\n\n        if (cfgRatio === ratio.square) {\n            newWidth = aSide;\n            newHeight = aSide;\n        } else if (cfgOrientation === orientation.portrait) {\n            newWidth = bSide;\n            newHeight = aSide;\n        } else if (cfgOrientation === orientation.landscape && cfgRatio !== ratio.auto) {\n            console.log('land');\n            newWidth = aSide;\n            newHeight = bSide;\n        }\n\n        resizeCanvas(canvas, context, newWidth, newHeight, cfgScale);\n    };\n\n    const run = (variation) => {\n        currentVariation = variation;\n\n        let backgroundColor = '0,0,0';\n\n        if (variation.hasOwnProperty('config')) {\n            const { config } = variation;\n            console.log('Sketch config:', variation.config);\n            applyCanvasSize(config);\n            if (config.background) {\n                backgroundColor = config.background;\n            }\n            if (config.fps) {\n                fps = config.fps;\n            }\n        } else {\n            resizeCanvas(\n                canvas,\n                context,\n                window.innerWidth * canvasSizeFraction,\n                window.innerHeight * canvasSizeFraction\n            );\n        }\n\n        let rendering = true;\n        const targetFpsInterval = 1000 / fps;\n        let lastAnimationFrameTime;\n\n        context.translate(0.5, 0.5);\n\n        const startSketch = () => {\n            window.removeEventListener('load', startSketch);\n            variation.setup({ canvas, context });\n\n            // fillCanvas(canvas, context)(1,backgroundColor);\n\n            const render = () => {\n                const result = variation.draw({ canvas, context, mouse });\n                if (result !== -1) {\n                    requestAnimationFrame(render);\n                }\n            };\n\n            // https://stackoverflow.com/questions/19764018/controlling-fps-with-requestanimationframe\n            const renderAtFps = () => {\n                if (rendering) {\n                    requestAnimationFrame(renderAtFps);\n                }\n\n                const now = Date.now();\n                const elapsed = now - lastAnimationFrameTime;\n\n                if (elapsed > targetFpsInterval) {\n                    lastAnimationFrameTime = now - (elapsed % targetFpsInterval);\n                    const result = variation.draw({ canvas, context, mouse });\n                    if (result === -1) {\n                        rendering = false;\n                    }\n                }\n            };\n\n            if (!fps) {\n                requestAnimationFrame(render);\n            } else {\n                lastAnimationFrameTime = Date.now();\n                requestAnimationFrame(renderAtFps);\n            }\n        };\n\n        window.addEventListener('load', startSketch);\n    };\n\n    const getVariationName = () => {\n        const seed = getRandomSeed();\n        let name = 'untitled';\n        if (\n            currentVariation &&\n            currentVariation.hasOwnProperty('config') &&\n            currentVariation.config.hasOwnProperty('name')\n        ) {\n            name = currentVariation.config.name;\n        }\n        return `sketch-${name}-${seed}`;\n    };\n\n    return {\n        variationName: getVariationName,\n        canvas: getCanvas,\n        context: getContext,\n        mouse: getMouse,\n        run,\n    };\n};\n","module.exports=[[\"#69d2e7\",\"#a7dbd8\",\"#e0e4cc\",\"#f38630\",\"#fa6900\"],[\"#fe4365\",\"#fc9d9a\",\"#f9cdad\",\"#c8c8a9\",\"#83af9b\"],[\"#ecd078\",\"#d95b43\",\"#c02942\",\"#542437\",\"#53777a\"],[\"#556270\",\"#4ecdc4\",\"#c7f464\",\"#ff6b6b\",\"#c44d58\"],[\"#774f38\",\"#e08e79\",\"#f1d4af\",\"#ece5ce\",\"#c5e0dc\"],[\"#e8ddcb\",\"#cdb380\",\"#036564\",\"#033649\",\"#031634\"],[\"#490a3d\",\"#bd1550\",\"#e97f02\",\"#f8ca00\",\"#8a9b0f\"],[\"#594f4f\",\"#547980\",\"#45ada8\",\"#9de0ad\",\"#e5fcc2\"],[\"#00a0b0\",\"#6a4a3c\",\"#cc333f\",\"#eb6841\",\"#edc951\"],[\"#e94e77\",\"#d68189\",\"#c6a49a\",\"#c6e5d9\",\"#f4ead5\"],[\"#3fb8af\",\"#7fc7af\",\"#dad8a7\",\"#ff9e9d\",\"#ff3d7f\"],[\"#d9ceb2\",\"#948c75\",\"#d5ded9\",\"#7a6a53\",\"#99b2b7\"],[\"#ffffff\",\"#cbe86b\",\"#f2e9e1\",\"#1c140d\",\"#cbe86b\"],[\"#efffcd\",\"#dce9be\",\"#555152\",\"#2e2633\",\"#99173c\"],[\"#343838\",\"#005f6b\",\"#008c9e\",\"#00b4cc\",\"#00dffc\"],[\"#413e4a\",\"#73626e\",\"#b38184\",\"#f0b49e\",\"#f7e4be\"],[\"#ff4e50\",\"#fc913a\",\"#f9d423\",\"#ede574\",\"#e1f5c4\"],[\"#99b898\",\"#fecea8\",\"#ff847c\",\"#e84a5f\",\"#2a363b\"],[\"#655643\",\"#80bca3\",\"#f6f7bd\",\"#e6ac27\",\"#bf4d28\"],[\"#00a8c6\",\"#40c0cb\",\"#f9f2e7\",\"#aee239\",\"#8fbe00\"],[\"#351330\",\"#424254\",\"#64908a\",\"#e8caa4\",\"#cc2a41\"],[\"#554236\",\"#f77825\",\"#d3ce3d\",\"#f1efa5\",\"#60b99a\"],[\"#5d4157\",\"#838689\",\"#a8caba\",\"#cad7b2\",\"#ebe3aa\"],[\"#8c2318\",\"#5e8c6a\",\"#88a65e\",\"#bfb35a\",\"#f2c45a\"],[\"#fad089\",\"#ff9c5b\",\"#f5634a\",\"#ed303c\",\"#3b8183\"],[\"#ff4242\",\"#f4fad2\",\"#d4ee5e\",\"#e1edb9\",\"#f0f2eb\"],[\"#f8b195\",\"#f67280\",\"#c06c84\",\"#6c5b7b\",\"#355c7d\"],[\"#d1e751\",\"#ffffff\",\"#000000\",\"#4dbce9\",\"#26ade4\"],[\"#1b676b\",\"#519548\",\"#88c425\",\"#bef202\",\"#eafde6\"],[\"#5e412f\",\"#fcebb6\",\"#78c0a8\",\"#f07818\",\"#f0a830\"],[\"#bcbdac\",\"#cfbe27\",\"#f27435\",\"#f02475\",\"#3b2d38\"],[\"#452632\",\"#91204d\",\"#e4844a\",\"#e8bf56\",\"#e2f7ce\"],[\"#eee6ab\",\"#c5bc8e\",\"#696758\",\"#45484b\",\"#36393b\"],[\"#f0d8a8\",\"#3d1c00\",\"#86b8b1\",\"#f2d694\",\"#fa2a00\"],[\"#2a044a\",\"#0b2e59\",\"#0d6759\",\"#7ab317\",\"#a0c55f\"],[\"#f04155\",\"#ff823a\",\"#f2f26f\",\"#fff7bd\",\"#95cfb7\"],[\"#b9d7d9\",\"#668284\",\"#2a2829\",\"#493736\",\"#7b3b3b\"],[\"#bbbb88\",\"#ccc68d\",\"#eedd99\",\"#eec290\",\"#eeaa88\"],[\"#b3cc57\",\"#ecf081\",\"#ffbe40\",\"#ef746f\",\"#ab3e5b\"],[\"#a3a948\",\"#edb92e\",\"#f85931\",\"#ce1836\",\"#009989\"],[\"#300030\",\"#480048\",\"#601848\",\"#c04848\",\"#f07241\"],[\"#67917a\",\"#170409\",\"#b8af03\",\"#ccbf82\",\"#e33258\"],[\"#aab3ab\",\"#c4cbb7\",\"#ebefc9\",\"#eee0b7\",\"#e8caaf\"],[\"#e8d5b7\",\"#0e2430\",\"#fc3a51\",\"#f5b349\",\"#e8d5b9\"],[\"#ab526b\",\"#bca297\",\"#c5ceae\",\"#f0e2a4\",\"#f4ebc3\"],[\"#607848\",\"#789048\",\"#c0d860\",\"#f0f0d8\",\"#604848\"],[\"#b6d8c0\",\"#c8d9bf\",\"#dadabd\",\"#ecdbbc\",\"#fedcba\"],[\"#a8e6ce\",\"#dcedc2\",\"#ffd3b5\",\"#ffaaa6\",\"#ff8c94\"],[\"#3e4147\",\"#fffedf\",\"#dfba69\",\"#5a2e2e\",\"#2a2c31\"],[\"#fc354c\",\"#29221f\",\"#13747d\",\"#0abfbc\",\"#fcf7c5\"],[\"#cc0c39\",\"#e6781e\",\"#c8cf02\",\"#f8fcc1\",\"#1693a7\"],[\"#1c2130\",\"#028f76\",\"#b3e099\",\"#ffeaad\",\"#d14334\"],[\"#a7c5bd\",\"#e5ddcb\",\"#eb7b59\",\"#cf4647\",\"#524656\"],[\"#dad6ca\",\"#1bb0ce\",\"#4f8699\",\"#6a5e72\",\"#563444\"],[\"#5c323e\",\"#a82743\",\"#e15e32\",\"#c0d23e\",\"#e5f04c\"],[\"#edebe6\",\"#d6e1c7\",\"#94c7b6\",\"#403b33\",\"#d3643b\"],[\"#fdf1cc\",\"#c6d6b8\",\"#987f69\",\"#e3ad40\",\"#fcd036\"],[\"#230f2b\",\"#f21d41\",\"#ebebbc\",\"#bce3c5\",\"#82b3ae\"],[\"#b9d3b0\",\"#81bda4\",\"#b28774\",\"#f88f79\",\"#f6aa93\"],[\"#3a111c\",\"#574951\",\"#83988e\",\"#bcdea5\",\"#e6f9bc\"],[\"#5e3929\",\"#cd8c52\",\"#b7d1a3\",\"#dee8be\",\"#fcf7d3\"],[\"#1c0113\",\"#6b0103\",\"#a30006\",\"#c21a01\",\"#f03c02\"],[\"#000000\",\"#9f111b\",\"#b11623\",\"#292c37\",\"#cccccc\"],[\"#382f32\",\"#ffeaf2\",\"#fcd9e5\",\"#fbc5d8\",\"#f1396d\"],[\"#e3dfba\",\"#c8d6bf\",\"#93ccc6\",\"#6cbdb5\",\"#1a1f1e\"],[\"#f6f6f6\",\"#e8e8e8\",\"#333333\",\"#990100\",\"#b90504\"],[\"#1b325f\",\"#9cc4e4\",\"#e9f2f9\",\"#3a89c9\",\"#f26c4f\"],[\"#a1dbb2\",\"#fee5ad\",\"#faca66\",\"#f7a541\",\"#f45d4c\"],[\"#c1b398\",\"#605951\",\"#fbeec2\",\"#61a6ab\",\"#accec0\"],[\"#5e9fa3\",\"#dcd1b4\",\"#fab87f\",\"#f87e7b\",\"#b05574\"],[\"#951f2b\",\"#f5f4d7\",\"#e0dfb1\",\"#a5a36c\",\"#535233\"],[\"#8dccad\",\"#988864\",\"#fea6a2\",\"#f9d6ac\",\"#ffe9af\"],[\"#2d2d29\",\"#215a6d\",\"#3ca2a2\",\"#92c7a3\",\"#dfece6\"],[\"#413d3d\",\"#040004\",\"#c8ff00\",\"#fa023c\",\"#4b000f\"],[\"#eff3cd\",\"#b2d5ba\",\"#61ada0\",\"#248f8d\",\"#605063\"],[\"#ffefd3\",\"#fffee4\",\"#d0ecea\",\"#9fd6d2\",\"#8b7a5e\"],[\"#cfffdd\",\"#b4dec1\",\"#5c5863\",\"#a85163\",\"#ff1f4c\"],[\"#9dc9ac\",\"#fffec7\",\"#f56218\",\"#ff9d2e\",\"#919167\"],[\"#4e395d\",\"#827085\",\"#8ebe94\",\"#ccfc8e\",\"#dc5b3e\"],[\"#a8a7a7\",\"#cc527a\",\"#e8175d\",\"#474747\",\"#363636\"],[\"#f8edd1\",\"#d88a8a\",\"#474843\",\"#9d9d93\",\"#c5cfc6\"],[\"#046d8b\",\"#309292\",\"#2fb8ac\",\"#93a42a\",\"#ecbe13\"],[\"#f38a8a\",\"#55443d\",\"#a0cab5\",\"#cde9ca\",\"#f1edd0\"],[\"#a70267\",\"#f10c49\",\"#fb6b41\",\"#f6d86b\",\"#339194\"],[\"#ff003c\",\"#ff8a00\",\"#fabe28\",\"#88c100\",\"#00c176\"],[\"#ffedbf\",\"#f7803c\",\"#f54828\",\"#2e0d23\",\"#f8e4c1\"],[\"#4e4d4a\",\"#353432\",\"#94ba65\",\"#2790b0\",\"#2b4e72\"],[\"#0ca5b0\",\"#4e3f30\",\"#fefeeb\",\"#f8f4e4\",\"#a5b3aa\"],[\"#4d3b3b\",\"#de6262\",\"#ffb88c\",\"#ffd0b3\",\"#f5e0d3\"],[\"#fffbb7\",\"#a6f6af\",\"#66b6ab\",\"#5b7c8d\",\"#4f2958\"],[\"#edf6ee\",\"#d1c089\",\"#b3204d\",\"#412e28\",\"#151101\"],[\"#9d7e79\",\"#ccac95\",\"#9a947c\",\"#748b83\",\"#5b756c\"],[\"#fcfef5\",\"#e9ffe1\",\"#cdcfb7\",\"#d6e6c3\",\"#fafbe3\"],[\"#9cddc8\",\"#bfd8ad\",\"#ddd9ab\",\"#f7af63\",\"#633d2e\"],[\"#30261c\",\"#403831\",\"#36544f\",\"#1f5f61\",\"#0b8185\"],[\"#aaff00\",\"#ffaa00\",\"#ff00aa\",\"#aa00ff\",\"#00aaff\"],[\"#d1313d\",\"#e5625c\",\"#f9bf76\",\"#8eb2c5\",\"#615375\"],[\"#ffe181\",\"#eee9e5\",\"#fad3b2\",\"#ffba7f\",\"#ff9c97\"],[\"#73c8a9\",\"#dee1b6\",\"#e1b866\",\"#bd5532\",\"#373b44\"],[\"#805841\",\"#dcf7f3\",\"#fffcdd\",\"#ffd8d8\",\"#f5a2a2\"]];","import tinycolor from 'tinycolor2';\nimport * as nicepalettes from 'nice-color-palettes';\nimport { mapRange, oneOf, randomWholeBetween } from './math';\n\nexport const asTinyColor = (arry) => arry.map((c) => tinycolor(c));\n\nexport const brightest = (arry) => {\n    const colors = asTinyColor(arry);\n    return colors.reduce((acc, c) => {\n        if (c.getBrightness() > acc.getBrightness()) {\n            acc = c;\n        }\n        return acc;\n    }, colors[0]);\n};\n\nexport const darkest = (arry) => {\n    const colors = asTinyColor(arry);\n    return colors.reduce((acc, c) => {\n        if (c.getBrightness() < acc.getBrightness()) {\n            acc = c;\n        }\n        return acc;\n    }, colors[0]);\n};\n\nexport const warmWhite = tinycolor('hsl(42, 14%, 86%)');\nexport const warmPink = tinycolor('hsl(29, 42%, 86%)');\n\n// greys from https://uxdesign.cc/dark-mode-ui-design-the-definitive-guide-part-1-color-53dcfaea5129\nexport const coolGreyDark = tinycolor('#1f2933');\nexport const warmGreyDark = tinycolor('#27241d');\n\nexport const palettes = {\n    greyWarm: [\n        '#faf97f',\n        '#e8e6e1',\n        '#d3cec4',\n        '#b8b2a7',\n        '#a39e93',\n        '#857f72',\n        '#625d52',\n        '#504a40',\n        '#423d33',\n        '#27241d',\n    ],\n    greyCool: [\n        '#f5f7fa',\n        '#e4e7eb',\n        '#cbd2d9',\n        '#9aa5b1',\n        '#7b8794',\n        '#616e7c',\n        '#52606d',\n        '#3e4c59',\n        '#323f4b',\n        '#1f2933',\n    ],\n    pop: ['#ed3441', '#ffd630', '#329fe3', '#154296', '#303030'],\n    '70s': ['#73BFA3', '#F2DBAE', '#F29829', '#D9631E', '#593C2C'],\n    '80s_pastells': ['#FF3F3F', '#FF48C4', '#F3EA5F', '#C04DF9', '#2BD1FC', '#38CEF6'],\n    '80s_pop': ['#FF82E2', '#70BAFF', '#FED715', '#0037B3', '#FE0879'],\n    '90s': ['#42C8B0', '#4575F3', '#6933B0', '#D36F88', '#FC8D45'],\n    retro_sunset: ['#FFD319', '#FF2975', '#F222FF', '#8C1EFF', '#FF901F'],\n    vapor_wave: ['#F6A3EF', '#50D8EC', '#DD6DFB', '#EECD69', '#6FEAE6'],\n    // https://www.colourlovers.com/palette/694737/Thought_Provoking\n    thought_provoking: [\n        'hsl(46, 75%, 70%)',\n        'hsl(10, 66%, 56%)',\n        'hsl(350, 65%, 46%)',\n        'hsl(336, 40%, 24%)',\n        'hsl(185, 19%, 40%)',\n    ],\n};\n\nexport const nicePalette = (_) => nicepalettes[randomWholeBetween(0, 99)];\nexport const palette = (_) => palettes[oneOf(Object.keys(palettes))];\n\n// hslFromRange(50, 90,270, v);\nexport const hslFromRange = (y1, x2, y2, v) => {\n    const h = mapRange(0, y1, x2, y2, v);\n    const s = 100;\n    const l = 50;\n    return tinycolor(`hsl(${h},${s}%,${l}%)`);\n};\n\n/*\nColor between 2 defined and a hue spin in the middle to introduce a 3rd\n// Palette from https://www.colourlovers.com/palette/694737/Thought_Provoking\n\nconst colorTop = 'hsl(350, 65%, 46%)';\nconst colorBottom = 'hsl(185, 19%, 40%)';\nconst distFromCenter = Math.abs(mid - currentY);\nconst color = tinycolor.mix(colorTop, colorBottom, mapRange(startY, maxY, 0, 100, currentY));\ncolor.spin(mapRange(0, mid / 2, 60, 0, distFromCenter));\ncolor.brighten(mapRange(0, mid / 2, 50, 0, distFromCenter));\ncolor.darken(mapRange(0, mid, 0, 40, distFromCenter) + randomNumberBetween(0, 30));\n */\n","import { background, drawTextFilled, textStyles, pixel, drawRect, contextScale, textAlignLeftTop } from '../lib/canvas';\nimport {\n    create2dNoiseAbs,\n    mapRange,\n    oneOf,\n    pointDistance,\n    randomWholeBetween,\n    round2,\n    createGridCellsXY,\n} from '../lib/math';\nimport { brightest, darkest, nicePalette } from '../lib/palettes';\nimport { ratio, scale } from '../lib/sketch';\n\nclass Curve {\n    constructor(x, y, radius, angle, speed, noise) {\n        this.x = x;\n        this.y = y;\n        this.originX = x;\n        this.originY = y;\n        this.radius = radius;\n        this.speed = speed || 1;\n        this.angle = angle || 0;\n        this.noise = noise;\n\n        // Randomize some noise possibilities\n        this.xa = oneOf([randomWholeBetween(1, 5), round2(this.noise)]);\n        this.xb = oneOf([randomWholeBetween(1, 5), round2(this.noise)]);\n        this.ya = oneOf([randomWholeBetween(1, 5), round2(this.noise)]);\n        this.yb = oneOf([randomWholeBetween(1, 5), round2(this.noise)]);\n    }\n\n    get size() {\n        return this.radius * 2;\n    }\n\n    get centerX() {\n        return this.originX + this.radius;\n    }\n\n    get centerY() {\n        return this.originY + this.radius;\n    }\n\n    get distFromCenter() {\n        return pointDistance({ x: this.centerX, y: this.centerY }, { x: this.x, y: this.y });\n    }\n}\n\nexport const lissajous01 = () => {\n    const config = {\n        name: 'lissajous01',\n        ratio: ratio.square,\n        scale: scale.hidpi,\n    };\n\n    const renderBatch = 10;\n    const curves = [];\n    let canvasCenterX;\n    let canvasCenterY;\n    let centerRadius;\n    const columns = 3;\n    let margin;\n    const palette = nicePalette();\n    const colorBackground = brightest(palette).clone().lighten(10);\n    const colorCurve = darkest(palette).clone().darken(25);\n    const colorText = colorBackground.clone().darken(15).desaturate(20);\n    let tick = 0;\n    let grid;\n\n    const setup = ({ canvas, context }) => {\n        canvasCenterX = canvas.width / 2;\n        canvasCenterY = canvas.height / 2;\n        centerRadius = canvas.height / 4;\n        margin = 50 * contextScale;\n        if (columns === 1) {\n            curves.push(new Curve(canvasCenterX, canvasCenterY, centerRadius, 0, 0.05));\n        } else {\n            grid = createGridCellsXY(canvas.width, canvas.width, columns, columns, margin, margin / 2);\n            grid.points.forEach((point) => {\n                const x = point[0];\n                const y = point[1];\n                curves.push(new Curve(x, y, grid.columnWidth / 2, 0, 0.05, create2dNoiseAbs(x, y)));\n            });\n        }\n\n        background(canvas, context)(colorBackground);\n    };\n\n    const circleX = (curve, v = 1) => curve.radius * Math.cos(curve.angle * v);\n    const circleY = (curve, v = 1) => curve.radius * Math.sin(curve.angle * v);\n\n    // k is # of petals\n    // https://en.wikipedia.org/wiki/Rose_(mathematics)\n    // http://xahlee.info/SpecialPlaneCurves_dir/Rose_dir/rose.html\n    const roseX = (curve, k = 1, a = 1, b = 1) =>\n        curve.radius * Math.cos(k * curve.angle * a) * Math.cos(curve.angle * b);\n    const roseY = (curve, k = 1, a = 1, b = 1) =>\n        curve.radius * Math.cos(k * curve.angle * a) * Math.sin(curve.angle * b);\n\n    const linearYDown = (curve) => {\n        let { y } = curve;\n        if (++y > curve.size) y = 0;\n        return y;\n    };\n\n    const draw = ({ context }) => {\n        grid.points.forEach((point) => {\n            drawRect(context)(point[0], point[1], grid.columnWidth, grid.rowHeight, 1, colorText);\n        });\n        for (let b = 0; b < renderBatch; b++) {\n            for (let i = 0; i < curves.length; i++) {\n                // const idx = i + 1;\n                // const pointRad = 1;\n                const c = curves[i];\n\n                const k = round2(((i + 1) * 2) / 9);\n\n                const { xa } = c;\n                const { xb } = c;\n                const { ya } = c;\n                const { yb } = c;\n\n                // c.x = circleX(c);\n                // c.y = circleY(c);\n                c.x = roseX(c, k, xa, xb);\n                c.y = roseY(c, k, ya, yb);\n                // c.y = linearYDown(c);\n\n                // TODO, put a/b on the canvas so i can remember them!\n\n                c.angle += c.speed;\n\n                // const h = mapRange(0, c.radius, 180, 270, c.distFromCenter);\n                // const s = 100;\n                // const l = 30;\n                // const a = 0.75;\n                // const color = `hsla(${h},${s}%,${l}%,${a})`;\n\n                pixel(context)(c.x + c.centerX, c.y + c.centerY, colorCurve);\n\n                textAlignLeftTop(context);\n                drawTextFilled(context)(\n                    `k=${k}, ${xa}, ${xb}, ${ya}, ${yb}`,\n                    c.originX,\n                    c.originY + c.size + margin / 3,\n                    colorText,\n                    textStyles.size(10)\n                );\n            }\n            tick++;\n        }\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport { background } from '../lib/canvas';\nimport { ratio, orientation } from '../lib/sketch';\nimport { create2dNoiseAbs, mapRange, randomNumberBetween, lowest, highest } from '../lib/math';\n\n/*\nOriginal inspiration\nChurn by Kenny Vaden\nhttps://www.reddit.com/r/generative/comments/lq8r11/churn_r_code/\n */\n\nconst createWave = (width, angle, frequency, amplitude, noise = 1) => {\n    const points = [];\n    const cfrequency = frequency * noise;\n    const camplitude = amplitude * noise;\n\n    for (let i = 0; i < width; i++) {\n        const s = Math.sin((angle + Math.PI * 2 + i) / frequency) * amplitude;\n        const c = Math.cos((angle + Math.PI * 2 + i) / cfrequency) * camplitude;\n        points.push(s + c);\n    }\n\n    return points;\n};\n\n// get the lowest of top and the highest of bottom, height+=that difference\nconst drawWaveLine = (context) => (startx, endx, yorigin, height, topWave, bottomWave, color, dots = true) => {\n    let currentX = startx;\n    let currentY = yorigin;\n\n    const waveColor = color.clone();\n\n    // const highestTop = lowest(topWave);\n    const lineheight = highest(bottomWave) - lowest(topWave) + height;\n\n    const gradient = context.createLinearGradient(0, yorigin, 0, yorigin + lineheight);\n    gradient.addColorStop(0, waveColor.toRgbString());\n    gradient.addColorStop(1, waveColor.darken(20).toRgbString());\n\n    context.strokeStyle = waveColor.darken(70).toRgbString();\n    context.lineWidth = 0.75;\n    context.beginPath();\n\n    context.moveTo(startx, currentY);\n\n    let xstep = (endx - startx) / topWave.length + 1;\n    topWave.forEach((w) => {\n        context.lineTo(currentX, w + currentY);\n        currentX += xstep;\n    });\n\n    currentY += lineheight;\n    context.lineTo(currentX, currentY);\n\n    xstep = (endx - startx) / bottomWave.length + 1;\n    bottomWave.forEach((w) => {\n        context.lineTo(currentX, w + currentY);\n        currentX -= xstep;\n    });\n\n    context.lineTo(startx, currentY);\n\n    if (dots) {\n        context.stroke();\n        context.fillStyle = gradient;\n    } else {\n        context.fillStyle = tinycolor(waveColor).toRgbString();\n    }\n\n    context.fill();\n\n    if (dots) {\n        currentX = startx;\n        currentY = yorigin;\n        xstep = (endx - startx) / topWave.length + 1;\n        const dotColor = color.clone();\n        topWave.forEach((w) => {\n            // if (w <= highestTop * 0.5) {\n            const rnd = randomNumberBetween(0, yorigin);\n            if (rnd < 2) {\n                // context.strokeStyle = tinycolor(waveColor).darken(20).toRgbString();\n                // context.lineWidth = 2;\n                const radius = rnd < 0.008 ? randomNumberBetween(50, 100) : randomNumberBetween(1, 3);\n\n                context.fillStyle = dotColor.lighten(5).toRgbString();\n                context.beginPath();\n                context.arc(\n                    currentX + randomNumberBetween(-50, 50),\n                    w + currentY - randomNumberBetween(5, 50),\n                    radius,\n                    0,\n                    Math.PI * 2,\n                    false\n                );\n                context.fill();\n                context.stroke();\n            }\n            // }\n            currentX += xstep;\n        });\n    }\n};\n\nexport const waves01 = () => {\n    const config = {\n        name: 'waves01',\n        // orientation: orientation.portrait,\n        ratio: ratio.square,\n    };\n\n    let canvasHeight;\n    let canvasMiddle;\n\n    // Palette from https://www.colourlovers.com/palette/694737/Thought_Provoking\n    const colorBackground = 'hsl(46, 75%, 70%)';\n    const colorTop = 'hsl(350, 65%, 46%)';\n    const colorBottom = 'hsl(185, 19%, 40%)';\n\n    const waves = [];\n\n    const waveResolution = 400;\n    let waveRows;\n\n    let incrementY = 1;\n    let startY = 0;\n    let currentY;\n    let maxY;\n\n    let angle = 90;\n    let frequency = 10;\n    let amplitude = 10;\n    let cosOffset = 0;\n\n    const createWavesRow = (idx) => {\n        const mid = waveRows / 2;\n        const distFromCenter = Math.abs(mid - idx);\n\n        angle = mapRange(0, waveRows, 0, 360, idx);\n\n        frequency = mapRange(0, mid, 8, 30, distFromCenter);\n        amplitude = mapRange(0, mid, 15, 20, distFromCenter) + randomNumberBetween(-5, 5);\n\n        const noise = create2dNoiseAbs(angle, idx, amplitude * 0.5, frequency * randomNumberBetween(0, 2));\n        cosOffset = noise / randomNumberBetween(2, 10);\n\n        return {\n            top: createWave(waveResolution, angle, frequency, amplitude, cosOffset),\n            bottom: createWave(waveResolution, angle, frequency, amplitude, cosOffset),\n        };\n    };\n\n    const setup = ({ canvas, context }) => {\n        canvasHeight = canvas.height;\n        canvasMiddle = canvas.height / 2;\n\n        waveRows = canvas.height;\n\n        const buffer = canvas.height / 5;\n        startY = buffer;\n\n        currentY = startY;\n\n        maxY = canvas.height - buffer * 1.5;\n        incrementY = (maxY - startY) / waveRows;\n\n        for (let i = 0; i < waveRows; i++) {\n            waves.push(createWavesRow(i));\n        }\n\n        background(canvas, context)(tinycolor(colorBackground).lighten(20));\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        const mid = canvasMiddle;\n\n        for (let i = 0; i < waves.length; i++) {\n            const distFromCenter = Math.abs(mid - currentY);\n            const color = tinycolor.mix(colorTop, colorBottom, mapRange(startY, maxY, 0, 100, currentY));\n\n            color.spin(mapRange(0, mid / 2, 60, 0, distFromCenter));\n            color.brighten(mapRange(0, mid / 2, 50, 0, distFromCenter));\n            color.darken(mapRange(0, mid, 0, 40, distFromCenter) + randomNumberBetween(0, 30));\n\n            const height = mapRange(startY, maxY, 50, 0, currentY);\n            drawWaveLine(context)(0, canvas.width, currentY, height, waves[i].top, waves[i].bottom, color, true);\n\n            currentY += incrementY;\n        }\n\n        // final white lines at top and bottom to clean up edges\n        // drawWaveLine(context)(0, canvas.width, currentY + rowHeight, 200, topwave, [0], 'white', false);\n        // drawWaveLine(context)(0, canvas.width, -100, 100, topwave, bottomwave, 'white', false);\n\n        return -1;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","/*\nCanvas animation timeline based on Canvas Sketch time keeping methods\nhttps://github.com/mattdesl/canvas-sketch/blob/master/docs/animated-sketches.md\n */\n\nexport class Timeline {\n    constructor(fps, loop, duration) {\n        this.fps = fps || 30;\n        this.loop = loop || 0; // total loops\n        this.duration = duration || 1; // duration of each loop in seconds\n        this.totalLoopFrames = this.duration ? this.duration * this.fps : 1;\n        this.iterations = 0; // number of times drawn\n        this.time = 0; // elapsed time in seconds\n        this.playhead = 0; // current progress of the loop between 0 and 1\n        this.frame = 1; // frame of the loop\n        this.elapsedLoops = 0;\n        this.startTime = Date.now();\n    }\n\n    get elapsed() {\n        return Date.now() - this.startTime;\n    }\n\n    onFrame() {\n        this.iterations++;\n        // one frame\n        this.frame++;\n        this.playhead = this.frame / this.totalLoopFrames;\n        if (this.iterations % this.fps === 0) {\n            // a second elapsed\n            this.time++;\n            if (this.frame >= this.totalLoopFrames) {\n                // one loop duration passed\n                this.elapsedLoops++;\n                this.playhead = 0;\n                this.frame = 0;\n                if (this.loop && this.elapsedLoops >= this.loop) {\n                    console.log('End of loops');\n                    return -1;\n                }\n            }\n        }\n        return 1;\n    }\n}\n","import { background, drawLineAngle, setStokeColor } from '../lib/canvas';\nimport { nicePalette } from '../lib/palettes';\nimport { create3dNoiseAbs, createGridPointsUV, marginify, oneOf, toSinValue, uvFromAngle } from '../lib/math';\nimport { Timeline } from '../lib/Timeline';\n\nexport const windLines = () => {\n    const config = {\n        width: 600,\n        height: 600,\n        fps: 60,\n    };\n\n    let counter = 0;\n    let grid = createGridPointsUV(15, 15);\n\n    const timeline = new Timeline(config.fps, 0, 5);\n\n    const setup = ({ canvas, context }) => {\n        const colors = nicePalette();\n        grid = grid.map((g) => {\n            g.color = oneOf(colors);\n            return g;\n        });\n        background(canvas, context)('rgba(255,255,255,1');\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        background(canvas, context)('rgba(255,255,255,.1');\n\n        grid.forEach(({ position, rotation, color }) => {\n            const [u, v] = position;\n            const { x, y } = marginify({ margin: 100, u, v, width: canvas.width, height: canvas.height });\n            const t = toSinValue(timeline.playhead) * 0.1;\n            const wave = create3dNoiseAbs(u, v, counter, 3 * t) * 10;\n            const startvect = uvFromAngle((rotation + wave) * -1).setMag(25);\n            setStokeColor(context)(color);\n            drawLineAngle(context)(x + startvect.x, y + startvect.y, rotation + wave, 25, 4, 'round');\n        });\n\n        counter += 0.01;\n        return timeline.onFrame();\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport { pointDistance, normalizeInverse, randomNumberBetween, lerp, pointAngleFromVelocity, clamp } from './math';\nimport { Vector } from './Vector';\n\nconst MAX_COORD_HISTORY = 30;\n\nconst limitArrayLen = (arr) => {\n    const arrLength = arr.length;\n    if (arrLength > MAX_COORD_HISTORY) {\n        arr.splice(0, arrLength - MAX_COORD_HISTORY);\n    }\n    return arr;\n};\n\nexport class Particle {\n    #x;\n\n    #y;\n\n    #color;\n\n    constructor(values) {\n        this.initValues(values);\n    }\n\n    initValues({\n        index,\n        x,\n        y,\n        velocityX,\n        velocityY,\n        accelerationX,\n        accelerationY,\n        radius,\n        mass,\n        color,\n        alpha,\n        rotation,\n        lifetime,\n        drawFn,\n        updateFn,\n        colorFn,\n        ...rest\n    }) {\n        this.props = rest;\n        this.index = index || 0;\n        this.#x = x || 0;\n        this.#y = y || 0;\n        this.xHistory = [x];\n        this.yHistory = [y];\n        this.oX = x || this.oX;\n        this.oY = y || this.oY;\n        this.velocityX = velocityX || 0;\n        this.velocityY = velocityY || 0;\n        this.accelerationX = accelerationX || 0;\n        this.accelerationY = accelerationY || 0;\n        // this.oVelocityX = velocityX || 0;\n        // this.oVelocityY = velocityY || 0;\n        this.mass = mass || 1;\n        this.radius = radius || 1;\n        this.#color = color ? tinycolor(color) : tinycolor({ r: 255, g: 255, b: 255 });\n        this.rotation = rotation || 0;\n        this.lifetime = lifetime || 1;\n        this.drawFn = drawFn;\n        this.updateFn = updateFn;\n        // must always return a string\n        this.colorFn = colorFn;\n    }\n\n    get color() {\n        if (this.colorFn) {\n            return tinycolor(this.colorFn(this));\n        }\n        return this.#color;\n    }\n\n    set color(value) {\n        this.#color = tinycolor(value);\n    }\n\n    get colorStr() {\n        if (this.colorFn) {\n            const res = this.colorFn(this);\n            if (typeof res !== 'string') {\n                console.warn('Particle color fn must return a string!');\n                return '#ff0000';\n            }\n            return res;\n        }\n        return this.#color.toRgbString();\n    }\n\n    get x() {\n        return this.#x;\n    }\n\n    set x(value) {\n        this.#x = value;\n        this.xHistory.unshift(value);\n        if (this.xHistory.length > MAX_COORD_HISTORY) {\n            this.xHistory = this.xHistory.slice(0, MAX_COORD_HISTORY);\n        }\n    }\n\n    get y() {\n        return this.#y;\n    }\n\n    set y(value) {\n        this.#y = value;\n        this.yHistory.unshift(value);\n        if (this.yHistory.length > MAX_COORD_HISTORY) {\n            this.yHistory = this.yHistory.slice(0, MAX_COORD_HISTORY);\n        }\n    }\n\n    get vVector() {\n        return new Vector(this.velocityX, this.velocityY, 0);\n    }\n\n    set vVector({ x, y }) {\n        this.velocityX = x;\n        this.velocityY = y;\n    }\n\n    get aVector() {\n        return new Vector(this.accelerationX, this.accelerationY, 0);\n    }\n\n    set aVector({ x, y }) {\n        this.accelerationX = x;\n        this.accelerationY = y;\n    }\n\n    // Rotation angle to point in direction of velocity\n    get heading() {\n        return pointAngleFromVelocity(this);\n    }\n\n    draw() {\n        this.drawFn(this);\n    }\n\n    update() {\n        this.updateFn(this);\n        this.draw(this);\n    }\n}\n\nexport const pixel = (x, y, color, radius) => new Particle({ x, y, color, radius });\n\nexport const psCanvasRandom = (canvas) => ({\n    x: randomNumberBetween(0, canvas.width),\n    y: randomNumberBetween(0, canvas.height),\n});\n\nexport const createRandomParticleValues = (canvas) => {\n    const vel = 2;\n    const radius = randomNumberBetween(5, 10);\n    const coords = psCanvasRandom(canvas);\n    return {\n        radius,\n        x: coords.x,\n        y: coords.y,\n        mass: randomNumberBetween(1, 10),\n        velocityX: randomNumberBetween(-vel, vel),\n        velocityY: randomNumberBetween(-vel, vel),\n        accelerationX: 0,\n        accelerationY: 0,\n        rotation: randomNumberBetween(-180, 180),\n        // color: { r: randomNumberBetween(100, 255), g: randomNumberBetween(100, 255), b: randomNumberBetween(100, 255) },\n        color: {\n            r: lerp(0, 255, coords.x / canvas.width),\n            g: randomNumberBetween(100, 255),\n            b: lerp(0, 255, coords.y / canvas.height),\n        },\n    };\n};\n\nexport const updatePosWithVelocity = (particle) => {\n    particle.x += particle.vVector.x;\n    particle.y += particle.vVector.y;\n};\n\n// https://www.youtube.com/watch?v=L7CECWLdTmo\nexport const applyForce = (fVect, particle) => {\n    const fV = fVect.div(particle.mass);\n    const aV = particle.aVector.add(fV);\n    const pV = particle.vVector.add(aV);\n    particle.aVector = aV;\n    particle.vVector = pV;\n};\n\n// https://www.youtube.com/watch?v=WBdhAuWS6X8\nexport const friction = (particle, mu = 0.1) => {\n    const normal = particle.mass;\n    const vfriction = particle.vVector\n        .normalize()\n        .mult(-1)\n        .setMag(mu * normal);\n    applyForce(vfriction, particle);\n};\n\n// https://www.youtube.com/watch?v=DxFDgOYEoy8\nexport const drag = (particle, coefficent = 0.1) => {\n    const area = 1; // particle.radius;\n    const velUnit = particle.vVector.normalize().mult(-1);\n    const speed = particle.vVector.magSq() * area * coefficent;\n    const vdrag = velUnit.setMag(speed);\n    applyForce(vdrag, particle);\n};\n\n// https://www.youtube.com/watch?v=EpgB3cNhKPM\n// mode 1 is attract, -1 is repel\n// const attractor = { x: canvas.width / 2, y: canvas.height / 2, mass: 50, g: 1 };\nexport const attract = ({ x, y, mass, g }, particle, mode = 1, affectDist = 1000) => {\n    if (pointDistance({ x, y }, { x: particle.x, y: particle.y }) < affectDist) {\n        g = g || 1;\n        const dir = new Vector(x, y).sub(new Vector(particle.x, particle.y));\n        const distanceSq = clamp(50, 5000, dir.magSq());\n        const strength = (mode * (g * (mass * particle.mass))) / distanceSq;\n        const force = dir.setMag(strength);\n        applyForce(force, particle);\n    }\n};\n\nexport const edgeBounce = ({ width, height }, particle) => {\n    // if (particle.x + particle.radius > width || particle.x - particle.radius < 0) {\n    //     particle.velocityX *= -1;\n    // }\n    // if (particle.y + particle.radius > height || particle.y - particle.radius < 0) {\n    //     particle.velocityY *= -1;\n    // }\n    if (particle.x + particle.radius > width) {\n        particle.velocityX *= -1;\n        particle.x = width - particle.radius;\n    }\n    if (particle.x - particle.radius < 0) {\n        particle.velocityX *= -1;\n        particle.x = particle.radius;\n    }\n    if (particle.y + particle.radius > height) {\n        particle.velocityY *= -1;\n        particle.y = height - particle.radius;\n    }\n    if (particle.y - particle.radius < 0) {\n        particle.velocityY *= -1;\n        particle.y = particle.radius;\n    }\n};\n\nexport const edgeWrap = ({ width, height }, particle) => {\n    if (particle.x + particle.radius > width) {\n        particle.x = 0 + particle.radius;\n    } else if (particle.x - particle.radius < 0) {\n        particle.x = width - particle.radius;\n    }\n    if (particle.y + particle.radius > height) {\n        particle.y = 0 + particle.radius;\n    } else if (particle.y - particle.radius < 0) {\n        particle.y = height - particle.radius;\n    }\n};\n\nexport const gravityPoint = (mult = 0.2, f = 1) => (x, y, radius, particle) => {\n    const distance = pointDistance({ x, y }, particle);\n    if (distance < radius) {\n        const dx = x - particle.x;\n        const dy = y - particle.y;\n        const forceDirectionX = dx / distance;\n        const forceDirectionY = dy / distance;\n        const force = normalizeInverse(0, radius, distance) * f * mult;\n        const tempX = forceDirectionX * force * particle.radius * 2;\n        const tempY = forceDirectionY * force * particle.radius * 2;\n        particle.x += tempX;\n        particle.y += tempY;\n    }\n};\n\n// for moving points, push away/around from point\nexport const avoidPoint = (point, particle, f = 1) => {\n    gravityPoint(1, (f *= -1))(point.x, point.y, point.radius, particle);\n};\n\n// for moving points, pull towards point\nexport const attractPoint = (point, particle, f = 1) => {\n    gravityPoint(1, f)(point.x, point.y, point.radius, particle);\n};\n\n// for moving static, push away/outward from point\nexport const pointPush = (point, particle, f = 1) => {\n    const dx = point.x - particle.x;\n    const dy = point.y - particle.y;\n    const distance = pointDistance(point, particle);\n    const forceDirectionX = dx / distance;\n    const forceDirectionY = dy / distance;\n    const force = normalizeInverse(0, point.radius, distance) * f;\n    particle.velocityX = forceDirectionX * force * particle.mass * 0.8;\n    particle.velocityY = forceDirectionY * force * particle.mass * 0.8;\n\n    if (distance < point.radius) {\n        particle.x -= particle.velocityX;\n        particle.y -= particle.velocityY;\n    } else {\n        // TODO if < 1 then snap to 0\n        if (particle.x !== particle.oX) {\n            particle.x -= (particle.x - particle.oX) * 0.1;\n        }\n        if (particle.y !== particle.oY) {\n            particle.y -= (particle.y - particle.oY) * 0.1;\n        }\n    }\n};\n","import sourcePng from '../../hi1.png';\nimport {\n    clearCanvas,\n    drawSquareFilled,\n    background,\n    getImageDataFromImage,\n    getImageDataColor,\n    connectParticles,\n    drawParticlePoint,\n} from '../lib/canvas';\nimport { createRandomParticleValues, edgeWrap, Particle, drag, updatePosWithVelocity } from '../lib/Particle';\nimport { createGridPointsXY, createRandomNumberArray, mapRange, randomNumberBetween } from '../lib/math';\n\nexport const hiImage01 = (_) => {\n    const config = {\n        width: 600,\n        height: 600,\n    };\n\n    let imageZoomFactor;\n    const png = new Image();\n    png.src = sourcePng;\n    let imageData;\n\n    const numParticles = 500;\n    const particlesArray = [];\n    const particleColor = { r: 252, g: 3, b: 152 };\n\n    // let imageColorData;\n\n    // const createColorArrayFromImageData = (imageData) => {\n    //     const data = [];\n    //     for (let y = 0, { height } = imageData; y < height; y++) {\n    //         for (let x = 0, { width } = imageData; x < width; x++) {\n    //             data.push({ x, y, ...getImageColor(imageData, x, y) });\n    //         }\n    //     }\n    //     return data;\n    // };\n\n    const setup = ({ canvas, context }) => {\n        imageData = getImageDataFromImage(context)(png);\n        clearCanvas(canvas, context)();\n        imageZoomFactor = canvas.width / imageData.width;\n\n        // imageColorData = createColorArrayFromImageData(imageData);\n\n        // const gridPoints = createGridPoints(\n        //     canvas.width,\n        //     canvas.height,\n        //     100,\n        //     100,\n        //     canvas.width / 50,\n        //     canvas.height / 50\n        // );\n        // numParticles = gridPoints.length;\n        // for (let i = 0; i < numParticles; i++) {\n        //     const props = createRandomParticleValues(canvas);\n        //     props.x = gridPoints[i][0];\n        //     props.y = gridPoints[i][1];\n        //     props.radius = randomNumberBetween(1, 5);\n        //     props.color = particleColor;\n        //     particlesArray.push(new Particle(props));\n        // }\n\n        for (let i = 0; i < numParticles; i++) {\n            const props = createRandomParticleValues(canvas);\n            props.radius = randomNumberBetween(1, 5);\n            props.color = particleColor;\n            if (i % 2) {\n                props.x = 0;\n            } else {\n                props.x = canvas.width;\n            }\n            particlesArray.push(new Particle(props));\n        }\n\n        background(canvas, context)({ r: 255, g: 255, b: 0 });\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        background(canvas, context)({ r: 255, g: 255, b: 0, a: 0.004 });\n\n        for (let i = 0; i < numParticles; i++) {\n            updatePosWithVelocity(particlesArray[i]);\n            edgeWrap(canvas, particlesArray[i]);\n\n            const pxColor = getImageDataColor(\n                imageData,\n                Math.round(particlesArray[i].x / imageZoomFactor),\n                Math.round(particlesArray[i].y / imageZoomFactor)\n            );\n\n            if (pxColor.r > 250) {\n                drag(particlesArray[i], 0.001);\n                particlesArray[i].color = { r: 3, g: 227, b: 252 };\n            } else {\n                particlesArray[i].color = particleColor;\n            }\n\n            drawParticlePoint(context)(particlesArray[i]);\n        }\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import {\n    attractPoint,\n    avoidPoint,\n    edgeBounce,\n    Particle,\n    updatePosWithVelocity,\n    createRandomParticleValues,\n} from '../lib/Particle';\nimport { clearCanvas, connectParticles, drawMouse, drawParticlePoint, drawPointTrail, fillCanvas } from '../lib/canvas';\n\n// Based on https://www.youtube.com/watch?v=d620nV6bp0A\nexport const variation1 = () => {\n    const numParticles = 100;\n    const particlesArray = [];\n\n    let canvasCenterX;\n    let canvasCenterY;\n    let centerRadius;\n\n    const setup = ({ canvas, context }) => {\n        canvasCenterX = canvas.width / 2;\n        canvasCenterY = canvas.height / 2;\n        centerRadius = canvas.height / 4;\n\n        for (let i = 0; i < numParticles; i++) {\n            const props = createRandomParticleValues(canvas);\n            props.radius = 5;\n            particlesArray.push(new Particle(props));\n        }\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        fillCanvas(canvas, context)();\n\n        for (let i = 0; i < numParticles; i++) {\n            updatePosWithVelocity(particlesArray[i]);\n            edgeBounce(canvas, particlesArray[i]);\n            avoidPoint({ radius: centerRadius, x: canvasCenterX, y: canvasCenterY }, particlesArray[i], 4);\n            attractPoint(mouse, particlesArray[i], mouse.isDown ? -1 : 1);\n            drawParticlePoint(context)(particlesArray[i]);\n            drawPointTrail(context)(particlesArray[i]);\n        }\n        connectParticles(context)(particlesArray, 200);\n        drawMouse(context)(mouse);\n    };\n\n    return {\n        setup,\n        draw,\n    };\n};\n","import { avoidPoint, Particle, createRandomParticleValues } from '../lib/Particle';\nimport { clearCanvas, connectParticles, drawMouse, drawParticlePoint } from '../lib/canvas';\nimport { randomNumberBetween } from '../lib/math';\n\n// Based on https://www.youtube.com/watch?v=j_BgnpMPxzM\nexport const variation2 = () => {\n    const config = {\n        friction: 0.8,\n        gravity: 1,\n        decay: 0.05,\n        tweenDamp: 0.1,\n        margin: 50,\n        intensity: 0,\n        numParticles: 200,\n    };\n\n    const particlesArray = [];\n\n    const setup = ({ canvas, context }) => {\n        for (let i = 0; i < config.numParticles; i++) {\n            particlesArray.push(new Particle(createRandomParticleValues(canvas)));\n        }\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        clearCanvas(canvas, context)();\n\n        for (let i = 0; i < config.numParticles; i++) {\n            particlesArray[i].radius -= config.decay;\n            if (particlesArray[i].radius <= 0) {\n                const newValues = createRandomParticleValues(canvas);\n                const newCoords = mouse;\n                newValues.x = newCoords.x + randomNumberBetween(-10, 10);\n                newValues.y = newCoords.y + randomNumberBetween(-10, 10);\n                particlesArray[i].initValues(newValues);\n            }\n            particlesArray[i].y += particlesArray[i].mass * (mouse.isDown ? 1 : 0.2);\n            particlesArray[i].mass += 0.2 * config.gravity;\n            if (\n                particlesArray[i].y + particlesArray[i].radius > canvas.height ||\n                particlesArray[i].y - particlesArray[i].radius < 0\n            ) {\n                particlesArray[i].mass *= -1;\n            }\n\n            avoidPoint(mouse, particlesArray[i]);\n            // attractPoint(psMouseCoords(), particlesArray[i]);\n            drawParticlePoint(context)(particlesArray[i]);\n            // drawPointTrail(context)(particlesArray[i]);\n        }\n        connectParticles(context)(particlesArray, 100);\n        drawMouse(context)(mouse);\n\n        return 1;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import domokunPng from '../../domokun.png';\nimport {\n    clearCanvas,\n    drawMouse,\n    drawSquareFilled,\n    background,\n    getImageDataFromImage,\n    getImageDataColor,\n} from '../lib/canvas';\nimport { randomNumberBetween, scalePointToCanvas } from '../lib/math';\nimport { Particle, pointPush } from '../lib/Particle';\n\n// Based on https://www.youtube.com/watch?v=afdHgwn1XCY\nexport const domokun = (_) => {\n    const config = {\n        width: 600,\n        height: 600,\n    };\n\n    let numParticles;\n    const imageSize = 100; // square\n    const png = new Image();\n    png.src = domokunPng;\n    const particlesArray = [];\n\n    const setup = ({ canvas, context }) => {\n        const imageData = getImageDataFromImage(context)(png);\n        clearCanvas(canvas, context)();\n\n        const imageZoomFactor = canvas.width / imageSize;\n        const cropColor = 255 / 2;\n\n        for (let y = 0, { height } = imageData; y < height; y++) {\n            for (let x = 0, { width } = imageData; x < width; x++) {\n                const pxColor = getImageDataColor(imageData, x, y);\n                if (pxColor.a > cropColor) {\n                    const points = scalePointToCanvas(\n                        canvas.width,\n                        canvas.height,\n                        imageData.width,\n                        imageData.height,\n                        imageZoomFactor,\n                        x,\n                        y\n                    );\n                    const pX = points.x;\n                    const pY = points.y;\n                    const mass = randomNumberBetween(2, 12);\n                    const color = pxColor;\n                    const radius = imageZoomFactor;\n                    particlesArray.push(new Particle({ x: pX, y: pY, mass, color, radius }));\n                }\n            }\n        }\n\n        numParticles = particlesArray.length;\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        background(canvas, context)('yellow');\n\n        for (let i = 0; i < numParticles; i++) {\n            pointPush(mouse, particlesArray[i], mouse.isDown ? -1 : 1);\n            drawSquareFilled(context)(\n                particlesArray[i].x,\n                particlesArray[i].y,\n                particlesArray[i].radius,\n                particlesArray[i].color\n            );\n        }\n        // drawMouse(context)(mouse);\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import { createRandomParticleValues, Particle, pointPush } from '../lib/Particle';\nimport { connectParticles, drawParticlePoint, fillCanvas } from '../lib/canvas';\n\nexport const variation4 = () => {\n    const config = {\n        numParticles: 0,\n    };\n\n    const particlesArray = [];\n    const circles = [];\n\n    const setup = ({ canvas, context }) => {\n        const centerX = canvas.width / 2;\n        const centerY = canvas.height / 2;\n        const diameter = canvas.height / 4;\n        const steps = 10;\n\n        for (let theta = 0; theta < 360; theta += steps) {\n            const rad = theta * (Math.PI / 180);\n            const x = Math.cos(rad) * diameter + centerX;\n            const y = Math.sin(rad) * diameter + centerY;\n            circles.push([x, y]);\n            const props = createRandomParticleValues(canvas);\n            props.x = x;\n            props.y = y;\n            props.radius = 1;\n            props.color = { r: 0, g: 0, b: 0 };\n            props.index = circles.length - 1;\n            particlesArray.push(new Particle(props));\n        }\n        config.numParticles = particlesArray.length;\n        fillCanvas(canvas, context)(1, '255,255,255');\n    };\n\n    // will run every frame\n    const draw = ({ canvas, context, mouse }) => {\n        fillCanvas(canvas, context)(0.005, '255,255,255');\n        for (let i = 0; i < config.numParticles; i++) {\n            pointPush(mouse, particlesArray[i], mouse.isDown ? -1 : 5);\n            drawParticlePoint(context)(particlesArray[i]);\n            // let index = particlesArray[i].index + 1;\n            // if(index === circles.length) {\n            //     index = 0;\n            // }\n            // particlesArray[i].x = circles[index][0];\n            // particlesArray[i].y = circles[index][1];\n            // particlesArray.index = index;\n        }\n        connectParticles(context)(particlesArray, 200);\n        return 1; // -1 to exit animation loop\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import {\n    attractPoint,\n    avoidPoint,\n    edgeBounce,\n    Particle,\n    updatePosWithVelocity,\n    createRandomParticleValues,\n} from '../lib/Particle';\nimport { clearCanvas, connectParticles, drawMouse, drawParticlePoint, drawPointTrail, fillCanvas } from '../lib/canvas';\nimport { randomNumberBetween } from '../lib/math';\n\nexport const variation5 = () => {\n    const config = {\n        numParticles: 50,\n    };\n\n    const particlesArray = [];\n    const circles = [];\n\n    const setup = ({ canvas, context }) => {\n        for (let i = 0; i < config.numParticles; i++) {\n            const props = createRandomParticleValues(canvas);\n            props.x = canvas.width / 2;\n            props.y = canvas.height / 2;\n            props.color = { r: 0, g: 0, b: 0 };\n            props.radius = 0.5;\n            particlesArray.push(new Particle(props));\n        }\n        const centerX = canvas.width / 2;\n        const centerY = canvas.height / 2;\n        const diameter = canvas.height / 4;\n        const steps = 30;\n        for (let theta = 0; theta < 360; theta += steps) {\n            const rad = theta * (Math.PI / 180);\n            const x = Math.cos(rad) * diameter + centerX;\n            const y = Math.sin(rad) * diameter + centerY;\n            circles.push([x, y, randomNumberBetween(20, 100)]);\n        }\n        fillCanvas(canvas, context)(1, '255,255,255');\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        // fillCanvas(canvas, context)(.005,'255,255,255');\n        for (let i = 0; i < config.numParticles; i++) {\n            updatePosWithVelocity(particlesArray[i]);\n            edgeBounce(canvas, particlesArray[i]);\n            for (let c = 0; c < circles.length; c++) {\n                avoidPoint({ radius: circles[c][2], x: circles[c][0], y: circles[c][1] }, particlesArray[i], 4);\n            }\n            drawParticlePoint(context)(particlesArray[i]);\n        }\n        connectParticles(context)(particlesArray, 50);\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import {\n    avoidPoint,\n    Particle,\n    createRandomParticleValues,\n    updatePosWithVelocity,\n    edgeBounce,\n    gravityPoint,\n} from '../lib/Particle';\nimport { fillCanvas, connectParticles, drawMouse, drawParticlePoint } from '../lib/canvas';\nimport { mapRange, randomNumberBetween } from '../lib/math';\n\n// Based on https://www.youtube.com/watch?v=j_BgnpMPxzM\nexport const variation6 = () => {\n    const numParticles = 200;\n    const particlesArray = [];\n    let hue = 0;\n\n    const setup = ({ canvas, context }) => {\n        for (let i = 0; i < numParticles; i++) {\n            const initValues = createRandomParticleValues(canvas);\n            initValues.color = { r: 255, g: 255, b: 255 };\n            particlesArray.push(new Particle(initValues));\n        }\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        fillCanvas(canvas, context)(0.08);\n        if (hue++ > 361) hue = 0;\n        for (let i = 0; i < numParticles; i++) {\n            particlesArray[i].radius -= 0.05;\n            if (particlesArray[i].radius <= 0) {\n                const initValues = createRandomParticleValues(canvas);\n                initValues.x = mouse.x ? mouse.x : canvas.width / 2;\n                initValues.y = mouse.y ? mouse.y : canvas.height / 2;\n                // let h = lerpRange(0,canvas.width,100,200,initValues.x);\n                const s = mapRange(0, 10, 0, 100, initValues.radius);\n                const l = mapRange(0, 10, 25, 75, initValues.radius);\n                initValues.color = `hsl(${hue},${s}%,${l}%)`;\n                particlesArray[i].initValues(initValues);\n            }\n            updatePosWithVelocity(particlesArray[i]);\n            edgeBounce(canvas, particlesArray[i]);\n\n            gravityPoint()(canvas.width / 2, canvas.height, 2000, particlesArray[i]);\n            // gravityPoint({x:canvas.width/2, y:canvas.height}, particlesArray[i])\n            drawParticlePoint(context)(particlesArray[i]);\n        }\n        // connectParticles(context)(particlesArray, 100);\n        return 1;\n    };\n\n    return {\n        setup,\n        draw,\n    };\n};\n","import { edgeBounce, Particle, updatePosWithVelocity, createRandomParticleValues, attract } from '../lib/Particle';\nimport { drawRotatedParticle, background, drawRake } from '../lib/canvas';\n\nexport const rainbowRakeOrbit = () => {\n    const config = {\n        // width: 700,\n        // height: 700,\n        // fps: 30,\n    };\n\n    const numParticles = 50;\n    const particlesArray = [];\n\n    const attractor = { x: canvas.width / 2, y: canvas.height / 2, mass: 100, g: 20 };\n\n    let canvasCenterX;\n    let canvasCenterY;\n    let centerRadius;\n\n    const setup = ({ canvas, context }) => {\n        canvasCenterX = canvas.width / 2;\n        canvasCenterY = canvas.height / 2;\n        centerRadius = canvas.height / 4;\n\n        for (let i = 0; i < numParticles; i++) {\n            const props = createRandomParticleValues(canvas);\n            props.radius = 1; // Math.sqrt(props.mass);\n            particlesArray.push(new Particle(props));\n        }\n    };\n\n    // const targetX = mouse.x ? mouse.x : canvas.width / 2;\n    // const targetY = mouse.y ? mouse.y : canvas.height / 2;\n    // accelerateToPoint(targetX, targetY, particlesArray[i]);\n    // https://www.youtube.com/watch?v=T84AWnntxZA\n    // const accelerateToPoint = (targetX, targetY, particle) => {\n    //     const magnitude = 0.001;\n    //     const vLimit = 5;\n    //     const accX = ((targetX - particle.x) * magnitude) / particle.mass;\n    //     const accY = ((targetY - particle.y) * magnitude) / particle.mass;\n    //     particle.velocityX += accX;\n    //     particle.velocityY += accY;\n    //     particle.velocityX = clamp(-vLimit, vLimit, particle.velocityX);\n    //     particle.velocityY = clamp(-vLimit, vLimit, particle.velocityY);\n    // };\n\n    const draw = ({ canvas, context, mouse }) => {\n        background(canvas, context)({ r: 0, g: 0, b: 50, a: 0.01 });\n\n        let mode = 1;\n\n        attractor.x = mouse.x ? mouse.x : canvasCenterX;\n        attractor.y = mouse.y ? mouse.y : canvasCenterY;\n\n        for (let i = 0; i < numParticles; i++) {\n            if (mouse.isDown) {\n                mode = -1;\n            } else {\n                mode = 1;\n            }\n            attract(attractor, particlesArray[i], mode, 2000);\n            particlesArray[i].vVector = particlesArray[i].vVector.limit(20);\n            updatePosWithVelocity(particlesArray[i]);\n            edgeBounce(canvas, particlesArray[i]);\n            drawRotatedParticle(context, drawRake, particlesArray[i]);\n            particlesArray[i].aVector = { x: 0, y: 0 };\n        }\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import { createRandomNumberArray, pointOnCircle, randomNumberBetween, createGridPointsXY, mapRange } from '../lib/math';\nimport {\n    attractPoint,\n    avoidPoint,\n    edgeBounce,\n    Particle,\n    updatePosWithVelocity,\n    createRandomParticleValues,\n    edgeWrap,\n    attract,\n} from '../lib/Particle';\nimport {\n    background,\n    clearCanvas,\n    connectParticles,\n    drawMouse,\n    drawLine,\n    drawParticlePoint,\n    drawPointTrail,\n    fillCanvas,\n    drawSpikeCircle,\n    drawAttractor,\n} from '../lib/canvas';\n\nexport const threeAttractors = () => {\n    const config = {\n        // width: 500,\n        // height: 500,\n        // fps: 24,\n    };\n\n    let numParticles;\n    const particlesArray = [];\n    let gridPoints = [];\n    const hue = 0;\n\n    let attractorDist;\n\n    let leftattractor;\n    let midattractor;\n    let rightattractor;\n\n    let canvasCenterX;\n    let canvasCenterY;\n    let centerRadius;\n\n    const setup = ({ canvas, context }) => {\n        canvasCenterX = canvas.width / 2;\n        canvasCenterY = canvas.height / 2;\n        centerRadius = canvas.height / 4;\n\n        attractorDist = canvas.width / 0.7;\n\n        leftattractor = { x: 0, y: canvas.height / 2, mass: 10, g: 3 };\n        midattractor = { x: canvas.width / 2, y: canvas.height / 2, mass: 50, g: 10 };\n        rightattractor = { x: canvas.width, y: canvas.height / 2, mass: 10, g: 3 };\n\n        gridPoints = createGridPointsXY(canvas.width, canvas.height, 100, 100, canvas.width / 50, canvas.height / 50)\n            .points;\n        numParticles = gridPoints.length;\n\n        for (let i = 0; i < numParticles; i++) {\n            const props = createRandomParticleValues(canvas);\n            props.x = gridPoints[i][0];\n            props.y = gridPoints[i][1];\n            props.velocityX = 0;\n            props.velocityY = 0;\n            props.mass = 1;\n            props.radius = 1; // randomNumberBetween(10, 30);\n            props.spikes = createRandomNumberArray(20, 0, 360);\n\n            const h = mapRange(0, canvas.width, 0, 90, props.x);\n            const s = 100; // lerpRange(0,10,0,100,prop.radius);\n            const l = 50; // lerpRange(0,10,25,75,prop.radius);\n            props.color = `hsla(${h},${s}%,${l}%,0.1)`;\n\n            // props.color = { r: 0, g: 0, b: 0, a: 0.1 };\n\n            particlesArray.push(new Particle(props));\n        }\n\n        background(canvas, context)('white');\n    };\n\n    const draw = ({ canvas, context, mouse }) => {\n        // background(canvas, context)({ r: 255, g: 255, b: 255, a: 0.001 });\n        for (let i = 0; i < numParticles; i++) {\n            attract(leftattractor, particlesArray[i], -1, attractorDist);\n            attract(midattractor, particlesArray[i], 1, attractorDist);\n            attract(rightattractor, particlesArray[i], -1, attractorDist);\n\n            particlesArray[i].vVector = particlesArray[i].vVector.limit(10);\n\n            updatePosWithVelocity(particlesArray[i]);\n            // edgeBounce(canvas, particlesArray[i]);\n            drawParticlePoint(context)(particlesArray[i]);\n        }\n        connectParticles(context)(particlesArray, 50, false);\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import { create2dNoise, create3dNoise, pointDistance, randomNumberBetween } from './math';\n\nconst TAU = Math.PI * 2;\n\nexport const simplexNoise2d = (x, y, f = 0.0005) => create2dNoise(x, y, 1, f) * TAU;\nexport const simplexNoise3d = (x, y, t, f = 0.002) => create3dNoise(x, y, t, 1, f) * TAU;\n\nexport const diagLines = (x, y) => (x + y) * 0.01 * TAU;\n\n// From https://medium.com/@bit101/flow-fields-part-i-3ebebc688fd8\nexport const sinField = (x, y) => (Math.sin(x * 0.01) + Math.sin(y * 0.01)) * TAU;\n\n// random attractor params\nconst a = randomNumberBetween(-2, 2);\nconst b = randomNumberBetween(-2, 2);\nconst c = randomNumberBetween(-2, 2);\nconst d = randomNumberBetween(-2, 2);\n\n// http://paulbourke.net/fractals/clifford/\nexport const cliffordAttractor = (width, height, x, y) => {\n    const scale = 0.01;\n    x = (x - width / 2) * scale;\n    y = (y - height / 2) * scale;\n    const x1 = Math.sin(a * y) + c * Math.cos(a * x);\n    const y1 = Math.sin(b * x) + d * Math.cos(b * y);\n    return Math.atan2(y1 - y, x1 - x);\n};\n\n// http://paulbourke.net/fractals/peterdejong/\nexport const jongAttractor = (width, height, x, y) => {\n    const scale = 0.01;\n    x = (x - width / 2) * scale;\n    y = (y - height / 2) * scale;\n    const x1 = Math.sin(a * y) - Math.cos(b * x);\n    const y1 = Math.sin(c * x) - Math.cos(d * y);\n    return Math.atan2(y1 - y, x1 - x);\n};\n\n// Misc formula\nconst flowAtPoint = (x, y) => {\n    const scale = 0.01;\n    const fromCenter = pointDistance({ x, y }, { x: canvasMidX, y: canvasMidY });\n    const simplex = simplexNoise2d(x, y, 0.01);\n    // const theta = simplex;\n    const theta = (fromCenter + simplex) / 2; // mostly radial around middle\n    // const r1 = (Math.sin(1.2 * x) + 0.2 * Math.atan(2 * y)) * 8 * Math.PI;\n    // const r2 = (Math.pow(x, 2) + 0.8 * Math.pow(y, 1 / 2)) * 8 * Math.PI * 4;\n    // const theta = ((r1 + r2 + simplex) / 3) * 0.001;\n    // const theta = ((Math.cos(x) + x + Math.sin(y)) * 24) % (Math.PI / 2); // wander dl like like\n    // const theta = Math.atan2(y, x); // cones out from top left\n    // const theta = x + y + Math.cos(x * scale) * Math.sin(x * scale); // bl to tr diag and cross perp lines\n    // const theta = Math.cos(x * scale) * Math.sin(x * scale); // vertical lines\n    // const theta = Math.cos(x) * Math.sin(x) * scale; // horizontal lines\n    // const theta = x * Math.sin(y) * scale; // scribble\n    // const theta = Math.sin(x * scale) + Math.sin(y * scale); // diamonds\n    return theta * TAU;\n};\n","import tinycolor from 'tinycolor2';\nimport {\n    mapRange,\n    create2dNoise,\n    randomWholeBetween,\n    uvFromAngle,\n    oneOf,\n    aFromVector,\n    snapNumber,\n    create3dNoise,\n    quantize,\n    houghQuantize,\n} from '../lib/math';\nimport { edgeWrap, Particle, updatePosWithVelocity, createRandomParticleValues, applyForce } from '../lib/Particle';\nimport {\n    background,\n    drawCircleFilled,\n    drawLineAngle,\n    drawQuadRectFilled,\n    drawRectFilled,\n    drawRoundRectFilled,\n} from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { nicePalette, hslFromRange } from '../lib/palettes';\nimport { Vector } from '../lib/Vector';\nimport {\n    simplexNoise2d,\n    simplexNoise3d,\n    sinField,\n    cliffordAttractor,\n    jongAttractor,\n    diagLines,\n} from '../lib/attractors';\n\nconst tile = (context, x, y, size, color, heading) => {\n    // drawQuadRectFilled(context)(x, y, size, size, color);\n\n    context.save();\n    context.translate(x - size / 2, y - size / 2);\n    context.rotate(heading);\n    drawRoundRectFilled(context)(0, 0, size, size, 3, color);\n    context.restore();\n};\n\nexport const flowFieldTiles = () => {\n    const config = {\n        name: 'flowFieldTiles',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    const palette = nicePalette();\n    let clifford;\n    let jong;\n\n    const tileSize = 15;\n\n    // Simple collision\n    let tileHistory = [];\n    let currentTilePos = [];\n    const checkHistory = (x, y) => {\n        const pos = `${x},${y}`;\n        return tileHistory.includes(pos);\n    };\n\n    const createRandomParticle = (canvas) => {\n        const props = createRandomParticleValues(canvas);\n        props.x = randomWholeBetween(0, canvas.width);\n        props.y = randomWholeBetween(0, canvas.height);\n        props.velocityX = 0;\n        props.velocityY = 0;\n        const color = tinycolor(oneOf(palette));\n        props.color = color;\n        return new Particle(props);\n    };\n\n    const setup = ({ canvas, context }) => {\n        clifford = (x, y) => cliffordAttractor(canvas.width, canvas.height, x, y);\n        jong = (x, y) => jongAttractor(canvas.width, canvas.height, x, y);\n\n        background(canvas, context)('rgba(50,50,50,1)');\n    };\n\n    const renderField = ({ width, height }, context, fn, cell) => {\n        const mid = cell / 2;\n        for (let x = 0; x < width; x += cell) {\n            for (let y = 0; y < height; y += cell) {\n                const theta = fn(x, y);\n                drawLineAngle(context)(x + mid, y + mid, theta, mid);\n            }\n        }\n    };\n\n    const drawTile = (canvas, context, force, particle, color) => {\n        const smallerTile = tileSize * 1.5;\n        const x = snapNumber(smallerTile, particle.x);\n        const y = snapNumber(smallerTile, particle.y);\n\n        color = color || particle.color;\n\n        // Prevent overlap with a previous tile\n        if (!checkHistory(x, y)) {\n            currentTilePos.push(`${x},${y}`);\n            tile(context, x, y, tileSize, color, particle.heading);\n            return true;\n        }\n\n        return false;\n    };\n\n    const drawFibers = ({ canvas, context }) => {\n        const particle = createRandomParticle(canvas);\n        const length = 500;\n        let run = true;\n        for (let i = 0; i < length; i++) {\n            const theta = simplexNoise2d(particle.x, particle.y, 0.00005);\n            const force = uvFromAngle(theta);\n            const color = particle.color.clone();\n            const saturation = mapRange(0, 5, 0, 100, Math.abs(theta));\n            const brightness = mapRange(0, 5, 0, 100, Math.abs(theta));\n            color.saturate(saturation).brighten(brightness);\n\n            if (run) {\n                // Run stops if the fiber collides with a previous one\n                applyForce(force, particle);\n                particle.vVector = particle.vVector.limit(4);\n                updatePosWithVelocity(particle);\n                run = drawTile(canvas, context, force, particle, color);\n            }\n\n            particle.aVector = new Vector(0, 0);\n        }\n        tileHistory = tileHistory.concat(currentTilePos);\n        currentTilePos = [];\n    };\n\n    const draw = ({ canvas, context }) => {\n        // renderField(canvas, context, simplexNoise2d, 20);\n        drawFibers({ canvas, context });\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport { mapRange, randomWholeBetween, uvFromAngle, snapNumber, quantize } from '../lib/math';\nimport { edgeWrap, Particle, updatePosWithVelocity, createRandomParticleValues, applyForce } from '../lib/Particle';\nimport { background, drawCircleFilled } from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { Vector } from '../lib/Vector';\nimport { simplexNoise3d } from '../lib/attractors';\nimport { hslFromRange } from '../lib/palettes';\n\nexport const flowFieldParticles = () => {\n    const config = {\n        name: 'flowFieldParticles',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    const numParticles = 400;\n    const particlesArray = [];\n    const maxSize = 3;\n\n    let time = 0;\n\n    const createRandomParticle = (canvas) => {\n        const props = createRandomParticleValues(canvas);\n        props.x = randomWholeBetween(0, canvas.width);\n        props.y = randomWholeBetween(0, canvas.height);\n        props.velocityX = 0;\n        props.velocityY = 0;\n        return new Particle(props);\n    };\n\n    const setup = ({ canvas, context }) => {\n        for (let i = 0; i < numParticles; i++) {\n            particlesArray.push(createRandomParticle(canvas));\n        }\n\n        background(canvas, context)('rgba(50,50,50,1)');\n    };\n\n    const drawPixel = (canvas, context, force, particle, color, rad = 1) => {\n        applyForce(force, particle);\n        particle.vVector = particle.vVector.limit(1);\n        updatePosWithVelocity(particle);\n        edgeWrap(canvas, particle);\n        const pcolor = color || particle.color;\n        const x = snapNumber(maxSize * 2, particle.x);\n        const y = snapNumber(maxSize * 2, particle.y);\n        drawCircleFilled(context)(x, y, rad, pcolor);\n        return true;\n    };\n\n    const drawParticles = ({ canvas, context }) => {\n        for (let i = 0; i < numParticles; i++) {\n            const particle = particlesArray[i];\n            const sNoise3d = simplexNoise3d(particle.x, particle.y, time, 0.002);\n            const theta = quantize(3, sNoise3d);\n            const force = uvFromAngle(theta);\n            const clr = hslFromRange(5, 270, 360, Math.abs(theta)).setAlpha(0.25);\n            const size = mapRange(0, 5, 1, maxSize, Math.abs(theta));\n\n            drawPixel(canvas, context, force, particle, clr, size);\n\n            particle.aVector = new Vector(0, 0);\n        }\n    };\n\n    const drawFibers = ({ canvas, context }) => {\n        const particle = createRandomParticle(canvas);\n        const length = 200;\n        for (let i = 0; i < length; i++) {\n            const sNoise3d = simplexNoise3d(particle.x, particle.y, time, 0.002);\n            const theta = sNoise3d;\n            const force = uvFromAngle(theta);\n            const clr = 'rgba(0,0,0,.05)';\n\n            drawPixel(canvas, context, force, particle, clr, 1);\n\n            particle.aVector = new Vector(0, 0);\n        }\n    };\n\n    const draw = ({ canvas, context }) => {\n        drawFibers({ canvas, context });\n        drawParticles({ canvas, context });\n        time += 0.01;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport { clearCanvas, getImageDataColor } from './canvas';\n\nexport class Bitmap {\n    constructor(src) {\n        this.scaleX = 1;\n        this.scaleY = 1;\n\n        this.image = new Image();\n        this.image.src = src;\n        this.imageData = undefined;\n    }\n\n    get width() {\n        return this.imageData.width;\n    }\n\n    get height() {\n        return this.imageData.height;\n    }\n\n    get data() {\n        return this.imageData;\n    }\n\n    toCanvasX(x) {\n        return Math.round(x * this.scaleX);\n    }\n\n    toCanvasY(y) {\n        return Math.round(y * this.scaley);\n    }\n\n    init(canvas, context, clear = true) {\n        this.canvas = canvas;\n        this.context = context;\n        this.context.drawImage(this.image, 0, 0);\n        this.imageData = context.getImageData(0, 0, this.image.width, this.image.width);\n        this.scaleX = canvas.width / this.imageData.width;\n        this.scaleY = canvas.height / this.imageData.height;\n        if (clear) clearCanvas(canvas, context);\n    }\n\n    pixelColorRaw(x, y) {\n        if (x < 0) x = 0;\n        if (y < 0) y = 0;\n        if (x >= this.width) x = this.width - 1;\n        if (y >= this.height) y = this.height - 1;\n        return {\n            r: this.imageData.data[y * 4 * this.imageData.width + x * 4],\n            g: this.imageData.data[y * 4 * this.imageData.width + x * 4 + 1],\n            b: this.imageData.data[y * 4 * this.imageData.width + x * 4 + 2],\n            a: this.imageData.data[y * 4 * this.imageData.width + x * 4 + 3],\n        };\n    }\n\n    pixelColor(x, y) {\n        return tinycolor(this.pixelColorRaw(x, y));\n    }\n\n    /*\n    Gray = 0.21R + 0.72G + 0.07B // Luminosity\n    Gray = (R + G + B) Ã· 3 // Average Brightness\n    Gray = 0.299R + 0.587G + 0.114B // rec601 standard\n    Gray = 0.2126R + 0.7152G + 0.0722B // ITU-R BT.709 standard\n    Gray = 0.2627R + 0.6780G + 0.0593B // ITU-R BT.2100 standard\n     */\n    // https://sighack.com/post/averaging-rgb-colors-the-right-way\n    pixelAverageGrey(x, y) {\n        const color = this.pixelColorRaw(x, y);\n        return Math.sqrt((color.r * color.r + color.g * color.g + color.b * color.b) / 3);\n    }\n\n    pixelTheta(x, y) {\n        // return this.pixelColor(x, y).getBrightness() / 256;\n        return this.pixelAverageGrey(x, y) / 256;\n    }\n\n    pixelColorFromCanvas(x, y) {\n        return this.pixelColor(Math.round(x / this.scaleX), Math.round(y / this.scaleY));\n    }\n\n    pixelThetaFromCanvas(x, y) {\n        return this.pixelTheta(Math.round(x / this.scaleX), Math.round(y / this.scaleY));\n    }\n}\n","import tinycolor from 'tinycolor2';\nimport { mapRange, randomWholeBetween, uvFromAngle, snapNumber, quantize, pointDistance } from '../lib/math';\nimport { Particle, updatePosWithVelocity, createRandomParticleValues, applyForce } from '../lib/Particle';\nimport { background, drawCircleFilled, splatter, renderField } from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { Vector } from '../lib/Vector';\nimport { diagLines, simplexNoise2d, simplexNoise3d } from '../lib/attractors';\nimport { hslFromRange, warmWhite } from '../lib/palettes';\nimport { Bitmap } from '../lib/Bitmap';\n// import sourcePng from '../../francesca-zama-woman-400.png';\nimport sourcePng from '../../kristijan-arsov-woman-400.png';\n\n/*\nhttps://marcteyssier.com/projects/flowfield/\nhttps://larrycarlson.com/collections/wavy-art-prints\n */\n\nconst TAU = Math.PI * 2;\n\nexport const flowFieldImage = () => {\n    const config = {\n        name: 'flowFieldImage',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    const maxSize = 5;\n    let time = 0;\n    const backgroundColor = warmWhite;\n    const image = new Bitmap(sourcePng);\n\n    const createRandomParticle = (canvas) => {\n        const props = createRandomParticleValues(canvas);\n        props.x = randomWholeBetween(0, canvas.width);\n        props.y = randomWholeBetween(0, canvas.height);\n        props.velocityX = 0;\n        props.velocityY = 0;\n        return new Particle(props);\n    };\n\n    const imageFlow = (x, y) => image.pixelThetaFromCanvas(x, y) * TAU;\n\n    const setup = ({ canvas, context }) => {\n        image.init(canvas, context);\n        background(canvas, context)(backgroundColor);\n        renderField(canvas, context, imageFlow, 'rgba(0,0,0,.15)', 50, 10);\n    };\n\n    const drawPixel = (canvas, context, particle, color, rad = 1) => {\n        const pcolor = color || particle.color;\n        const { x } = particle;\n        const { y } = particle;\n        drawCircleFilled(context)(x, y, rad, pcolor);\n        return true;\n    };\n\n    const drawParticle = ({ canvas, context }, particle) => {\n        const theta = imageFlow(particle.x, particle.y);\n        const force = uvFromAngle(theta);\n        applyForce(force, particle);\n        particle.vVector = particle.vVector.limit(3);\n        updatePosWithVelocity(particle);\n\n        const fromCenter = pointDistance(particle, { x: canvas.width / 2, y: canvas.height / 2 });\n\n        const imagePixelColor = image.pixelColorFromCanvas(particle.x, particle.y);\n        const imagePixelBrightness = 256 - imagePixelColor.getBrightness();\n        const hslColor = hslFromRange(canvas.width, 90, 270, particle.x).spin(time);\n        const particleColor = tinycolor.mix(hslColor, imagePixelColor, 90);\n        particleColor.desaturate(mapRange(canvas.width / 3, canvas.width / 2, 0, 10, fromCenter));\n\n        const size = mapRange(0, 255, 0, maxSize, imagePixelBrightness);\n        const sizeMult = mapRange(canvas.width / 3, canvas.width / 2, 1, 5, fromCenter);\n\n        drawPixel(canvas, context, particle, particleColor, size * sizeMult);\n\n        if (Math.abs(theta) >= 5.7) {\n            splatter(context)(particle.x, particle.y, particleColor.brighten(10), 1, 3, 100);\n        }\n\n        particle.aVector = new Vector(0, 0);\n    };\n\n    const drawFibers = ({ canvas, context }) => {\n        const particle = createRandomParticle(canvas);\n        const length = randomWholeBetween(50, 1000);\n        for (let i = 0; i < length; i++) {\n            drawParticle({ canvas, context }, particle);\n        }\n    };\n\n    const draw = ({ canvas, context }) => {\n        drawFibers({ canvas, context });\n        time += 0.05;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\n\nimport { background, drawLineAngle } from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { nicePalette, hslFromRange } from '../lib/palettes';\nimport {\n    simplexNoise2d,\n    simplexNoise3d,\n    sinField,\n    cliffordAttractor,\n    jongAttractor,\n    diagLines,\n} from '../lib/attractors';\nimport { mapRange, snapNumber } from '../lib/math';\n\nconst TAU = Math.PI * 2;\n\nconst arc = (context, x, y, size, thick, color, theta) => {\n    const startR = snapNumber(Math.PI / 2, theta);\n    const endR = startR + Math.PI / 2;\n    const clockWise = true;\n\n    context.strokeStyle = tinycolor(color).toRgbString();\n    context.lineCap = 'round';\n    context.lineWidth = thick;\n    context.beginPath();\n    context.arc(x + size, y + size, size, startR, endR, clockWise);\n    context.stroke();\n};\n\nconst circle = (context, x, y, size, color, theta) => {\n    const startR = 0; // snapNumber(Math.PI / 2, theta);\n    const endR = TAU; // startR + Math.PI / 2;\n    const clockWise = true;\n    const rad = mapRange(0, 5, size * 0.2, size * 0.6, Math.abs(theta));\n\n    context.beginPath();\n    context.arc(x + size, y + size, rad, startR, endR, clockWise);\n    context.fillStyle = tinycolor(color).toRgbString();\n    context.fill();\n};\n\nconst line = (context, x, y, size, thick, color, theta) => {\n    const startR = snapNumber(Math.PI / 2, theta) + Math.PI / 2;\n    context.strokeStyle = tinycolor(color).toRgbString();\n    drawLineAngle(context)(x + size, y + size, startR, size * 2, thick, 'round');\n};\n\nexport const flowFieldArcs = () => {\n    const config = {\n        name: 'flowFieldArcs',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    let time = 0;\n    const palette = nicePalette();\n    const colorBackground = tinycolor('rgba(50,50,50,1)');\n\n    const setup = ({ canvas, context }) => {\n        background(canvas, context)(colorBackground);\n    };\n\n    const renderField = ({ width, height }, context, fn, cell) => {\n        const mid = cell / 2;\n        for (let x = 0; x < width; x += cell) {\n            for (let y = 0; y < height; y += cell) {\n                const theta = fn(x, y);\n                const arcColor = hslFromRange(5, 270, 360, Math.abs(theta));\n                const lineColor = hslFromRange(5, 180, 270, Math.abs(theta)).darken(10);\n                line(context, x, y, mid, mid * 0.5, lineColor, theta);\n                circle(context, x, y, mid, lineColor, theta);\n                arc(context, x, y, mid, mid * 0.5, arcColor, theta);\n                arc(context, x, y, mid, mid * 0.1, 'yellow', theta);\n            }\n        }\n    };\n\n    const draw = ({ canvas, context }) => {\n        background(canvas, context)(colorBackground.setAlpha(0.1));\n\n        // const clifford = (x, y) => cliffordAttractor(canvas.width, canvas.height, x, y);\n        // const jong = (x, y) => jongAttractor(canvas.width, canvas.height, x, y);\n        const noise = (x, y) => simplexNoise3d(x, y, time, 0.001);\n\n        renderField(canvas, context, noise, Math.round(canvas.width / 20));\n        time += 0.25;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport { randomWholeBetween, degreesToRadians, randomPointAround } from '../lib/math';\nimport { background, drawCircleFilled } from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { brightest, darkest, hslFromRange, nicePalette } from '../lib/palettes';\nimport { simplexNoise2d, simplexNoise3d } from '../lib/attractors';\n\n/*\nStarted here but took a detour\nhttps://www.reddit.com/r/creativecoding/comments/lx9prx/audiovisual_sound_of_space_solar_system_david/\n */\n\nconst TAU = Math.PI * 2;\n\nexport const radialNoise = () => {\n    const config = {\n        name: 'radialNoise',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    let canvasMidX;\n    let canvasMidY;\n    let maxRadius;\n    let radiusScale;\n    let currentRadiusSize = 360;\n\n    let originX;\n    let originY;\n    let time = 0;\n    let angle = 0;\n\n    const history = {};\n\n    const palette = nicePalette();\n    const backgroundColor = brightest(palette).clone().lighten(10);\n    const imageColor = darkest(palette).clone();\n\n    // let imageZoomFactor;\n    // const png = new Image();\n    // png.src = sourcePng;\n    // let imageData;\n\n    const setup = ({ canvas, context }) => {\n        canvasMidX = canvas.width / 2;\n        canvasMidY = canvas.height / 2;\n        maxRadius = canvas.width * 0.4;\n        radiusScale = currentRadiusSize / maxRadius;\n\n        originX = canvasMidX;\n        originY = canvasMidY;\n\n        // imageData = getImageDataFromImage(context)(png);\n        // clearCanvas(canvas, context)();\n        // imageZoomFactor = 360 / imageData.width;\n\n        background(canvas, context)(backgroundColor);\n    };\n\n    const drawPixel = (context, x, y, color, size = 1, heading = 0) => {\n        drawCircleFilled(context)(x, y, size, color);\n    };\n\n    const drawLine = (context, x1, y1, x2, y2, color, strokeWidth = 1) => {\n        context.strokeStyle = tinycolor(color).toRgbString();\n        context.lineWidth = strokeWidth;\n        context.beginPath();\n        context.moveTo(x1, y1);\n        context.lineTo(x2, y2);\n        context.stroke();\n    };\n\n    const circleX = (r, a, v = 1) => r * Math.cos(a * v);\n    const circleY = (r, a, v = 1) => r * Math.sin(a * v);\n\n    const draw = ({ canvas, context }) => {\n        for (let radius = 0; radius < currentRadiusSize; radius++) {\n            let ox;\n            let oy;\n\n            if (history.hasOwnProperty(radius)) {\n                ox = history[radius].x;\n                oy = history[radius].y;\n            }\n\n            const radScaled = radius / radiusScale;\n            const a = 1;\n            const b = 1;\n            const radians = degreesToRadians(angle) - Math.PI / 8;\n            let x = originX + circleX(radScaled, radians, a);\n            let y = originY + circleY(radScaled, radians, b);\n\n            const noise = simplexNoise3d(x, y, time, 0.02);\n            x += noise;\n            y += noise;\n\n            const monoColor = imageColor.clone().spin(time * 0.1);\n\n            if (ox !== undefined && oy !== undefined) {\n                drawLine(context, ox, oy, x, y, monoColor, 0.5);\n            }\n\n            history[radius] = { x, y };\n\n            time += 0.01;\n        }\n\n        angle += 3;\n\n        if (angle > 360) {\n            angle = 0;\n\n            currentRadiusSize = randomWholeBetween(100, 360);\n            radiusScale = 1; // currentRadiusSize / maxRadius;\n\n            const offs = randomPointAround((canvas.width - maxRadius) * 0.75);\n            originX = canvasMidX + offs.x;\n            originY = canvasMidY + offs.y;\n            background(canvas, context)(backgroundColor.setAlpha(0.25));\n        }\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport { randomWholeBetween, degreesToRadians, randomPointAround, quantize } from '../lib/math';\nimport { background, drawCircleFilled, getImageDataFromImage, getImageDataColor, clearCanvas } from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { brightest, darkest, hslFromRange, nicePalette } from '../lib/palettes';\nimport { simplexNoise2d, simplexNoise3d } from '../lib/attractors';\nimport sourcePng from '../../gaetano-cessati-waves-400.png';\n\n/*\nStarted here but took a detour\nhttps://www.reddit.com/r/creativecoding/comments/lx9prx/audiovisual_sound_of_space_solar_system_david/\n */\n\nconst TAU = Math.PI * 2;\n\nexport const radialImage = () => {\n    const config = {\n        name: 'radialImage',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    let canvasMidX;\n    let canvasMidY;\n    let maxRadius;\n    let radiusScale;\n    let currentRadiusSize = 360;\n\n    let originX;\n    let originY;\n    let time = 0;\n    let angle = 0;\n\n    let history = {};\n\n    const palette = nicePalette();\n    const imageColor = darkest(palette).clone();\n    const backgroundColor = tinycolor('#f4f6ed'); // brightest(palette).clone().lighten(10);\n\n    let imageZoomFactor;\n    const png = new Image();\n    png.src = sourcePng;\n    let imageData;\n\n    const setup = ({ canvas, context }) => {\n        canvasMidX = canvas.width / 2;\n        canvasMidY = canvas.height / 2;\n        maxRadius = canvas.width * 0.4;\n        radiusScale = currentRadiusSize / maxRadius;\n\n        originX = canvasMidX;\n        originY = canvasMidY;\n\n        imageData = getImageDataFromImage(context)(png);\n        clearCanvas(canvas, context)();\n        imageZoomFactor = currentRadiusSize / imageData.width;\n\n        background(canvas, context)(backgroundColor);\n    };\n\n    const getImagePixelTheta = (x, y) => {\n        const imagePixelColor = tinycolor(getImageDataColor(imageData, x, y)).getBrightness();\n        return (imagePixelColor / 256) * TAU;\n    };\n\n    const getImagePixelColor = (x, y) => {\n        const imagePixel = getImageDataColor(\n            imageData,\n            Math.round(x / imageZoomFactor),\n            Math.round(y / imageZoomFactor)\n        );\n        return tinycolor(imagePixel);\n    };\n\n    const drawPixel = (context, x, y, color, size = 1, heading = 0) => {\n        drawCircleFilled(context)(x, y, size, color);\n    };\n\n    const drawLine = (context, x1, y1, x2, y2, color, strokeWidth = 1) => {\n        context.strokeStyle = tinycolor(color).toRgbString();\n        context.lineWidth = strokeWidth;\n        context.beginPath();\n        context.moveTo(x1, y1);\n        context.lineTo(x2, y2);\n        context.stroke();\n    };\n\n    const circleX = (r, a, v = 1) => r * Math.cos(a * v);\n    const circleY = (r, a, v = 1) => r * Math.sin(a * v);\n\n    const draw = ({ canvas, context }) => {\n        for (let radius = 0; radius < currentRadiusSize; radius++) {\n            let ox;\n            let oy;\n\n            if (history.hasOwnProperty(radius)) {\n                ox = history[radius].x;\n                oy = history[radius].y;\n            }\n\n            const radScaled = radius / radiusScale;\n            const a = 1;\n            const b = 1;\n            const radians = degreesToRadians(angle) - Math.PI / 8;\n            const x = originX + circleX(radScaled, radians, a);\n            const y = originY + circleY(radScaled, radians, b);\n\n            const noise = simplexNoise3d(x, y, time, 0.01);\n            // noise = quantize(36, noise);\n            x += noise;\n            y += noise;\n\n            const monoColor = imageColor.clone().spin(time * 0.1);\n            const pixelColor = getImagePixelColor(angle, radius).spin(time * 0.01);\n\n            // drawPixel(context, x, y, pixelColor, 1);\n\n            if (ox !== undefined && oy !== undefined) {\n                drawLine(context, ox, oy, x, y, pixelColor, 0.5);\n            }\n\n            history[radius] = { x, y };\n\n            // originY += Math.sin(noise) * 0.01;\n\n            time += 0.01;\n        }\n\n        angle += 0.5;\n\n        if (angle > 365) {\n            angle = 0;\n            history = {};\n\n            currentRadiusSize = randomWholeBetween(100, 360);\n            radiusScale = 1; // currentRadiusSize / maxRadius;\n            imageZoomFactor = currentRadiusSize / imageData.width;\n\n            const offs = randomPointAround((canvas.width - maxRadius) * 0.75);\n            originX = canvasMidX + offs.x;\n            originY = canvasMidY + offs.y;\n        }\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport random from 'canvas-sketch-util/random';\nimport { randomWholeBetween, uvFromAngle, oneOf, randomPointAround, randomBoolean } from '../lib/math';\nimport { Particle, updatePosWithVelocity, applyForce } from '../lib/Particle';\nimport { background, renderField } from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { palettes } from '../lib/palettes';\nimport { Vector } from '../lib/Vector';\nimport { simplexNoise2d, simplexNoise3d, cliffordAttractor, jongAttractor } from '../lib/attractors';\n\n/*\nBased on\nhttps://tylerxhobbs.com/essays/2020/flow-fields\n */\n\nconst drawRibbonPoint = (context, point, i, thickness = 0, height = 0) => {\n    const x = point[0];\n    const y = point[1];\n    const jitterX = 0; // Math.cos(i * 0.05) * height;\n    const jitterY = 0; // Math.sin(i * 0.05) * height;\n    context.lineTo(x + thickness + jitterX, y + thickness + jitterY);\n};\n\nconst drawRibbon = (context) => (sideA, sideB, color, stroke = false, thickness = 1) => {\n    const startx = sideA[0][0];\n    const starty = sideA[0][1];\n    const endx = sideB[0][0] + thickness;\n    const endy = sideB[0][1] + thickness;\n\n    const rColor = tinycolor(color).clone();\n    const gradient = context.createLinearGradient(0, starty - thickness, 0, endy + thickness);\n    gradient.addColorStop(0, rColor.toRgbString());\n    gradient.addColorStop(1, rColor.clone().darken(20).toRgbString());\n\n    context.beginPath();\n    context.moveTo(startx, starty);\n    sideA.forEach((w, i) => {\n        drawRibbonPoint(context, w, i, 0, thickness * 0.1);\n    });\n    sideB.forEach((w, i) => {\n        drawRibbonPoint(context, w, i, thickness, thickness * 0.1);\n    });\n    context.lineTo(startx, starty);\n\n    if (stroke) {\n        context.strokeStyle = rColor.darken(70).toRgbString();\n        context.lineWidth = 0.75;\n        context.stroke();\n    }\n\n    context.fillStyle = gradient;\n    context.fill();\n};\n\nexport const flowFieldRibbons = () => {\n    const config = {\n        name: 'flowFieldRibbons',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    let canvasMidX;\n    let canvasMidY;\n    const palette = palettes.pop;\n    const backgroundColor = tinycolor('white');\n\n    let time = 0;\n\n    const createRibbon = (fieldFn, startX, startY, length, vlimit = 1) => {\n        const props = {\n            x: startX,\n            y: startY,\n            velocityX: 0,\n            velocityY: 0,\n            mass: 1,\n        };\n        const particle = new Particle(props);\n        const coords = [];\n        for (let i = 0; i < length; i++) {\n            const theta = fieldFn(particle.x, particle.y);\n            // theta = quantize(4, theta);\n            const force = uvFromAngle(theta);\n            applyForce(force, particle);\n            particle.vVector = particle.vVector.limit(vlimit);\n            updatePosWithVelocity(particle);\n            coords.push([particle.x, particle.y]);\n            particle.aVector = new Vector(0, 0);\n        }\n        return coords;\n    };\n\n    const simplex2d = (x, y) => simplexNoise2d(x, y, 0.0005);\n    const simplex3d = (x, y) => simplexNoise3d(x, y, time, 0.0005);\n    const clifford = (x, y) => cliffordAttractor(canvas.width, canvas.height, x, y);\n    const jong = (x, y) => jongAttractor(canvas.width, canvas.height, x, y);\n    const noise = randomBoolean() ? clifford : jong;\n\n    let maxRadius;\n\n    const setup = ({ canvas, context }) => {\n        canvasMidX = canvas.width / 2;\n        canvasMidY = canvas.height / 2;\n        maxRadius = canvas.width * 0.4;\n\n        background(canvas, context)(backgroundColor);\n\n        renderField(canvas, context, noise, 'rgba(0,0,0,.15)', canvas.width / 10, 5);\n    };\n\n    const ribbonLen = randomWholeBetween(50, 1000);\n    const ribbonThickness = randomWholeBetween(3, 30);\n\n    const draw = ({ canvas, context }) => {\n        const color = oneOf(palette);\n        const len = maxRadius * 2; // ribbonLen;\n\n        const rpoint = random.onCircle(maxRadius); // randomPointAround(maxRadius * 0.4);\n\n        const x = rpoint[0] + canvasMidX;\n        const y = rpoint[1] + canvasMidY;\n        const x2 = x + 2;\n        const y2 = y;\n\n        const sideA = createRibbon(noise, x, y, len, 1);\n        const sideB = createRibbon(noise, x2, y2, len, 1).reverse();\n\n        drawRibbon(context)(sideA, sideB, color, false, ribbonThickness);\n\n        time += 0.01;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","import tinycolor from 'tinycolor2';\nimport random from 'canvas-sketch-util/random';\nimport { randomWholeBetween, uvFromAngle, oneOf, randomPointAround, randomBoolean } from '../lib/math';\nimport { Particle, updatePosWithVelocity, applyForce } from '../lib/Particle';\nimport { background, renderField } from '../lib/canvas';\nimport { ratio, scale } from '../lib/sketch';\nimport { palettes } from '../lib/palettes';\nimport { Vector } from '../lib/Vector';\nimport { simplexNoise2d, simplexNoise3d, cliffordAttractor, jongAttractor } from '../lib/attractors';\n\n/*\nBased on\nhttps://tylerxhobbs.com/essays/2020/flow-fields\n */\n\nconst drawRibbonPoint = (context, point, i, thickness = 0, height = 0) => {\n    const x = point[0];\n    const y = point[1];\n    const jitterX = 0; // Math.cos(i * 0.05) * height;\n    const jitterY = 0; // Math.sin(i * 0.05) * height;\n    context.lineTo(x + thickness + jitterX, y + thickness + jitterY);\n};\n\nconst drawRibbonSegment = (context, sideA, sideB, color, stroke = false, thickness = 1) => {\n    const segStartX = sideA[0][0];\n    const segStartY = sideA[0][1];\n    const segEndX = sideB[0][0] + thickness;\n    const segEndY = sideB[0][1] + thickness;\n\n    const rColor = tinycolor(color).clone();\n    const gradient = context.createLinearGradient(0, segStartY - thickness, 0, segEndY + thickness);\n    gradient.addColorStop(0, rColor.toRgbString());\n    gradient.addColorStop(0.5, rColor.toRgbString());\n    gradient.addColorStop(1, rColor.clone().darken(20).saturate(50).toRgbString());\n\n    context.beginPath();\n    context.moveTo(segStartX, segStartY);\n    sideA.forEach((w, i) => {\n        drawRibbonPoint(context, w, i, 0, thickness * 0.1);\n    });\n    sideB.forEach((w, i) => {\n        drawRibbonPoint(context, w, i, thickness, thickness * 0.1);\n    });\n    context.lineTo(segStartX, segStartY);\n\n    if (stroke) {\n        context.strokeStyle = rColor.darken(70).toRgbString();\n        context.lineWidth = 0.75;\n        context.stroke();\n    }\n\n    context.fillStyle = gradient;\n    context.fill();\n};\n\nconst drawRibbon = (context) => (sideA, sideB, color, stroke = false, thickness = 1) => {\n    const segmentGap = 1; // randomWholeBetween(1, 4);\n    const segments = randomWholeBetween(1, 3);\n    // const segmentsStep = Math.ceil((sideA.length - segmentGap * (segments - 1)) / segments);\n    const segmentData = [];\n\n    let left = sideA.length;\n    let start = 0;\n\n    for (let i = 0; i < segments; i++) {\n        const len = randomWholeBetween(1, left / 2);\n        // const start = i * segmentsStep + segmentGap * i;\n        // const len = segmentsStep;\n        segmentData.push({\n            sideA: sideA.slice(start, start + len),\n            sideB: sideB.slice(start, start + len).reverse(),\n        });\n        start += len + segmentGap;\n        left -= len + segmentGap;\n    }\n    segmentData.forEach((s) => {\n        drawRibbonSegment(context, s.sideA, s.sideB, color, stroke, thickness);\n    });\n\n    // drawRibbonSegment(context, segmentStart, segmentLen, sideA, sideB, color, stroke, thickness);\n};\n\nexport const flowFieldRibbons2 = () => {\n    const config = {\n        name: 'flowFieldRibbons',\n        ratio: ratio.square,\n        scale: scale.standard,\n    };\n\n    let canvasMidX;\n    let canvasMidY;\n    const palette = palettes['80s_pop'];\n    const backgroundColor = tinycolor('white');\n\n    let time = 0;\n\n    const createRibbon = (fieldFn, startX, startY, length, vlimit = 1) => {\n        const props = {\n            x: startX,\n            y: startY,\n            velocityX: 0,\n            velocityY: 0,\n            mass: 1,\n        };\n        const particle = new Particle(props);\n        const coords = [];\n        for (let i = 0; i < length; i++) {\n            const theta = fieldFn(particle.x, particle.y);\n            // theta = quantize(4, theta);\n            const force = uvFromAngle(theta);\n            applyForce(force, particle);\n            particle.vVector = particle.vVector.limit(vlimit);\n            updatePosWithVelocity(particle);\n            coords.push([particle.x, particle.y]);\n            particle.aVector = new Vector(0, 0);\n        }\n        return coords;\n    };\n\n    const simplex2d = (x, y) => simplexNoise2d(x, y, 0.0001);\n    const simplex3d = (x, y) => simplexNoise3d(x, y, time, 0.0005);\n    const clifford = (x, y) => cliffordAttractor(canvas.width, canvas.height, x, y);\n    const jong = (x, y) => jongAttractor(canvas.width, canvas.height, x, y);\n    const noise = randomBoolean() ? clifford : jong;\n\n    let maxRadius;\n\n    const setup = ({ canvas, context }) => {\n        canvasMidX = canvas.width / 2;\n        canvasMidY = canvas.height / 2;\n        maxRadius = canvas.width * 0.4;\n\n        background(canvas, context)(backgroundColor);\n\n        // renderField(\n        //     canvas,\n        //     context,\n        //     noise,\n        //     tinycolor(oneOf(palette)).lighten(30),\n        //     canvas.width / 10,\n        //     canvas.width / 20\n        // );\n    };\n\n    const ribbonLen = randomWholeBetween(200, 500);\n    const ribbonThickness = randomWholeBetween(100, 300);\n\n    const maxItterations = randomWholeBetween(10, 30);\n    let currentItteration = 0;\n\n    const draw = ({ canvas, context }) => {\n        const color = oneOf(palette);\n        const len = ribbonLen;\n\n        // const rpoint = random.onCircle(maxRadius); // randomPointAround(maxRadius * 0.4);\n        const rpoint = [randomWholeBetween(0, canvas.width), randomWholeBetween(0, canvas.height)];\n\n        const x = rpoint[0];\n        const y = rpoint[1];\n        const x2 = x + 2;\n        const y2 = y;\n\n        const sideA = createRibbon(noise, x, y, len, 1);\n        const sideB = createRibbon(noise, x2, y2, len, 1);\n\n        drawRibbon(context)(sideA, sideB, color, false, ribbonThickness);\n\n        time += 0.01;\n\n        if (++currentItteration > maxItterations) return -1;\n    };\n\n    return {\n        config,\n        setup,\n        draw,\n    };\n};\n","/*\nExplorations with generative code\n*/\n\nimport normalize from 'normalize.css';\n\nimport { sketch } from './lib/sketch';\n\nimport { lissajous01 } from './released/lissajous01';\nimport { waves01 } from './released/waves01';\nimport { windLines } from './released/windLines';\nimport { hiImage01 } from './released/hiImage01';\nimport { variation1 } from './released/variation1';\nimport { variation2 } from './released/variation2';\nimport { domokun } from './released/domokun';\nimport { variation4 } from './released/variation4';\nimport { variation5 } from './released/variation5';\nimport { variation6 } from './released/variation6';\nimport { rainbowRakeOrbit } from './released/rainbow-rake-orbit-mouse';\nimport { threeAttractors } from './released/threeAttractors';\n\nimport { flowFieldTiles } from './experiments/flow-field-tiles';\n\nimport { flowFieldParticles } from './released/flow-field-particles';\nimport { flowFieldImage } from './released/flow-field-image';\nimport { flowFieldArcs } from './released/flow-field-arcs';\nimport { radialNoise } from './released/radial-noise';\nimport { radialImage } from './experiments/radial-image';\nimport { flowFieldRibbons } from './released/flow-field-ribbons';\nimport { flowFieldRibbons2 } from './released/flow-field-ribbons-2';\n\nconst s = sketch();\n\nconst DEBUG = undefined;\n// const DEBUG = flowFieldImage;\n\n// TODO append random seed value\nconst saveCanvasCapture = (_) => {\n    console.log('Saving capture');\n    const imageURI = s.canvas().toDataURL('image/png');\n    document.getElementById('download').setAttribute('download', `${s.variationName()}.png`);\n    document.getElementById('download').href = imageURI;\n};\n\ndocument.getElementById('download').addEventListener('click', saveCanvasCapture);\nwindow.addEventListener('keydown', (e) => {\n    if (e.key === 's') {\n        document.getElementById('download').click();\n    }\n});\n\nconst setNote = (note) => (document.getElementById('note').innerText = note);\n\nconst getQueryVariable = (variable) => {\n    const query = window.location.search.substring(1);\n    const vars = query.split('&');\n    for (let i = 0; i < vars.length; i++) {\n        const pair = vars[i].split('=');\n        if (pair[0] === variable) {\n            return pair[1];\n        }\n    }\n    return false;\n};\n\nconst variations = {\n    1: {\n        note: 'Particles are attracted to the pointer. Press to repel.',\n        sketch: variation1,\n    },\n    2: {\n        note: 'Press to increase speed.',\n        sketch: variation2,\n    },\n    3: {\n        note: 'Particles are repelled from the pointer. Press to attract.',\n        sketch: domokun,\n    },\n    4: {\n        note: 'Particles are repelled from the pointer. Press to attract.',\n        sketch: variation4,\n    },\n    5: {\n        note: 'Sit back and watch.',\n        sketch: variation5,\n    },\n    6: {\n        note: 'Move the mouse',\n        sketch: variation6,\n    },\n    7: {\n        note: 'Rakes orbit center and the mouse. Click to repel.',\n        sketch: rainbowRakeOrbit,\n    },\n    8: {\n        note: 'One attractor in the center, two on the sides.',\n        sketch: threeAttractors,\n    },\n    9: {\n        note: 'Say Hi',\n        sketch: hiImage01,\n    },\n    10: {\n        note: 'In the breeze',\n        sketch: windLines,\n    },\n    11: {\n        note: 'Inspired by Churn, Kenny Vaden https://www.reddit.com/r/generative/comments/lq8r11/churn_r_code/',\n        sketch: waves01,\n    },\n    12: {\n        note: 'Experimenting with rose shapes. Refresh for new randomized set.',\n        sketch: lissajous01,\n    },\n    13: {\n        note: 'Particles and fibers flowing with 3d simplex noise.',\n        sketch: flowFieldParticles,\n    },\n    14: {\n        note: 'Arcs flowing with 3d simplex noise.',\n        sketch: flowFieldArcs,\n    },\n    15: {\n        note: 'Rendering an image with flow fields. Photo by Francesca Zama https://unsplash.com/photos/OFjnQOf1pPA',\n        sketch: flowFieldImage,\n    },\n    16: {\n        note: 'Simplex noise going around ...',\n        sketch: radialNoise,\n    },\n    17: {\n        note: 'Ribbons attracted to an attractor',\n        sketch: flowFieldRibbons,\n    },\n    18: {\n        note: 'Ribbons attracted to an attractor',\n        sketch: flowFieldRibbons2,\n    },\n};\n\nlet variationKey = getQueryVariable('variation');\nconst variationKeys = Object.keys(variations);\nvariationKey = variationKey || variationKeys[variationKeys.length - 1];\n\nif (variations.hasOwnProperty(variationKey) && DEBUG === undefined) {\n    const vToRun = variations[variationKey];\n    setNote(vToRun.note);\n    s.run(vToRun.sketch());\n} else {\n    setNote('Not a valid variation!');\n}\n\nif (DEBUG) {\n    s.run(DEBUG());\n}\n"]}