var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "marchingSquares", ()=>marchingSquares
);
var _tinycolor2 = require("tinycolor2");
var _tinycolor2Default = parcelHelpers.interopDefault(_tinycolor2);
var _canvas = require("../lib/canvas/canvas");
var _sketch = require("../lib/Sketch");
var _palettes = require("../lib/color/palettes");
var _attractors = require("../lib/math/attractors");
var _rendernoise = require("../lib/canvas/rendernoise");
var _math = require("../lib/math/math");
const marchingSquares = ()=>{
    const config = {
        name: 'marchingSquares',
        ratio: _sketch.ratio.square,
        scale: _sketch.scale.standard
    };
    let ctx;
    let canvasWidth;
    let canvasHeight;
    let canvasCenterX;
    let canvasCenterY;
    let centerRadius;
    let imageWidth;
    let imageHeight;
    let startX;
    let maxX;
    let startY;
    let maxY;
    const margin = 50;
    const backgroundColor = _palettes.paperWhite.clone();
    const foreColor = _palettes.bicPenBlue.clone();
    const noise = (x, y)=>_attractors.simplexNoise2d(x, y, 0.004)
    ;
    const setup = ({ canvas , context  })=>{
        ctx = context;
        canvasWidth = canvas.width;
        canvasHeight = canvas.height;
        canvasCenterX = canvas.width / 2;
        canvasCenterY = canvas.height / 2;
        centerRadius = canvas.height / 4;
        imageWidth = canvas.width - margin * 2;
        imageHeight = canvas.height - margin * 2;
        startX = margin;
        maxX = canvas.width - margin;
        startY = margin;
        maxY = canvas.height - margin;
        _canvas.background(canvas, context)(backgroundColor);
    };
    const getTile = (num)=>{
    };
    const draw = ({ canvas , context  })=>{
        const { width , height  } = canvas;
        const resolution = 10;
        const lowColor = backgroundColor.clone().darken(25);
        const highColor = backgroundColor.clone().brighten(25);
        const noiseMax = 8;
        const xStep = Math.round(width / resolution) + 1;
        const yStep = Math.round(height / resolution) + 1;
        const field = [];
        for(let x = 0; x <= width; x += xStep)for(let y = 0; y <= height; y += yStep){
            const theta = noise(x, y);
            const normalized = _math.mapRange(-5, 5, 0, 1, theta);
            field.push({
                x,
                y,
                val: normalized
            });
            const fillColor = _tinycolor2Default.default.mix(lowColor, highColor, normalized * 100);
            context.fillStyle = _tinycolor2Default.default(fillColor).toRgbString();
            context.fillRect(x, y, x + xStep, y + yStep);
            _canvas.drawCircleFilled(context)(x, y, 3, 'red');
        }
        // console.log(field);
        return -1;
    };
    return {
        config,
        setup,
        draw
    };
};
